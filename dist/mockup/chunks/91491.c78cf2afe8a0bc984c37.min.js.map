{"version":3,"file":"chunks/91491.c78cf2afe8a0bc984c37.min.js","mappings":"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","sources":["webpack://@plone/mockup/./src/pat/tinymce/js/links.js"],"sourcesContent":["import Base from \"@patternslib/patternslib/src/core/base\";\nimport events from \"@patternslib/patternslib/src/core/events\";\nimport registry from \"@patternslib/patternslib/src/core/registry\";\nimport $ from \"jquery\";\nimport _ from \"underscore\";\n\nimport tinymce from \"tinymce/tinymce\";\nimport \"../../autotoc/autotoc\";\nimport \"../../modal/modal\";\nimport ImageTemplate from \"../templates/image.xml\";\nimport LinkTemplate from \"../templates/link.xml\";\n\nconst LinkType = Base.extend({\n    name: \"linktype\",\n    trigger: \".pat-linktype-dummy\",\n    defaults: {\n        linkModal: null, // required\n    },\n\n    init: function () {\n        this.linkModal = this.options.linkModal;\n        this.tinypattern = this.options.tinypattern;\n        this.tiny = this.tinypattern.tiny;\n        this.dom = this.tiny.dom;\n    },\n\n    getEl: function () {\n        return this.el.querySelector(\"input\");\n    },\n\n    value: function () {\n        return this.getEl().value.trim();\n    },\n\n    toUrl: function () {\n        return this.value();\n    },\n\n    load: function (element) {\n        let val = this.tiny.dom.getAttrib(element, \"data-val\");\n        this.set(val);\n    },\n\n    set: function (val) {\n        this.getEl().setAttribute(\"value\", val);\n    },\n\n    attributes: function () {\n        return {\n            \"data-val\": this.value(),\n        };\n    },\n    updateRelatedItems: function () {},\n});\n\nconst ExternalLink = LinkType.extend({\n    name: \"externallinktype\",\n    trigger: \".pat-externallinktype-dummy\",\n    init: function () {\n        LinkType.prototype.init.call(this);\n        // selectedItemsNode.addEventListener(\"change\", readSelectedItemsFromInput);\n        this.getEl().addEventListener(\"change\", (e) => {\n            // check here if we should automatically add in http:// to url\n            const val = $(e.target).val();\n            if (new RegExp(\"https?://\").test(val)) {\n                // already valid url\n                return;\n            }\n            const domain = val.split(\"/\")[0];\n            if (domain.indexOf(\".\") !== -1) {\n                $(e.target).val(\"http://\" + val);\n            }\n        });\n    },\n    load: function (element) {\n        let val = this.tiny.dom.getAttrib(element, \"data-val\");\n        this.set(val);\n    },\n});\n\nconst InternalLink = LinkType.extend({\n    name: \"internallinktype\",\n    trigger: \".pat-internallinktype-dummy\",\n    init: async function () {\n        const linkEl = this.getEl();\n        if (!linkEl) {\n            return;\n        }\n        LinkType.prototype.init.call(this);\n        await this.createContentBrowser();\n    },\n\n    getEl: function () {\n        return this.el.querySelector(\"input\");\n    },\n\n    createContentBrowser: async function () {\n        const options = {\n            selection: [],\n            ...this.linkModal.options?.relatedItems,\n        };\n        options[\"maximum-selection-size\"] = 1;\n        // enable upload in ContentBrowser instead of separate tab\n        options[\"upload\"] = 1;\n        const inputEl = this.getEl();\n        const element = this.tiny.selection.getNode();\n        const linkType = this.tiny.dom.getAttrib(element, \"data-linktype\");\n        if (linkType === \"internal\" || linkType === \"image\") {\n            options.selection.push(this.tiny.dom.getAttrib(element, \"data-val\"));\n        }\n        const ContentBrowser = (await import(\"../../contentbrowser/contentbrowser\"))\n            .default;\n        this.contentBrowserPattern = new ContentBrowser(inputEl, options);\n    },\n\n    toUrl: function () {\n        const value = this.value();\n        if (value) {\n            return this.tinypattern.generateUrl(value);\n        }\n        return null;\n    },\n});\n\nconst UploadLink = LinkType.extend({\n    name: \"uploadlinktype\",\n    trigger: \".pat-uploadlinktype-dummy\",\n    /* need to do it a bit differently here.\n       when a user uploads and tries to upload from\n       it, you need to delegate to the real insert\n       linke types */\n    getDelegatedLinkType: function () {\n        if (this.linkModal.linkType === \"uploadImage\") {\n            return this.linkModal.linkTypes.image;\n        } else {\n            return this.linkModal.linkTypes.internal;\n        }\n    },\n    toUrl: function () {\n        return this.getDelegatedLinkType().toUrl();\n    },\n    attributes: function () {\n        return this.getDelegatedLinkType().attributes();\n    },\n    set: function (val) {\n        return this.getDelegatedLinkType().set(val);\n    },\n    load: function (element) {\n        return this.getDelegatedLinkType().load(element);\n    },\n    value: function () {\n        return this.getDelegatedLinkType().value();\n    },\n});\n\nconst ImageLink = InternalLink.extend({\n    name: \"imagelinktype\",\n    trigger: \".pat-imagelinktype-dummy\",\n    toUrl: function () {\n        const value = this.value();\n        return this.tinypattern.generateImageUrl(\n            value,\n            this.linkModal.getScale(this.linkModal.$scale.val()),\n        );\n    },\n});\n\nconst EmailLink = LinkType.extend({\n    name: \"emaillinktype\",\n    trigger: \".pat-emaillinktype-dummy\",\n    toUrl: function () {\n        const val = this.value();\n        if (val) {\n            const subject = this.getSubject();\n            let href = \"mailto:\" + val;\n            if (subject) {\n                href += \"?subject=\" + subject;\n            }\n            return href;\n        }\n        return null;\n    },\n\n    load: function (element) {\n        LinkType.prototype.load.apply(this, [element]);\n        this.linkModal.$subject.val(this.tiny.dom.getAttrib(element, \"data-subject\"));\n    },\n\n    getSubject: function () {\n        return this.linkModal.$subject.val();\n    },\n\n    attributes: function () {\n        const attribs = LinkType.prototype.attributes.call(this);\n        attribs[\"data-subject\"] = this.getSubject();\n        return attribs;\n    },\n});\n\nconst AnchorLink = LinkType.extend({\n    name: \"anchorlinktype\",\n    trigger: \".pat-anchorlinktype-dummy\",\n    init: function () {\n        LinkType.prototype.init.call(this);\n        this.$select = this.$el.find(\"select\");\n        this.anchorNodes = [];\n        this.anchorData = [];\n        this.populate();\n    },\n\n    value: function () {\n        const val = this.$select.select2(\"data\");\n        if (val && typeof val === \"object\") {\n            return val.id;\n        }\n        return val;\n    },\n\n    populate: function () {\n        this.$select.find(\"option\").remove();\n        this.anchorNodes = [];\n        this.anchorData = [];\n\n        let nodes = this.tiny.dom.select(\".mceItemAnchor,.mce-item-anchor\");\n        for (const node of nodes) {\n            let name = this.tiny.dom.getAttrib(node, \"name\");\n            if (!name) {\n                name = this.tiny.dom.getAttrib(node, \"id\");\n            }\n            if (name !== \"\") {\n                this.anchorNodes.push(node);\n                this.anchorData.push({ name: name, title: name });\n            }\n        }\n\n        nodes = this.tiny.dom.select(this.linkModal.options.anchorSelector);\n        if (nodes.length > 0) {\n            for (const node of nodes) {\n                const title = $(node)\n                    .text()\n                    .replace(/^\\s+|\\s+$/g, \"\");\n                if (title === \"\") {\n                    continue;\n                }\n                let name = title.toLowerCase().substring(0, 1024);\n                name = name.replace(/[^a-z0-9]/g, \"-\");\n                /* okay, ugly, but we need to first check that this anchor isn't already available */\n                let found = false;\n                for (let cnt = 0; cnt < this.anchorNodes.length; cnt++) {\n                    let anode = this.anchorData[cnt];\n                    if (anode.name === name) {\n                        found = true;\n                        // so it's also found, let's update the title to be more presentable\n                        anode.title = title;\n                        break;\n                    }\n                }\n                if (!found) {\n                    this.anchorData.push({\n                        name: name,\n                        title: title,\n                        newAnchor: true,\n                    });\n                    this.anchorNodes.push(node);\n                }\n            }\n        }\n        if (this.anchorNodes.length > 0) {\n            for (const [index, data] of this.anchorData.entries()) {\n                this.$select.append(`<option value=\"${index}\">${data.title}</option>`);\n            }\n        } else {\n            this.$select.append(\"<option>No anchors found..</option>\");\n        }\n    },\n\n    getIndex: function (name) {\n        for (const [index, data] of this.anchorData.entries()) {\n            if (data.name === name) {\n                return index;\n            }\n        }\n        return 0;\n    },\n\n    toUrl: function () {\n        const val = this.value();\n        if (val) {\n            const index = parseInt(val, 10);\n            const node = this.anchorNodes[index];\n            const data = this.anchorData[index];\n            if (data.newAnchor) {\n                node.innerHTML = `<a name=\"${data.name}\" class=\"mce-item-anchor\"></a>${node.innerHTML}`;\n            }\n            return `#${data.name}`;\n        }\n        return null;\n    },\n\n    set: function (val) {\n        const anchor = this.getIndex(val);\n        this.$select.select2(\"data\", \"\" + anchor);\n    },\n});\n\nconst add_image = (editor) => {\n    // in case of inline mode we need the node where the pattern is instantinated\n    // not the tinymce editable div (\"-editable\")\n    const pattern_inst = document.getElementById(editor.id.replace(\"-editable\", \"\"))[\n        \"pattern-tinymce\"\n    ].instance;\n    pattern_inst.addImageClicked();\n};\n\nconst add_link = (editor) => {\n    const pattern_inst = document.getElementById(editor.id.replace(\"-editable\", \"\"))[\n        \"pattern-tinymce\"\n    ].instance;\n    pattern_inst.addLinkClicked();\n};\n\n// image plugin\n// eslint-disable-next-line no-unused-vars\ntinymce.PluginManager.add(\"ploneimage\", (editor, url) => {\n    editor.ui.registry.addButton(\"ploneimage\", {\n        icon: \"image\",\n        text: \"Insert image\",\n        tooltip: \"Insert/edit image\",\n        onAction: () => {\n            add_image(editor);\n        },\n        // stateSelector: \"img:not([data-mce-object])\",\n    });\n    editor.ui.registry.addMenuItem(\"ploneimage\", {\n        icon: \"image\",\n        text: \"Insert image\",\n        onAction: () => {\n            add_image(editor);\n        },\n        // stateSelector: \"img:not([data-mce-object])\",\n    });\n});\n\n// link plugin\n// eslint-disable-next-line no-unused-vars\ntinymce.PluginManager.add(\"plonelink\", (editor, url) => {\n    editor.ui.registry.addButton(\"plonelink\", {\n        icon: \"link\",\n        tooltip: \"Insert/edit link\",\n        shortcut: \"Ctrl+K\",\n        onAction: () => {\n            add_link(editor);\n        },\n        stateSelector: \"a[href]\",\n    });\n    editor.ui.registry.addMenuItem(\"plonelink\", {\n        icon: \"link\",\n        text: \"Insert link\",\n        shortcut: \"Ctrl+K\",\n        onAction: () => {\n            add_link(editor);\n        },\n        stateSelector: \"a[href]\",\n    });\n\n    editor.ui.registry.addButton(\"unlink\", {\n        icon: \"unlink\",\n        tooltip: \"Remove link\",\n        // eslint-disable-next-line no-unused-vars\n        onAction: (api) => {\n            editor.execCommand(\"unlink\");\n        },\n        stateSelector: \"a[href]\",\n    });\n});\n\nexport default Base.extend({\n    name: \"linkmodal\",\n    trigger: \".pat-linkmodal\",\n    defaults: {\n        anchorSelector: \"h1,h2,h3\",\n        linkTypes: [\n            /* available, none activate by default because these options\n         * only get merged, not set.\n        'internal',\n        'upload',\n        'external',\n        'email',\n        'anchor',\n        'image'\n        'externalImage'*/\n        ],\n        initialLinkType: \"internal\",\n        text: {\n            insertHeading: \"Insert Link\",\n        },\n        linkTypeClassMapping: {\n            internal: InternalLink,\n            upload: UploadLink,\n            external: ExternalLink,\n            email: EmailLink,\n            anchor: AnchorLink,\n            image: ImageLink,\n            uploadImage: UploadLink,\n            externalImage: LinkType,\n        },\n    },\n    // XXX: this is a temporary work around for having separated templates.\n    // Image modal is going to have its own modal class, funcs and template.\n    linkTypeTemplateMapping: {\n        internal: LinkTemplate,\n        upload: LinkTemplate,\n        external: LinkTemplate,\n        email: LinkTemplate,\n        anchor: LinkTemplate,\n        image: ImageTemplate,\n        uploadImage: ImageTemplate,\n        externalImage: ImageTemplate,\n    },\n\n    template: function (data) {\n        return _.template(this.linkTypeTemplateMapping[this.linkType])(data);\n    },\n\n    init: function () {\n        this.use_picture_variants =\n            Object.keys(this.options.pictureVariants || {}).length > 0;\n        this.use_scales =\n            !this.use_picture_variants && (this.options.imageScales || []).length > 0;\n\n        this.tinypattern = this.options.tinypattern;\n        if (this.tinypattern.options.anchorSelector) {\n            this.options.anchorSelector = this.tinypattern.options.anchorSelector;\n        }\n        this.tiny = this.tinypattern.tiny;\n        this.dom = this.tiny.dom;\n        this.linkType = this.options.initialLinkType;\n        this.linkTypes = {};\n        this.modal = registry.patterns[\"plone-modal\"].init(this.$el, {\n            html: this.generateModalHtml(),\n            content: null,\n            buttons: \".plone-btn\",\n            reloadWindowOnClose: false,\n            templateOptions: {\n                classDialog: \"modal-dialog modal-lg\",\n                reloadWindowOnClose: false,\n            },\n            actionOptions: { reloadWindowOnClose: false },\n            backdropOptions: {\n                zIndex: \"1340\",\n                closeOnClick: false,\n            },\n        });\n        this.modal.on(\"shown\", (e) => {\n            this.modalShown.apply(this, [e]);\n        });\n    },\n\n    isOnlyTextSelected: function () {\n        /* pulled from TinyMCE link plugin */\n        const html = this.tiny.selection.getContent();\n\n        // Partial html and not a fully selected anchor element\n        if (\n            /</.test(html) &&\n            (!/^<a [^>]+>[^<]+<\\/a>$/.test(html) || html.indexOf(\"href=\") === -1)\n        ) {\n            return false;\n        }\n\n        if (this.anchorElm) {\n            const nodes = this.anchorElm.childNodes;\n\n            if (nodes.length === 0) {\n                return false;\n            }\n\n            for (let ii = nodes.length - 1; ii >= 0; ii--) {\n                if (nodes[ii].nodeType !== 3) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    },\n\n    generateModalHtml: function () {\n        return this.template({\n            options: this.options,\n            upload: this.options.upload,\n            text: this.options.text,\n            insertHeading: this.options.text.insertHeading,\n            insertImageHelp: this.options.text.insertImageHelp,\n            uploadText: this.options.text.upload,\n            insertLinkHelp: this.options.text.insertLinkHelp,\n            internal: this.options.text.internal,\n            external: this.options.text.external,\n            anchor: this.options.text.anchor,\n            anchorLabel: this.options.text.anchorLabel,\n            target: this.options.text.target,\n            linkTypes: this.options.linkTypes,\n            externalText: this.options.text.externalText,\n            emailText: this.options.text.email,\n            subjectText: this.options.text.subject,\n            targetList: this.options.targetList,\n            titleText: this.options.text.title,\n            internalImageText: this.options.text.internalImage,\n            externalImage: this.options.text.externalImage,\n            externalImageText: this.options.text.externalImageText,\n            altText: this.options.text.alt,\n            imageAlignText: this.options.text.imageAlign,\n            captionFromDescriptionText: this.options.text.captionFromDescription,\n            enableImageZoom: this.options.text.enableImageZoom,\n            captionText: this.options.text.caption,\n            scaleText: this.options.text.scale,\n            pictureVariants: this.options.pictureVariants,\n            imageScales: this.options.imageScales,\n            use_picture_variants: this.use_picture_variants,\n            use_scales: this.use_scales,\n            imageCaptioningEnabled: this.options.imageCaptioningEnabled,\n            cancelBtn: this.options.text.cancelBtn,\n            insertBtn: this.options.text.insertBtn,\n        });\n    },\n\n    isImageMode: function () {\n        return [\"image\", \"uploadImage\", \"externalImage\"].indexOf(this.linkType) !== -1;\n    },\n\n    initElements: async function () {\n        this.$target = $('select[name=\"target\"]', this.modal.$modal);\n        this.$button = $('.modal-footer input[name=\"insert\"]', this.modal.$modal);\n        this.$title = $('input[name=\"title\"]', this.modal.$modal);\n        this.$subject = $('input[name=\"subject\"]', this.modal.$modal);\n\n        this.$alt = $('input[name=\"alt\"]', this.modal.$modal);\n        this.$align = $('select[name=\"align\"]', this.modal.$modal);\n        this.$scale = $('select[name=\"scale\"]', this.modal.$modal);\n        this.$selectedItems = $(\"input.pat-contentbrowser\", this.modal.$modal);\n        this.$enableImageZoom = $('input[name=\"enableImageZoom\"]', this.modal.$modal);\n        this.$captionFromDescription = $(\n            'input[name=\"captionFromDescription\"]',\n            this.modal.$modal,\n        );\n        this.$caption = $('textarea[name=\"caption\"]', this.modal.$modal);\n\n        /* load up all the link types */\n        for (const type of this.options.linkTypes) {\n            const $container = $(\".linkType.\" + type + \" .main\", this.modal.$modal);\n            if ($container.length) {\n                const instance = new this.options.linkTypeClassMapping[type](\n                    $container,\n                    {\n                        linkModal: this,\n                        tinypattern: this.tinypattern,\n                    },\n                );\n                await events.await_pattern_init(instance);\n                this.linkTypes[type] = instance;\n            }\n        }\n\n        $(\".autotoc-nav a\", this.modal.$modal).on(\"click\", (e) => {\n            const $fieldset = $(\"fieldset.linkType\", this.modal.$modal).eq(\n                $(e.target).index(),\n            );\n            const classes = $fieldset[0].className.split(/\\s+/);\n            _.each(classes, (val) => {\n                if (_.indexOf(this.options.linkTypes, val) !== -1) {\n                    this.linkType = val;\n                }\n            });\n        });\n\n        this.$captionFromDescription.on(\"change\", (e) => {\n            if (e.target.checked) {\n                this.$caption.prop(\"disabled\", true);\n            } else {\n                this.$caption.prop(\"disabled\", false);\n            }\n        });\n    },\n\n    getLinkUrl: function () {\n        // get the url, only get one uid\n        return this.linkTypes[this.linkType].toUrl();\n    },\n\n    getValue: function () {\n        return this.linkTypes[this.linkType].value();\n    },\n\n    updateAnchor: function (href) {\n        this.tiny.focus();\n        this.tiny.selection.setRng(this.rng);\n\n        const target = this.$target.val();\n        const title = this.$title.val();\n        const linkAttrs = $.extend(\n            true,\n            this.data,\n            {\n                \"title\": title ? title : null,\n                \"target\": target ? target : null,\n                \"data-linkType\": this.linkType,\n                \"href\": href,\n            },\n            this.linkTypes[this.linkType].attributes(),\n        );\n        if (this.anchorElm) {\n            if (this.onlyText && linkAttrs.text !== this.initialText) {\n                if (\"innerText\" in this.anchorElm) {\n                    this.anchorElm.innerText = this.data.text;\n                } else {\n                    this.anchorElm.textContent = this.data.text;\n                }\n            }\n\n            this.tiny.dom.setAttribs(this.anchorElm, linkAttrs);\n\n            this.tiny.selection.select(this.anchorElm);\n            this.tiny.undoManager.add();\n        } else {\n            if (this.onlyText) {\n                this.tiny.insertContent(\n                    this.tiny.dom.createHTML(\n                        \"a\",\n                        linkAttrs,\n                        this.tiny.dom.encode(this.data.text),\n                    ),\n                );\n            } else {\n                this.tiny.execCommand(\"mceInsertLink\", false, linkAttrs);\n            }\n        }\n    },\n\n    focusElement: function (elm) {\n        this.tiny.focus();\n        this.tiny.selection.select(elm);\n        this.tiny.nodeChanged();\n    },\n\n    getScale: function (size) {\n        if (this.use_picture_variants) {\n            const pictureVariantsConfig = this.options.pictureVariants[size];\n            return pictureVariantsConfig.sourceset[\n                pictureVariantsConfig.sourceset.length - 1\n            ].scale;\n        } else if (this.use_scales) {\n            return size;\n        }\n        return \"\";\n    },\n\n    updateImage: function (src) {\n        console.log(`updateImage: ${src}`);\n        const title = this.$title.val();\n        const captionFromDescription = this.$captionFromDescription.prop(\"checked\");\n        const enableImageZoom = this.$enableImageZoom.prop(\"checked\");\n        const caption = this.$caption.val();\n\n        this.tiny.focus();\n        this.tiny.selection.setRng(this.rng);\n        const cssclasses = [\"image-richtext\"];\n        if (this.$align.val()) {\n            cssclasses.push(this.$align.val());\n        }\n        if (this.linkType !== \"externalImage\") {\n            if (this.use_picture_variants) {\n                cssclasses.push(`picture-variant-${this.$scale.val()}`);\n            } else if (this.use_scales) {\n                cssclasses.push(`image-scale-${this.$scale.val()}`);\n            }\n        }\n        if (captionFromDescription || caption) {\n            cssclasses.push(\"captioned\");\n        }\n        if (enableImageZoom) {\n            cssclasses.push(\"zoomable\");\n        }\n        const data = {\n            \"src\": src,\n            \"title\": title ? title : null,\n            \"alt\": this.$alt.val(),\n            \"class\": cssclasses.join(\" \"),\n            \"data-linkType\": this.linkType,\n            \"data-scale\": this.getScale(this.$scale.val()),\n            ...this.linkTypes[this.linkType].attributes(),\n        };\n\n        if (this.linkType !== \"externalImage\") {\n            if (this.use_picture_variants) {\n                data[\"data-picturevariant\"] = this.$scale.val();\n            } else if (this.use_scales) {\n                data[\"data-scale\"] = this.$scale.val();\n            }\n        }\n\n        if (caption && !captionFromDescription) {\n            data[\"data-captiontext\"] = caption;\n        }\n        if (this.imgElm && !this.imgElm.getAttribute(\"data-mce-object\")) {\n            const imgWidth = this.dom.getAttrib(this.imgElm, \"width\");\n            const imgHeight = this.dom.getAttrib(this.imgElm, \"height\");\n            if (imgWidth) {\n                data.width = imgWidth;\n            }\n            if (imgHeight) {\n                data.height = imgHeight;\n            }\n        } else {\n            this.imgElm = null;\n        }\n\n        const waitLoad = (imgElm) => {\n            imgElm.onload = imgElm.onerror = () => {\n                imgElm.onload = imgElm.onerror = null;\n                this.focusElement(imgElm);\n            };\n        };\n\n        const newImgElm = this.dom.create(\"img\", data);\n\n        if (this.imgElm && this.imgElm.tagName.toLowerCase() == \"img\") {\n            this.imgElm.replaceWith(newImgElm);\n        } else {\n            this.rng.insertNode(newImgElm);\n        }\n        this.imgElm = newImgElm;\n\n        waitLoad(this.imgElm);\n        if (this.imgElm.complete) {\n            this.focusElement(this.imgElm);\n        }\n    },\n\n    // eslint-disable-next-line no-unused-vars\n    modalShown: async function (e) {\n        await this.initElements();\n        this.initData();\n        // upload init\n        // if (this.options.upload) {\n        //     this.$upload = $(\".uploadify-me\", this.modal.$modal);\n        //     this.options.upload.relatedItems = $.extend(\n        //         true,\n        //         {},\n        //         this.options.relatedItems\n        //     );\n        //     this.options.upload.relatedItems.selectableTypes = this.options.folderTypes;\n        //     this.$upload.addClass(\"pat-upload\");\n        //     new PatternUpload(this.$upload, this.options.upload);\n        //     this.$upload.on(\n        //         \"uploadAllCompleted\",\n        //         (evt, data) => {\n        //             if (this.linkTypes.image) {\n        //                 this.linkTypes.image.set(data.data.UID);\n        //                 $(\n        //                     \"#\" + $(\"#tinylink-image\", this.modal.$modal).data(\"navref\")\n        //                 ).trigger(\"click\");\n        //             } else {\n        //                 this.linkTypes.internal.set(data.data.UID);\n        //                 $(\n        //                     \"#\" +\n        //                         $(\"#tinylink-internal\", this.modal.$modal).data(\"navref\")\n        //                 ).trigger(\"click\");\n        //             }\n        //         }\n        //     );\n        // }\n\n        this.$button.off(\"click\").on(\"click\", (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            this.linkType = this.modal.$modal.find(\"fieldset.active\").data(\"linktype\");\n            // if (this.linkType === \"uploadImage\" || this.linkType === \"upload\") {\n            //     const patUpload = this.$upload.data().patternUpload;\n            //     if (patUpload.dropzone.files.length > 0) {\n            //         patUpload.processUpload();\n            //         // eslint-disable-next-line no-unused-vars\n            //         this.$upload.on(\"uploadAllCompleted\", (evt, data) => {\n            //             let counter = 0;\n            //             const checkUpload = () => {\n            //                 if (counter < 5 && !this.linkTypes[this.linkType].value()) {\n            //                     counter += 1;\n            //                     setTimeout(checkUpload, 100);\n            //                     return;\n            //                 } else {\n            //                     const href = this.getLinkUrl();\n            //                     this.updateImage(href);\n            //                     this.hide();\n            //                 }\n            //             };\n            //             checkUpload();\n            //         });\n            //     }\n            // }\n            let href;\n            try {\n                href = this.getLinkUrl();\n            } catch (error) {\n                console.log(error);\n                return; // just cut out if no url\n            }\n            if (!href) {\n                return; // just cut out if no url\n            }\n            if (this.isImageMode()) {\n                this.updateImage(href);\n            } else {\n                /* regular anchor */\n                this.updateAnchor(href);\n            }\n            this.hide();\n        });\n        $('.modal-footer input[name=\"cancel\"]', this.modal.$modal).on(\"click\", (e) => {\n            e.preventDefault();\n            this.hide();\n        });\n    },\n\n    show: function () {\n        this.modal.show();\n    },\n\n    hide: function () {\n        this.modal.hide();\n    },\n\n    initData: function () {\n        this.data = {};\n        // get selection BEFORE..\n        // This is pulled from TinyMCE link plugin\n        this.initialText = null;\n        let value;\n        this.rng = this.tiny.selection.getRng();\n        this.selectedElm = this.tiny.selection.getNode();\n        this.anchorElm = this.tiny.dom.getParent(this.selectedElm, \"a[href]\");\n        this.onlyText = this.isOnlyTextSelected();\n\n        this.data.text = this.initialText = this.anchorElm\n            ? this.anchorElm.innerText || this.anchorElm.textContent\n            : this.tiny.selection.getContent({ format: \"text\" });\n        this.data.href = this.anchorElm\n            ? this.tiny.dom.getAttrib(this.anchorElm, \"href\")\n            : \"\";\n\n        if (this.anchorElm) {\n            this.data.target = this.tiny.dom.getAttrib(this.anchorElm, \"target\");\n        } else if (this.tiny.options.get(\"link_default_target\")) {\n            this.data.target = this.tiny.options.get(\"link_default_target\");\n        }\n\n        if ((value = this.tiny.dom.getAttrib(this.anchorElm, \"rel\"))) {\n            this.data.rel = value;\n        }\n\n        if ((value = this.tiny.dom.getAttrib(this.anchorElm, \"class\"))) {\n            this.data[\"class\"] = value;\n        }\n\n        if ((value = this.tiny.dom.getAttrib(this.anchorElm, \"title\"))) {\n            this.data.title = value;\n        }\n\n        this.tiny.focus();\n        this.anchorElm = this.dom.getParent(this.selectedElm, \"a[href]\");\n\n        if (this.isImageMode()) {\n            this.imgElm = this.selectedElm;\n\n            const src = this.dom.getAttrib(this.imgElm, \"src\");\n            const captionText = this.dom.getAttrib(this.imgElm, \"data-captiontext\");\n            this.$title.val(this.dom.getAttrib(this.imgElm, \"title\"));\n            this.$alt.val(this.dom.getAttrib(this.imgElm, \"alt\"));\n\n            if ($(this.imgElm).hasClass(\"zoomable\")) {\n                this.$enableImageZoom.prop(\"checked\", true);\n            }\n            if ($(this.imgElm).hasClass(\"captioned\") && !captionText) {\n                this.$captionFromDescription.prop(\"checked\", true);\n                this.$caption.prop(\"disabled\", true);\n            } else if ($(this.imgElm).hasClass(\"captioned\") && captionText) {\n                this.$captionFromDescription.prop(\"checked\", false);\n            } else {\n                this.$captionFromDescription.prop(\"checked\", false);\n            }\n            if (captionText) {\n                this.$caption.val(captionText);\n            }\n\n            const linkType = this.dom.getAttrib(this.imgElm, \"data-linktype\");\n            if (linkType && linkType in this.linkTypes) {\n                this.linkType = linkType;\n                this.linkTypes[this.linkType].load(this.imgElm);\n\n                // Set the active scale selection in link modal\n                let size = \"\";\n                if (this.use_picture_variants) {\n                    size = this.dom.getAttrib(this.imgElm, \"data-picturevariant\");\n                } else if (this.use_scales) {\n                    size = this.dom.getAttrib(this.imgElm, \"data-scale\");\n                }\n                this.$scale.val(size);\n\n                // const selectedImageUid = this.dom.getAttrib(\n                //     this.imgElm,\n                //     \"data-val\"\n                // );\n                // this.$selectedItems.val()\n\n                $(\"#tinylink-\" + this.linkType, this.modal.$modal).trigger(\"click\");\n            } else if (src) {\n                this.guessImageLink(src);\n            }\n            const className = this.dom.getAttrib(this.imgElm, \"class\");\n            const klasses = className.split(\" \");\n            for (const klass of klasses) {\n                for (const availClass in this.options.imageClasses) {\n                    if (availClass.indexOf(klass) !== -1) {\n                        this.$align.val(klass);\n                    }\n                }\n            }\n        } else if (this.anchorElm) {\n            this.focusElement(this.anchorElm);\n            const href = this.dom.getAttrib(this.anchorElm, \"href\");\n            this.$target.val(this.dom.getAttrib(this.anchorElm, \"target\"));\n            this.$title.val(this.dom.getAttrib(this.anchorElm, \"title\"));\n            const linkType = this.dom.getAttrib(this.anchorElm, \"data-linktype\");\n            if (linkType) {\n                this.linkType = linkType;\n                this.linkTypes[this.linkType].load(this.anchorElm);\n                const $panel = $(\"#tinylink-\" + this.linkType, this.modal.$modal);\n                // $('#tinylink-' + this.linkType, this.modal.$modal).trigger('click');\n                if ($panel.length === 1) {\n                    $(\"#\" + $panel.data(\"autotoc-trigger-id\")).trigger(\"click\");\n                }\n            } else if (href) {\n                this.guessAnchorLink(href);\n            }\n        }\n    },\n\n    guessImageLink: function (src) {\n        if (src.indexOf(this.options.prependToScalePart) !== -1) {\n            this.linkType = \"image\";\n            // TODO: use data-scale attribute instead:\n            this.$scale.val(this.tinypattern.getScaleFromUrl(src));\n            this.linkTypes.image.set(this.tinypattern.stripGeneratedUrl(src));\n        } else {\n            this.linkType = \"externalImage\";\n            this.linkTypes.externalImage.set(src);\n        }\n    },\n\n    guessAnchorLink: function (href) {\n        console.log(\"href: \" + href);\n        if (\n            this.options.prependToUrl &&\n            href.indexOf(this.options.prependToUrl) !== -1\n        ) {\n            // XXX if using default configuration, it gets more difficult\n            // here to detect internal urls so this might need to change...\n            this.linkType = \"internal\";\n            this.linkTypes.internal.set(this.tinypattern.stripGeneratedUrl(href));\n        } else if (href.indexOf(\"mailto:\") !== -1) {\n            this.linkType = \"email\";\n            const email = href.substring(\"mailto:\".length, href.length);\n            const split = email.split(\"?subject=\");\n            this.linkTypes.email.set(split[0]);\n            if (split.length > 1) {\n                this.$subject.val(decodeURIComponent(split[1]));\n            }\n        } else if (href[0] === \"#\") {\n            this.linkType = \"anchor\";\n            this.linkTypes.anchor.set(href.substring(1));\n        } else {\n            this.linkType = \"external\";\n            this.linkTypes.external.set(href);\n        }\n    },\n\n    // setSelectElement: function ($el, val) {\n    //     $el.find(\"option:selected\").prop(\"selected\", false);\n    //     if (val) {\n    //         // update\n    //         $el.find('option[value=\"' + val + '\"]').prop(\"selected\", true);\n    //     }\n    // },\n\n    reinitialize: function () {\n        /*\n         * This will probably be called before show is run.\n         * It will overwrite the base html template given to\n         * be able to privde default values for the overlay\n         */\n        this.modal.options.html = this.generateModalHtml();\n    },\n});\n"],"names":["LinkType","Base","extend","name","trigger","defaults","linkModal","init","this","options","tinypattern","tiny","dom","getEl","el","querySelector","value","trim","toUrl","load","element","val","getAttrib","set","setAttribute","attributes","updateRelatedItems","ExternalLink","prototype","call","addEventListener","e","$","target","RegExp","test","split","indexOf","InternalLink","async","createContentBrowser","selection","relatedItems","inputEl","getNode","linkType","push","ContentBrowser","default","contentBrowserPattern","generateUrl","UploadLink","getDelegatedLinkType","linkTypes","image","internal","ImageLink","generateImageUrl","getScale","$scale","EmailLink","subject","getSubject","href","apply","$subject","attribs","AnchorLink","$select","$el","find","anchorNodes","anchorData","populate","select2","id","remove","nodes","select","node","title","anchorSelector","length","text","replace","toLowerCase","substring","found","cnt","anode","newAnchor","index","data","entries","append","getIndex","parseInt","innerHTML","anchor","add_image","editor","document","getElementById","instance","addImageClicked","add_link","addLinkClicked","tinymce","add","url","ui","registry","addButton","icon","tooltip","onAction","addMenuItem","shortcut","stateSelector","api","execCommand","initialLinkType","insertHeading","linkTypeClassMapping","upload","external","email","uploadImage","externalImage","linkTypeTemplateMapping","LinkTemplate","ImageTemplate","template","_","use_picture_variants","Object","keys","pictureVariants","use_scales","imageScales","modal","patterns","html","generateModalHtml","content","buttons","reloadWindowOnClose","templateOptions","classDialog","actionOptions","backdropOptions","zIndex","closeOnClick","on","modalShown","isOnlyTextSelected","getContent","anchorElm","childNodes","ii","nodeType","insertImageHelp","uploadText","insertLinkHelp","anchorLabel","externalText","emailText","subjectText","targetList","titleText","internalImageText","internalImage","externalImageText","altText","alt","imageAlignText","imageAlign","captionFromDescriptionText","captionFromDescription","enableImageZoom","captionText","caption","scaleText","scale","imageCaptioningEnabled","cancelBtn","insertBtn","isImageMode","initElements","$target","$modal","$button","$title","$alt","$align","$selectedItems","$enableImageZoom","$captionFromDescription","$caption","type","$container","events","await_pattern_init","classes","eq","className","checked","prop","getLinkUrl","getValue","updateAnchor","focus","setRng","rng","linkAttrs","onlyText","initialText","innerText","textContent","setAttribs","undoManager","insertContent","createHTML","encode","focusElement","elm","nodeChanged","size","pictureVariantsConfig","sourceset","updateImage","src","console","log","cssclasses","join","imgElm","getAttribute","imgWidth","imgHeight","width","height","newImgElm","create","tagName","replaceWith","insertNode","onload","onerror","waitLoad","complete","initData","off","preventDefault","stopPropagation","error","hide","show","getRng","selectedElm","getParent","format","get","rel","hasClass","guessImageLink","klasses","klass","availClass","imageClasses","$panel","guessAnchorLink","prependToScalePart","getScaleFromUrl","stripGeneratedUrl","prependToUrl","decodeURIComponent","reinitialize"],"sourceRoot":""}