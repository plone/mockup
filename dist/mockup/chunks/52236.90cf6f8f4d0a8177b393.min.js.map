{"version":3,"file":"chunks/52236.90cf6f8f4d0a8177b393.min.js","mappings":"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","sources":["webpack://@plone/mockup/./node_modules/tinymce/plugins/accordion/index.js","webpack://@plone/mockup/./node_modules/tinymce/plugins/accordion/plugin.js"],"sourcesContent":["// Exports the \"accordion\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/accordion')\n//   ES2015:\n//     import 'tinymce/plugins/accordion'\nrequire('./plugin.js');","/**\n * TinyMCE version 7.2.1 (2024-07-03)\n */\n\n(function () {\n    'use strict';\n\n    var global$4 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    let unique = 0;\n    const generate = prefix => {\n      const date = new Date();\n      const time = date.getTime();\n      const random = Math.floor(Math.random() * 1000000000);\n      unique++;\n      return prefix + '_' + random + unique + String(time);\n    };\n\n    const hasProto = (v, constructor, predicate) => {\n      var _a;\n      if (predicate(v, constructor.prototype)) {\n        return true;\n      } else {\n        return ((_a = v.constructor) === null || _a === void 0 ? void 0 : _a.name) === constructor.name;\n      }\n    };\n    const typeOf = x => {\n      const t = typeof x;\n      if (x === null) {\n        return 'null';\n      } else if (t === 'object' && Array.isArray(x)) {\n        return 'array';\n      } else if (t === 'object' && hasProto(x, String, (o, proto) => proto.isPrototypeOf(o))) {\n        return 'string';\n      } else {\n        return t;\n      }\n    };\n    const isType$1 = type => value => typeOf(value) === type;\n    const isSimpleType = type => value => typeof value === type;\n    const isString = isType$1('string');\n    const isBoolean = isSimpleType('boolean');\n    const isNullable = a => a === null || a === undefined;\n    const isNonNullable = a => !isNullable(a);\n    const isFunction = isSimpleType('function');\n    const isNumber = isSimpleType('number');\n\n    const compose1 = (fbc, fab) => a => fbc(fab(a));\n    const constant = value => {\n      return () => {\n        return value;\n      };\n    };\n    const tripleEquals = (a, b) => {\n      return a === b;\n    };\n    const never = constant(false);\n\n    class Optional {\n      constructor(tag, value) {\n        this.tag = tag;\n        this.value = value;\n      }\n      static some(value) {\n        return new Optional(true, value);\n      }\n      static none() {\n        return Optional.singletonNone;\n      }\n      fold(onNone, onSome) {\n        if (this.tag) {\n          return onSome(this.value);\n        } else {\n          return onNone();\n        }\n      }\n      isSome() {\n        return this.tag;\n      }\n      isNone() {\n        return !this.tag;\n      }\n      map(mapper) {\n        if (this.tag) {\n          return Optional.some(mapper(this.value));\n        } else {\n          return Optional.none();\n        }\n      }\n      bind(binder) {\n        if (this.tag) {\n          return binder(this.value);\n        } else {\n          return Optional.none();\n        }\n      }\n      exists(predicate) {\n        return this.tag && predicate(this.value);\n      }\n      forall(predicate) {\n        return !this.tag || predicate(this.value);\n      }\n      filter(predicate) {\n        if (!this.tag || predicate(this.value)) {\n          return this;\n        } else {\n          return Optional.none();\n        }\n      }\n      getOr(replacement) {\n        return this.tag ? this.value : replacement;\n      }\n      or(replacement) {\n        return this.tag ? this : replacement;\n      }\n      getOrThunk(thunk) {\n        return this.tag ? this.value : thunk();\n      }\n      orThunk(thunk) {\n        return this.tag ? this : thunk();\n      }\n      getOrDie(message) {\n        if (!this.tag) {\n          throw new Error(message !== null && message !== void 0 ? message : 'Called getOrDie on None');\n        } else {\n          return this.value;\n        }\n      }\n      static from(value) {\n        return isNonNullable(value) ? Optional.some(value) : Optional.none();\n      }\n      getOrNull() {\n        return this.tag ? this.value : null;\n      }\n      getOrUndefined() {\n        return this.value;\n      }\n      each(worker) {\n        if (this.tag) {\n          worker(this.value);\n        }\n      }\n      toArray() {\n        return this.tag ? [this.value] : [];\n      }\n      toString() {\n        return this.tag ? `some(${ this.value })` : 'none()';\n      }\n    }\n    Optional.singletonNone = new Optional(false);\n\n    const nativeIndexOf = Array.prototype.indexOf;\n    const rawIndexOf = (ts, t) => nativeIndexOf.call(ts, t);\n    const contains = (xs, x) => rawIndexOf(xs, x) > -1;\n    const map = (xs, f) => {\n      const len = xs.length;\n      const r = new Array(len);\n      for (let i = 0; i < len; i++) {\n        const x = xs[i];\n        r[i] = f(x, i);\n      }\n      return r;\n    };\n    const each$1 = (xs, f) => {\n      for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        f(x, i);\n      }\n    };\n    const filter = (xs, pred) => {\n      const r = [];\n      for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        if (pred(x, i)) {\n          r.push(x);\n        }\n      }\n      return r;\n    };\n    const foldl = (xs, f, acc) => {\n      each$1(xs, (x, i) => {\n        acc = f(acc, x, i);\n      });\n      return acc;\n    };\n\n    const keys = Object.keys;\n    const each = (obj, f) => {\n      const props = keys(obj);\n      for (let k = 0, len = props.length; k < len; k++) {\n        const i = props[k];\n        const x = obj[i];\n        f(x, i);\n      }\n    };\n\n    typeof window !== 'undefined' ? window : Function('return this;')();\n\n    const COMMENT = 8;\n    const DOCUMENT = 9;\n    const DOCUMENT_FRAGMENT = 11;\n    const ELEMENT = 1;\n    const TEXT = 3;\n\n    const name = element => {\n      const r = element.dom.nodeName;\n      return r.toLowerCase();\n    };\n    const type = element => element.dom.nodeType;\n    const isType = t => element => type(element) === t;\n    const isComment = element => type(element) === COMMENT || name(element) === '#comment';\n    const isElement = isType(ELEMENT);\n    const isText = isType(TEXT);\n    const isDocument = isType(DOCUMENT);\n    const isDocumentFragment = isType(DOCUMENT_FRAGMENT);\n\n    const rawSet = (dom, key, value) => {\n      if (isString(value) || isBoolean(value) || isNumber(value)) {\n        dom.setAttribute(key, value + '');\n      } else {\n        console.error('Invalid call to Attribute.set. Key ', key, ':: Value ', value, ':: Element ', dom);\n        throw new Error('Attribute value was not simple');\n      }\n    };\n    const set$2 = (element, key, value) => {\n      rawSet(element.dom, key, value);\n    };\n    const setAll = (element, attrs) => {\n      const dom = element.dom;\n      each(attrs, (v, k) => {\n        rawSet(dom, k, v);\n      });\n    };\n    const get$2 = (element, key) => {\n      const v = element.dom.getAttribute(key);\n      return v === null ? undefined : v;\n    };\n    const getOpt = (element, key) => Optional.from(get$2(element, key));\n    const remove$2 = (element, key) => {\n      element.dom.removeAttribute(key);\n    };\n    const clone = element => foldl(element.dom.attributes, (acc, attr) => {\n      acc[attr.name] = attr.value;\n      return acc;\n    }, {});\n\n    const fromHtml = (html, scope) => {\n      const doc = scope || document;\n      const div = doc.createElement('div');\n      div.innerHTML = html;\n      if (!div.hasChildNodes() || div.childNodes.length > 1) {\n        const message = 'HTML does not have a single root node';\n        console.error(message, html);\n        throw new Error(message);\n      }\n      return fromDom(div.childNodes[0]);\n    };\n    const fromTag = (tag, scope) => {\n      const doc = scope || document;\n      const node = doc.createElement(tag);\n      return fromDom(node);\n    };\n    const fromText = (text, scope) => {\n      const doc = scope || document;\n      const node = doc.createTextNode(text);\n      return fromDom(node);\n    };\n    const fromDom = node => {\n      if (node === null || node === undefined) {\n        throw new Error('Node cannot be null or undefined');\n      }\n      return { dom: node };\n    };\n    const fromPoint = (docElm, x, y) => Optional.from(docElm.dom.elementFromPoint(x, y)).map(fromDom);\n    const SugarElement = {\n      fromHtml,\n      fromTag,\n      fromText,\n      fromDom,\n      fromPoint\n    };\n\n    const is$2 = (element, selector) => {\n      const dom = element.dom;\n      if (dom.nodeType !== ELEMENT) {\n        return false;\n      } else {\n        const elem = dom;\n        if (elem.matches !== undefined) {\n          return elem.matches(selector);\n        } else if (elem.msMatchesSelector !== undefined) {\n          return elem.msMatchesSelector(selector);\n        } else if (elem.webkitMatchesSelector !== undefined) {\n          return elem.webkitMatchesSelector(selector);\n        } else if (elem.mozMatchesSelector !== undefined) {\n          return elem.mozMatchesSelector(selector);\n        } else {\n          throw new Error('Browser lacks native selectors');\n        }\n      }\n    };\n    const bypassSelector = dom => dom.nodeType !== ELEMENT && dom.nodeType !== DOCUMENT && dom.nodeType !== DOCUMENT_FRAGMENT || dom.childElementCount === 0;\n    const all = (selector, scope) => {\n      const base = scope === undefined ? document : scope.dom;\n      return bypassSelector(base) ? [] : map(base.querySelectorAll(selector), SugarElement.fromDom);\n    };\n    const one = (selector, scope) => {\n      const base = scope === undefined ? document : scope.dom;\n      return bypassSelector(base) ? Optional.none() : Optional.from(base.querySelector(selector)).map(SugarElement.fromDom);\n    };\n\n    const eq = (e1, e2) => e1.dom === e2.dom;\n    const is$1 = is$2;\n\n    const is = (lhs, rhs, comparator = tripleEquals) => lhs.exists(left => comparator(left, rhs));\n\n    const blank = r => s => s.replace(r, '');\n    const trim = blank(/^\\s+|\\s+$/g);\n\n    const isSupported = dom => dom.style !== undefined && isFunction(dom.style.getPropertyValue);\n\n    const owner = element => SugarElement.fromDom(element.dom.ownerDocument);\n    const documentOrOwner = dos => isDocument(dos) ? dos : owner(dos);\n    const parent = element => Optional.from(element.dom.parentNode).map(SugarElement.fromDom);\n    const parents = (element, isRoot) => {\n      const stop = isFunction(isRoot) ? isRoot : never;\n      let dom = element.dom;\n      const ret = [];\n      while (dom.parentNode !== null && dom.parentNode !== undefined) {\n        const rawParent = dom.parentNode;\n        const p = SugarElement.fromDom(rawParent);\n        ret.push(p);\n        if (stop(p) === true) {\n          break;\n        } else {\n          dom = rawParent;\n        }\n      }\n      return ret;\n    };\n    const prevSibling = element => Optional.from(element.dom.previousSibling).map(SugarElement.fromDom);\n    const nextSibling = element => Optional.from(element.dom.nextSibling).map(SugarElement.fromDom);\n    const children = element => map(element.dom.childNodes, SugarElement.fromDom);\n    const child = (element, index) => {\n      const cs = element.dom.childNodes;\n      return Optional.from(cs[index]).map(SugarElement.fromDom);\n    };\n    const firstChild = element => child(element, 0);\n\n    const isShadowRoot = dos => isDocumentFragment(dos) && isNonNullable(dos.dom.host);\n    const supported = isFunction(Element.prototype.attachShadow) && isFunction(Node.prototype.getRootNode);\n    const getRootNode = supported ? e => SugarElement.fromDom(e.dom.getRootNode()) : documentOrOwner;\n    const getShadowRoot = e => {\n      const r = getRootNode(e);\n      return isShadowRoot(r) ? Optional.some(r) : Optional.none();\n    };\n    const getShadowHost = e => SugarElement.fromDom(e.dom.host);\n\n    const inBody = element => {\n      const dom = isText(element) ? element.dom.parentNode : element.dom;\n      if (dom === undefined || dom === null || dom.ownerDocument === null) {\n        return false;\n      }\n      const doc = dom.ownerDocument;\n      return getShadowRoot(SugarElement.fromDom(dom)).fold(() => doc.body.contains(dom), compose1(inBody, getShadowHost));\n    };\n\n    const internalSet = (dom, property, value) => {\n      if (!isString(value)) {\n        console.error('Invalid call to CSS.set. Property ', property, ':: Value ', value, ':: Element ', dom);\n        throw new Error('CSS value must be a string: ' + value);\n      }\n      if (isSupported(dom)) {\n        dom.style.setProperty(property, value);\n      }\n    };\n    const internalRemove = (dom, property) => {\n      if (isSupported(dom)) {\n        dom.style.removeProperty(property);\n      }\n    };\n    const set$1 = (element, property, value) => {\n      const dom = element.dom;\n      internalSet(dom, property, value);\n    };\n    const get$1 = (element, property) => {\n      const dom = element.dom;\n      const styles = window.getComputedStyle(dom);\n      const r = styles.getPropertyValue(property);\n      return r === '' && !inBody(element) ? getUnsafeProperty(dom, property) : r;\n    };\n    const getUnsafeProperty = (dom, property) => isSupported(dom) ? dom.style.getPropertyValue(property) : '';\n    const getRaw = (element, property) => {\n      const dom = element.dom;\n      const raw = getUnsafeProperty(dom, property);\n      return Optional.from(raw).filter(r => r.length > 0);\n    };\n    const remove$1 = (element, property) => {\n      const dom = element.dom;\n      internalRemove(dom, property);\n      if (is(getOpt(element, 'style').map(trim), '')) {\n        remove$2(element, 'style');\n      }\n    };\n\n    const before = (marker, element) => {\n      const parent$1 = parent(marker);\n      parent$1.each(v => {\n        v.dom.insertBefore(element.dom, marker.dom);\n      });\n    };\n    const after$1 = (marker, element) => {\n      const sibling = nextSibling(marker);\n      sibling.fold(() => {\n        const parent$1 = parent(marker);\n        parent$1.each(v => {\n          append$1(v, element);\n        });\n      }, v => {\n        before(v, element);\n      });\n    };\n    const prepend = (parent, element) => {\n      const firstChild$1 = firstChild(parent);\n      firstChild$1.fold(() => {\n        append$1(parent, element);\n      }, v => {\n        parent.dom.insertBefore(element.dom, v.dom);\n      });\n    };\n    const append$1 = (parent, element) => {\n      parent.dom.appendChild(element.dom);\n    };\n    const wrap = (element, wrapper) => {\n      before(element, wrapper);\n      append$1(wrapper, element);\n    };\n\n    const after = (marker, elements) => {\n      each$1(elements, (x, i) => {\n        const e = i === 0 ? marker : elements[i - 1];\n        after$1(e, x);\n      });\n    };\n    const append = (parent, elements) => {\n      each$1(elements, x => {\n        append$1(parent, x);\n      });\n    };\n\n    const descendants$1 = (scope, predicate) => {\n      let result = [];\n      each$1(children(scope), x => {\n        if (predicate(x)) {\n          result = result.concat([x]);\n        }\n        result = result.concat(descendants$1(x, predicate));\n      });\n      return result;\n    };\n\n    var ClosestOrAncestor = (is, ancestor, scope, a, isRoot) => {\n      if (is(scope, a)) {\n        return Optional.some(scope);\n      } else if (isFunction(isRoot) && isRoot(scope)) {\n        return Optional.none();\n      } else {\n        return ancestor(scope, a, isRoot);\n      }\n    };\n\n    const ancestor$1 = (scope, predicate, isRoot) => {\n      let element = scope.dom;\n      const stop = isFunction(isRoot) ? isRoot : never;\n      while (element.parentNode) {\n        element = element.parentNode;\n        const el = SugarElement.fromDom(element);\n        if (predicate(el)) {\n          return Optional.some(el);\n        } else if (stop(el)) {\n          break;\n        }\n      }\n      return Optional.none();\n    };\n\n    const remove = element => {\n      const dom = element.dom;\n      if (dom.parentNode !== null) {\n        dom.parentNode.removeChild(dom);\n      }\n    };\n    const unwrap = wrapper => {\n      const children$1 = children(wrapper);\n      if (children$1.length > 0) {\n        after(wrapper, children$1);\n      }\n      remove(wrapper);\n    };\n\n    const descendants = (scope, selector) => all(selector, scope);\n\n    const ancestor = (scope, selector, isRoot) => ancestor$1(scope, e => is$2(e, selector), isRoot);\n    const descendant = (scope, selector) => one(selector, scope);\n    const closest = (scope, selector, isRoot) => {\n      const is = (element, selector) => is$2(element, selector);\n      return ClosestOrAncestor(is, ancestor, scope, selector, isRoot);\n    };\n\n    const NodeValue = (is, name) => {\n      const get = element => {\n        if (!is(element)) {\n          throw new Error('Can only get ' + name + ' value of a ' + name + ' node');\n        }\n        return getOption(element).getOr('');\n      };\n      const getOption = element => is(element) ? Optional.from(element.dom.nodeValue) : Optional.none();\n      const set = (element, value) => {\n        if (!is(element)) {\n          throw new Error('Can only set raw ' + name + ' value of a ' + name + ' node');\n        }\n        element.dom.nodeValue = value;\n      };\n      return {\n        get,\n        getOption,\n        set\n      };\n    };\n\n    const api = NodeValue(isText, 'text');\n    const get = element => api.get(element);\n    const set = (element, value) => api.set(element, value);\n\n    var TagBoundaries = [\n      'body',\n      'p',\n      'div',\n      'article',\n      'aside',\n      'figcaption',\n      'figure',\n      'footer',\n      'header',\n      'nav',\n      'section',\n      'ol',\n      'ul',\n      'li',\n      'table',\n      'thead',\n      'tbody',\n      'tfoot',\n      'caption',\n      'tr',\n      'td',\n      'th',\n      'h1',\n      'h2',\n      'h3',\n      'h4',\n      'h5',\n      'h6',\n      'blockquote',\n      'pre',\n      'address'\n    ];\n\n    var DomUniverse = () => {\n      const clone$1 = element => {\n        return SugarElement.fromDom(element.dom.cloneNode(false));\n      };\n      const document = element => documentOrOwner(element).dom;\n      const isBoundary = element => {\n        if (!isElement(element)) {\n          return false;\n        }\n        if (name(element) === 'body') {\n          return true;\n        }\n        return contains(TagBoundaries, name(element));\n      };\n      const isEmptyTag = element => {\n        if (!isElement(element)) {\n          return false;\n        }\n        return contains([\n          'br',\n          'img',\n          'hr',\n          'input'\n        ], name(element));\n      };\n      const isNonEditable = element => isElement(element) && get$2(element, 'contenteditable') === 'false';\n      const comparePosition = (element, other) => {\n        return element.dom.compareDocumentPosition(other.dom);\n      };\n      const copyAttributesTo = (source, destination) => {\n        const as = clone(source);\n        setAll(destination, as);\n      };\n      const isSpecial = element => {\n        const tag = name(element);\n        return contains([\n          'script',\n          'noscript',\n          'iframe',\n          'noframes',\n          'noembed',\n          'title',\n          'style',\n          'textarea',\n          'xmp'\n        ], tag);\n      };\n      const getLanguage = element => isElement(element) ? getOpt(element, 'lang') : Optional.none();\n      return {\n        up: constant({\n          selector: ancestor,\n          closest: closest,\n          predicate: ancestor$1,\n          all: parents\n        }),\n        down: constant({\n          selector: descendants,\n          predicate: descendants$1\n        }),\n        styles: constant({\n          get: get$1,\n          getRaw: getRaw,\n          set: set$1,\n          remove: remove$1\n        }),\n        attrs: constant({\n          get: get$2,\n          set: set$2,\n          remove: remove$2,\n          copyTo: copyAttributesTo\n        }),\n        insert: constant({\n          before: before,\n          after: after$1,\n          afterAll: after,\n          append: append$1,\n          appendAll: append,\n          prepend: prepend,\n          wrap: wrap\n        }),\n        remove: constant({\n          unwrap: unwrap,\n          remove: remove\n        }),\n        create: constant({\n          nu: SugarElement.fromTag,\n          clone: clone$1,\n          text: SugarElement.fromText\n        }),\n        query: constant({\n          comparePosition,\n          prevSibling: prevSibling,\n          nextSibling: nextSibling\n        }),\n        property: constant({\n          children: children,\n          name: name,\n          parent: parent,\n          document,\n          isText: isText,\n          isComment: isComment,\n          isElement: isElement,\n          isSpecial,\n          getLanguage,\n          getText: get,\n          setText: set,\n          isBoundary,\n          isEmptyTag,\n          isNonEditable\n        }),\n        eq: eq,\n        is: is$1\n      };\n    };\n\n    const point = (element, offset) => ({\n      element,\n      offset\n    });\n\n    const scan = (universe, element, direction) => {\n      if (universe.property().isText(element) && universe.property().getText(element).trim().length === 0 || universe.property().isComment(element)) {\n        return direction(element).bind(elem => {\n          return scan(universe, elem, direction).orThunk(() => {\n            return Optional.some(elem);\n          });\n        });\n      } else {\n        return Optional.none();\n      }\n    };\n    const toEnd = (universe, element) => {\n      if (universe.property().isText(element)) {\n        return universe.property().getText(element).length;\n      }\n      const children = universe.property().children(element);\n      return children.length;\n    };\n    const freefallRtl$2 = (universe, element) => {\n      const candidate = scan(universe, element, universe.query().prevSibling).getOr(element);\n      if (universe.property().isText(candidate)) {\n        return point(candidate, toEnd(universe, candidate));\n      }\n      const children = universe.property().children(candidate);\n      return children.length > 0 ? freefallRtl$2(universe, children[children.length - 1]) : point(candidate, toEnd(universe, candidate));\n    };\n\n    const freefallRtl$1 = freefallRtl$2;\n\n    const universe = DomUniverse();\n    const freefallRtl = element => {\n      return freefallRtl$1(universe, element);\n    };\n\n    const fireToggleAccordionEvent = (editor, element, state) => editor.dispatch('ToggledAccordion', {\n      element,\n      state\n    });\n    const fireToggleAllAccordionsEvent = (editor, elements, state) => editor.dispatch('ToggledAllAccordions', {\n      elements,\n      state\n    });\n\n    const accordionTag = 'details';\n    const accordionDetailsClass = 'mce-accordion';\n    const accordionSummaryClass = 'mce-accordion-summary';\n    const accordionBodyWrapperClass = 'mce-accordion-body';\n    const accordionBodyWrapperTag = 'div';\n\n    var global$3 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    const isSummary = node => (node === null || node === void 0 ? void 0 : node.nodeName) === 'SUMMARY';\n    const isDetails = node => (node === null || node === void 0 ? void 0 : node.nodeName) === 'DETAILS';\n    const isOpen = details => details.hasAttribute('open');\n    const isInSummary = editor => {\n      const node = editor.selection.getNode();\n      return isSummary(node) || Boolean(editor.dom.getParent(node, isSummary));\n    };\n    const isAtDetailsStart = editor => {\n      const rng = editor.selection.getRng();\n      return isDetails(rng.startContainer) && rng.collapsed && rng.startOffset === 0;\n    };\n    const isInsertAllowed = editor => !isInSummary(editor) && editor.dom.isEditable(editor.selection.getNode());\n    const getSelectedDetails = editor => Optional.from(editor.dom.getParent(editor.selection.getNode(), isDetails));\n    const isDetailsSelected = editor => getSelectedDetails(editor).isSome();\n    const insertBogus = element => {\n      element.innerHTML = '<br data-mce-bogus=\"1\" />';\n      return element;\n    };\n    const createParagraph = editor => insertBogus(editor.dom.create('p'));\n    const createSummary = editor => insertBogus(editor.dom.create('summary'));\n    const insertAndSelectParagraphAfter = (editor, target) => {\n      const paragraph = createParagraph(editor);\n      target.insertAdjacentElement('afterend', paragraph);\n      editor.selection.setCursorLocation(paragraph, 0);\n    };\n    const normalizeContent = (editor, accordion) => {\n      if (isSummary(accordion === null || accordion === void 0 ? void 0 : accordion.lastChild)) {\n        const paragraph = createParagraph(editor);\n        accordion.appendChild(paragraph);\n        editor.selection.setCursorLocation(paragraph, 0);\n      }\n    };\n    const normalizeSummary = (editor, accordion) => {\n      if (!isSummary(accordion === null || accordion === void 0 ? void 0 : accordion.firstChild)) {\n        const summary = createSummary(editor);\n        accordion.prepend(summary);\n        editor.selection.setCursorLocation(summary, 0);\n      }\n    };\n    const normalizeAccordion = editor => accordion => {\n      normalizeContent(editor, accordion);\n      normalizeSummary(editor, accordion);\n    };\n    const normalizeDetails = editor => {\n      global$3.each(global$3.grep(editor.dom.select('details', editor.getBody())), normalizeAccordion(editor));\n    };\n\n    const insertAccordion = editor => {\n      if (!isInsertAllowed(editor)) {\n        return;\n      }\n      const editorBody = SugarElement.fromDom(editor.getBody());\n      const uid = generate('acc');\n      const summaryText = editor.dom.encode(editor.selection.getRng().toString() || editor.translate('Accordion summary...'));\n      const bodyText = editor.dom.encode(editor.translate('Accordion body...'));\n      const accordionSummaryHtml = `<summary class=\"${ accordionSummaryClass }\">${ summaryText }</summary>`;\n      const accordionBodyHtml = `<${ accordionBodyWrapperTag } class=\"${ accordionBodyWrapperClass }\"><p>${ bodyText }</p></${ accordionBodyWrapperTag }>`;\n      editor.undoManager.transact(() => {\n        editor.insertContent([\n          `<details data-mce-id=\"${ uid }\" class=\"${ accordionDetailsClass }\" open=\"open\">`,\n          accordionSummaryHtml,\n          accordionBodyHtml,\n          `</details>`\n        ].join(''));\n        descendant(editorBody, `[data-mce-id=\"${ uid }\"]`).each(detailsElm => {\n          remove$2(detailsElm, 'data-mce-id');\n          descendant(detailsElm, `summary`).each(summaryElm => {\n            const rng = editor.dom.createRng();\n            const des = freefallRtl(summaryElm);\n            rng.setStart(des.element.dom, des.offset);\n            rng.setEnd(des.element.dom, des.offset);\n            editor.selection.setRng(rng);\n          });\n        });\n      });\n    };\n    const toggleDetailsElement = (details, state) => {\n      const shouldOpen = state !== null && state !== void 0 ? state : !isOpen(details);\n      if (shouldOpen) {\n        details.setAttribute('open', 'open');\n      } else {\n        details.removeAttribute('open');\n      }\n      return shouldOpen;\n    };\n    const toggleAccordion = (editor, state) => {\n      getSelectedDetails(editor).each(details => {\n        fireToggleAccordionEvent(editor, details, toggleDetailsElement(details, state));\n      });\n    };\n    const removeAccordion = editor => {\n      getSelectedDetails(editor).each(details => {\n        const {nextSibling} = details;\n        if (nextSibling) {\n          editor.selection.select(nextSibling, true);\n          editor.selection.collapse(true);\n        } else {\n          insertAndSelectParagraphAfter(editor, details);\n        }\n        details.remove();\n      });\n    };\n    const toggleAllAccordions = (editor, state) => {\n      const accordions = Array.from(editor.getBody().querySelectorAll('details'));\n      if (accordions.length === 0) {\n        return;\n      }\n      each$1(accordions, accordion => toggleDetailsElement(accordion, state !== null && state !== void 0 ? state : !isOpen(accordion)));\n      fireToggleAllAccordionsEvent(editor, accordions, state);\n    };\n\n    const register$1 = editor => {\n      editor.addCommand('InsertAccordion', () => insertAccordion(editor));\n      editor.addCommand('ToggleAccordion', (_ui, value) => toggleAccordion(editor, value));\n      editor.addCommand('ToggleAllAccordions', (_ui, value) => toggleAllAccordions(editor, value));\n      editor.addCommand('RemoveAccordion', () => removeAccordion(editor));\n    };\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.html.Node');\n\n    const getClassList = node => {\n      var _a, _b;\n      return (_b = (_a = node.attr('class')) === null || _a === void 0 ? void 0 : _a.split(' ')) !== null && _b !== void 0 ? _b : [];\n    };\n    const addClasses = (node, classes) => {\n      const classListSet = new Set([\n        ...getClassList(node),\n        ...classes\n      ]);\n      const newClassList = Array.from(classListSet);\n      if (newClassList.length > 0) {\n        node.attr('class', newClassList.join(' '));\n      }\n    };\n    const removeClasses = (node, classes) => {\n      const newClassList = filter(getClassList(node), clazz => !classes.has(clazz));\n      node.attr('class', newClassList.length > 0 ? newClassList.join(' ') : null);\n    };\n    const isAccordionDetailsNode = node => node.name === accordionTag && contains(getClassList(node), accordionDetailsClass);\n    const isAccordionBodyWrapperNode = node => node.name === accordionBodyWrapperTag && contains(getClassList(node), accordionBodyWrapperClass);\n    const getAccordionChildren = accordionNode => {\n      const children = accordionNode.children();\n      let summaryNode;\n      let wrapperNode;\n      const otherNodes = [];\n      for (let i = 0; i < children.length; i++) {\n        const child = children[i];\n        if (child.name === 'summary' && isNullable(summaryNode)) {\n          summaryNode = child;\n        } else if (isAccordionBodyWrapperNode(child) && isNullable(wrapperNode)) {\n          wrapperNode = child;\n        } else {\n          otherNodes.push(child);\n        }\n      }\n      return {\n        summaryNode,\n        wrapperNode,\n        otherNodes\n      };\n    };\n    const padInputNode = node => {\n      const br = new global$2('br', 1);\n      br.attr('data-mce-bogus', '1');\n      node.empty();\n      node.append(br);\n    };\n    const setup$2 = editor => {\n      editor.on('PreInit', () => {\n        const {serializer, parser} = editor;\n        parser.addNodeFilter(accordionTag, nodes => {\n          for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (isAccordionDetailsNode(node)) {\n              const accordionNode = node;\n              const {summaryNode, wrapperNode, otherNodes} = getAccordionChildren(accordionNode);\n              const hasSummaryNode = isNonNullable(summaryNode);\n              const newSummaryNode = hasSummaryNode ? summaryNode : new global$2('summary', 1);\n              if (isNullable(newSummaryNode.firstChild)) {\n                padInputNode(newSummaryNode);\n              }\n              addClasses(newSummaryNode, [accordionSummaryClass]);\n              if (!hasSummaryNode) {\n                if (isNonNullable(accordionNode.firstChild)) {\n                  accordionNode.insert(newSummaryNode, accordionNode.firstChild, true);\n                } else {\n                  accordionNode.append(newSummaryNode);\n                }\n              }\n              const hasWrapperNode = isNonNullable(wrapperNode);\n              const newWrapperNode = hasWrapperNode ? wrapperNode : new global$2(accordionBodyWrapperTag, 1);\n              newWrapperNode.attr('data-mce-bogus', '1');\n              addClasses(newWrapperNode, [accordionBodyWrapperClass]);\n              if (otherNodes.length > 0) {\n                for (let j = 0; j < otherNodes.length; j++) {\n                  const otherNode = otherNodes[j];\n                  newWrapperNode.append(otherNode);\n                }\n              }\n              if (isNullable(newWrapperNode.firstChild)) {\n                const pNode = new global$2('p', 1);\n                padInputNode(pNode);\n                newWrapperNode.append(pNode);\n              }\n              if (!hasWrapperNode) {\n                accordionNode.append(newWrapperNode);\n              }\n            }\n          }\n        });\n        serializer.addNodeFilter(accordionTag, nodes => {\n          const summaryClassRemoveSet = new Set([accordionSummaryClass]);\n          for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (isAccordionDetailsNode(node)) {\n              const accordionNode = node;\n              const {summaryNode, wrapperNode} = getAccordionChildren(accordionNode);\n              if (isNonNullable(summaryNode)) {\n                removeClasses(summaryNode, summaryClassRemoveSet);\n              }\n              if (isNonNullable(wrapperNode)) {\n                wrapperNode.unwrap();\n              }\n            }\n          }\n        });\n      });\n    };\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.VK');\n\n    const setupEnterKeyInSummary = editor => {\n      editor.on('keydown', event => {\n        if (!event.shiftKey && event.keyCode === global$1.ENTER && isInSummary(editor) || isAtDetailsStart(editor)) {\n          event.preventDefault();\n          editor.execCommand('ToggleAccordion');\n        }\n      });\n    };\n    const setup$1 = editor => {\n      setupEnterKeyInSummary(editor);\n      editor.on('ExecCommand', e => {\n        const cmd = e.command.toLowerCase();\n        if ((cmd === 'delete' || cmd === 'forwarddelete') && isDetailsSelected(editor)) {\n          normalizeDetails(editor);\n        }\n      });\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.Env');\n\n    const setup = editor => {\n      if (global.browser.isSafari()) {\n        editor.on('click', e => {\n          if (isSummary(e.target)) {\n            const summary = e.target;\n            const rng = editor.selection.getRng();\n            if (rng.collapsed && rng.startContainer === summary.parentNode && rng.startOffset === 0) {\n              editor.selection.setCursorLocation(summary, 0);\n            }\n          }\n        });\n      }\n    };\n\n    const onSetup = editor => buttonApi => {\n      const onNodeChange = () => buttonApi.setEnabled(isInsertAllowed(editor));\n      editor.on('NodeChange', onNodeChange);\n      return () => editor.off('NodeChange', onNodeChange);\n    };\n    const register = editor => {\n      const onAction = () => editor.execCommand('InsertAccordion');\n      editor.ui.registry.addButton('accordion', {\n        icon: 'accordion',\n        tooltip: 'Insert accordion',\n        onSetup: onSetup(editor),\n        onAction\n      });\n      editor.ui.registry.addMenuItem('accordion', {\n        icon: 'accordion',\n        text: 'Accordion',\n        onSetup: onSetup(editor),\n        onAction\n      });\n      editor.ui.registry.addToggleButton('accordiontoggle', {\n        icon: 'accordion-toggle',\n        tooltip: 'Toggle accordion',\n        onAction: () => editor.execCommand('ToggleAccordion')\n      });\n      editor.ui.registry.addToggleButton('accordionremove', {\n        icon: 'remove',\n        tooltip: 'Delete accordion',\n        onAction: () => editor.execCommand('RemoveAccordion')\n      });\n      editor.ui.registry.addContextToolbar('accordion', {\n        predicate: accordion => editor.dom.is(accordion, 'details') && editor.getBody().contains(accordion) && editor.dom.isEditable(accordion.parentNode),\n        items: 'accordiontoggle accordionremove',\n        scope: 'node',\n        position: 'node'\n      });\n    };\n\n    var Plugin = () => {\n      global$4.add('accordion', editor => {\n        register(editor);\n        register$1(editor);\n        setup$1(editor);\n        setup$2(editor);\n        setup(editor);\n      });\n    };\n\n    Plugin();\n\n})();\n"],"names":["global$4","tinymce","util","Tools","resolve","unique","isSimpleType","type","value","isString","x","t","Array","isArray","o","v","proto","constructor","String","prototype","isPrototypeOf","_a","name","typeOf","isType$1","isBoolean","isNullable","a","isNonNullable","isFunction","isNumber","constant","tripleEquals","b","never","Optional","tag","this","some","none","singletonNone","fold","onNone","onSome","isSome","isNone","map","mapper","bind","binder","exists","predicate","forall","filter","getOr","replacement","or","getOrThunk","thunk","orThunk","getOrDie","message","Error","from","getOrNull","getOrUndefined","each","worker","toArray","toString","nativeIndexOf","indexOf","contains","xs","rawIndexOf","ts","call","f","len","length","r","i","each$1","keys","Object","window","Function","element","dom","nodeName","toLowerCase","nodeType","isType","isComment","isElement","isText","isDocument","isDocumentFragment","rawSet","key","console","error","setAttribute","set$2","setAll","attrs","obj","props","k","get$2","getAttribute","undefined","getOpt","remove$2","removeAttribute","clone","foldl","attributes","acc","attr","fromDom","node","SugarElement","fromHtml","html","scope","div","document","createElement","innerHTML","hasChildNodes","childNodes","fromTag","fromText","text","createTextNode","fromPoint","docElm","y","elementFromPoint","is$2","selector","elem","matches","msMatchesSelector","webkitMatchesSelector","mozMatchesSelector","bypassSelector","childElementCount","eq","e1","e2","is$1","trim","s","replace","isSupported","style","getPropertyValue","documentOrOwner","dos","ownerDocument","parent","parentNode","parents","isRoot","stop","ret","rawParent","p","push","prevSibling","previousSibling","nextSibling","children","firstChild","index","cs","child","getRootNode","Element","attachShadow","Node","e","getShadowRoot","host","getShadowHost","inBody","doc","body","fbc","fab","set$1","property","setProperty","internalSet","get$1","getComputedStyle","getUnsafeProperty","getRaw","raw","remove$1","removeProperty","internalRemove","lhs","rhs","comparator","left","is","before","marker","insertBefore","after$1","append$1","prepend","appendChild","wrap","wrapper","after","elements","append","descendants$1","result","concat","ancestor$1","el","remove","removeChild","unwrap","children$1","descendants","base","querySelectorAll","all","ancestor","descendant","querySelector","one","closest","ClosestOrAncestor","api","getOption","nodeValue","get","set","NodeValue","TagBoundaries","point","offset","scan","universe","direction","getText","toEnd","freefallRtl$2","candidate","query","freefallRtl$1","up","down","styles","copyTo","source","destination","as","insert","afterAll","appendAll","create","nu","cloneNode","comparePosition","other","compareDocumentPosition","isSpecial","getLanguage","setText","isBoundary","isEmptyTag","isNonEditable","accordionTag","accordionDetailsClass","accordionSummaryClass","accordionBodyWrapperClass","accordionBodyWrapperTag","global$3","isSummary","isDetails","isOpen","details","hasAttribute","isInSummary","editor","selection","getNode","Boolean","getParent","isInsertAllowed","isEditable","getSelectedDetails","insertBogus","createParagraph","normalizeSummary","accordion","summary","createSummary","setCursorLocation","normalizeAccordion","lastChild","paragraph","normalizeContent","insertAccordion","editorBody","getBody","uid","prefix","time","Date","getTime","random","Math","floor","generate","summaryText","encode","getRng","translate","bodyText","accordionSummaryHtml","accordionBodyHtml","undoManager","transact","insertContent","join","detailsElm","summaryElm","rng","createRng","des","setStart","setEnd","setRng","toggleDetailsElement","state","shouldOpen","removeAccordion","select","collapse","target","insertAdjacentElement","insertAndSelectParagraphAfter","register$1","addCommand","_ui","dispatch","fireToggleAccordionEvent","toggleAccordion","accordions","fireToggleAllAccordionsEvent","toggleAllAccordions","global$2","getClassList","_b","split","addClasses","classes","classListSet","Set","newClassList","removeClasses","pred","clazz","has","isAccordionDetailsNode","getAccordionChildren","accordionNode","summaryNode","wrapperNode","otherNodes","padInputNode","br","empty","global$1","setupEnterKeyInSummary","on","event","shiftKey","keyCode","ENTER","startContainer","collapsed","startOffset","isAtDetailsStart","preventDefault","execCommand","setup$1","cmd","command","isDetailsSelected","grep","normalizeDetails","global","onSetup","buttonApi","onNodeChange","setEnabled","off","add","onAction","ui","registry","addButton","icon","tooltip","addMenuItem","addToggleButton","addContextToolbar","items","position","register","serializer","parser","addNodeFilter","nodes","hasSummaryNode","newSummaryNode","hasWrapperNode","newWrapperNode","j","otherNode","pNode","summaryClassRemoveSet","setup$2","browser","isSafari","setup"],"sourceRoot":""}