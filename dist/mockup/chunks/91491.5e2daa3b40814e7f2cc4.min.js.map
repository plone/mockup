{"version":3,"file":"chunks/91491.5e2daa3b40814e7f2cc4.min.js","mappings":"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","sources":["webpack://@plone/mockup/./src/pat/tinymce/js/links.js"],"sourcesContent":["import Base from \"@patternslib/patternslib/src/core/base\";\nimport events from \"@patternslib/patternslib/src/core/events\";\nimport registry from \"@patternslib/patternslib/src/core/registry\";\nimport $ from \"jquery\";\nimport _ from \"underscore\";\n\nimport tinymce from \"tinymce/tinymce\";\nimport \"../../autotoc/autotoc\";\nimport \"../../modal/modal\";\nimport ImageTemplate from \"../templates/image.xml\";\nimport LinkTemplate from \"../templates/link.xml\";\n\nvar LinkType = Base.extend({\n    name: \"linktype\",\n    trigger: \".pat-linktype-dummy\",\n    defaults: {\n        linkModal: null, // required\n    },\n\n    init: function () {\n        this.linkModal = this.options.linkModal;\n        this.tinypattern = this.options.tinypattern;\n        this.tiny = this.tinypattern.tiny;\n        this.dom = this.tiny.dom;\n    },\n\n    getEl: function () {\n        return this.el.querySelector(\"input\");\n    },\n\n    value: function () {\n        return this.getEl().value.trim();\n    },\n\n    toUrl: function () {\n        return this.value();\n    },\n\n    load: function (element) {\n        let val = this.tiny.dom.getAttrib(element, \"data-val\");\n        this.set(val);\n    },\n\n    set: function (val) {\n        this.getEl().setAttribute(\"value\", val);\n    },\n\n    attributes: function () {\n        return {\n            \"data-val\": this.value(),\n        };\n    },\n    updateRelatedItems: function () { },\n});\n\nvar ExternalLink = LinkType.extend({\n    name: \"externallinktype\",\n    trigger: \".pat-externallinktype-dummy\",\n    init: function () {\n        LinkType.prototype.init.call(this);\n        // selectedItemsNode.addEventListener(\"change\", readSelectedItemsFromInput);\n        this.getEl().addEventListener(\"change\", function () {\n            // check here if we should automatically add in http:// to url\n            var val = $(this).val();\n            if (new RegExp(\"https?://\").test(val)) {\n                // already valid url\n                return;\n            }\n            var domain = $(this).val().split(\"/\")[0];\n            if (domain.indexOf(\".\") !== -1) {\n                $(this).val(\"http://\" + val);\n            }\n        });\n    },\n    load: function (element) {\n        let val = this.tiny.dom.getAttrib(element, \"data-val\");\n        this.set(val);\n    },\n});\n\nvar InternalLink = LinkType.extend({\n    name: \"internallinktype\",\n    trigger: \".pat-internallinktype-dummy\",\n    init: async function () {\n        const linkEl = this.getEl();\n        if (!linkEl) {\n            return;\n        }\n        LinkType.prototype.init.call(this);\n        await this.createContentBrowser();\n    },\n\n    getEl: function () {\n        return this.el.querySelector(\"input\");\n    },\n\n    createContentBrowser: async function () {\n        var options = {\n            \"selection\": [],\n            ...this.linkModal.options?.relatedItems,\n        };\n        options[\"maximum-selection-size\"] = 1;\n        // enable upload in ContentBrowser instead of separate tab\n        options[\"upload\"] = 1;\n        const inputEl = this.getEl();\n        const element = this.tiny.selection.getNode();\n        const linkType = this.tiny.dom.getAttrib(element, \"data-linktype\");\n        if (linkType === \"internal\" || linkType === \"image\") {\n            options.selection.push(this.tiny.dom.getAttrib(element, \"data-val\"));\n        }\n        const ContentBrowser = (await import(\"../../contentbrowser/contentbrowser\"))\n            .default;\n        this.contentBrowserPattern = new ContentBrowser(inputEl, options);\n    },\n\n    toUrl: function () {\n        var value = this.value();\n        if (value) {\n            return this.tinypattern.generateUrl(value);\n        }\n        return null;\n    },\n\n});\n\nvar UploadLink = LinkType.extend({\n    name: \"uploadlinktype\",\n    trigger: \".pat-uploadlinktype-dummy\",\n    /* need to do it a bit differently here.\n       when a user uploads and tries to upload from\n       it, you need to delegate to the real insert\n       linke types */\n    getDelegatedLinkType: function () {\n        if (this.linkModal.linkType === \"uploadImage\") {\n            return this.linkModal.linkTypes.image;\n        } else {\n            return this.linkModal.linkTypes.internal;\n        }\n    },\n    toUrl: function () {\n        return this.getDelegatedLinkType().toUrl();\n    },\n    attributes: function () {\n        return this.getDelegatedLinkType().attributes();\n    },\n    set: function (val) {\n        return this.getDelegatedLinkType().set(val);\n    },\n    load: function (element) {\n        return this.getDelegatedLinkType().load(element);\n    },\n    value: function () {\n        return this.getDelegatedLinkType().value();\n    },\n});\n\nvar ImageLink = InternalLink.extend({\n    name: \"imagelinktype\",\n    trigger: \".pat-imagelinktype-dummy\",\n    toUrl: function () {\n        var value = this.value();\n        return this.tinypattern.generateImageUrl(\n            value,\n            this.linkModal.getScaleFromSrcset(this.linkModal.$scale.val())\n        );\n    },\n});\n\nvar EmailLink = LinkType.extend({\n    name: \"emaillinktype\",\n    trigger: \".pat-emaillinktype-dummy\",\n    toUrl: function () {\n        var self = this;\n        var val = self.value();\n        if (val) {\n            var subject = self.getSubject();\n            var href = \"mailto:\" + val;\n            if (subject) {\n                href += \"?subject=\" + subject;\n            }\n            return href;\n        }\n        return null;\n    },\n\n    load: function (element) {\n        LinkType.prototype.load.apply(this, [element]);\n        this.linkModal.$subject.val(this.tiny.dom.getAttrib(element, \"data-subject\"));\n    },\n\n    getSubject: function () {\n        return this.linkModal.$subject.val();\n    },\n\n    attributes: function () {\n        var attribs = LinkType.prototype.attributes.call(this);\n        attribs[\"data-subject\"] = this.getSubject();\n        return attribs;\n    },\n});\n\nvar AnchorLink = LinkType.extend({\n    name: \"anchorlinktype\",\n    trigger: \".pat-anchorlinktype-dummy\",\n    init: function () {\n        LinkType.prototype.init.call(this);\n        this.$select = this.$el.find(\"select\");\n        this.anchorNodes = [];\n        this.anchorData = [];\n        this.populate();\n    },\n\n    value: function () {\n        var val = this.$select.select2(\"data\");\n        if (val && typeof val === \"object\") {\n            val = val.id;\n        }\n        return val;\n    },\n\n    populate: function () {\n        var self = this;\n        self.$select.find(\"option\").remove();\n        self.anchorNodes = [];\n        self.anchorData = [];\n        var node, i, j, name, title;\n\n        var nodes = self.tiny.dom.select(\".mceItemAnchor,.mce-item-anchor\");\n        for (i = 0; i < nodes.length; i = i + 1) {\n            node = nodes[i];\n            name = self.tiny.dom.getAttrib(node, \"name\");\n            if (!name) {\n                name = self.tiny.dom.getAttrib(node, \"id\");\n            }\n            if (name !== \"\") {\n                self.anchorNodes.push(node);\n                self.anchorData.push({ name: name, title: name });\n            }\n        }\n\n        nodes = self.tiny.dom.select(self.linkModal.options.anchorSelector);\n        if (nodes.length > 0) {\n            for (i = 0; i < nodes.length; i = i + 1) {\n                node = nodes[i];\n                title = $(node)\n                    .text()\n                    .replace(/^\\s+|\\s+$/g, \"\");\n                if (title === \"\") {\n                    continue;\n                }\n                name = title.toLowerCase().substring(0, 1024);\n                name = name.replace(/[^a-z0-9]/g, \"-\");\n                /* okay, ugly, but we need to first check that this anchor isn't already available */\n                var found = false;\n                for (j = 0; j < self.anchorNodes.length; j = j + 1) {\n                    var anode = self.anchorData[j];\n                    if (anode.name === name) {\n                        found = true;\n                        // so it's also found, let's update the title to be more presentable\n                        anode.title = title;\n                        break;\n                    }\n                }\n                if (!found) {\n                    self.anchorData.push({\n                        name: name,\n                        title: title,\n                        newAnchor: true,\n                    });\n                    self.anchorNodes.push(node);\n                }\n            }\n        }\n        if (self.anchorNodes.length > 0) {\n            for (i = 0; i < self.anchorData.length; i = i + 1) {\n                var data = self.anchorData[i];\n                self.$select.append(\n                    '<option value=\"' + i + '\">' + data.title + \"</option>\"\n                );\n            }\n        } else {\n            self.$select.append(\"<option>No anchors found..</option>\");\n        }\n    },\n\n    getIndex: function (name) {\n        for (var i = 0; i < this.anchorData.length; i = i + 1) {\n            var data = this.anchorData[i];\n            if (data.name === name) {\n                return i;\n            }\n        }\n        return 0;\n    },\n\n    toUrl: function () {\n        var val = this.value();\n        if (val) {\n            var index = parseInt(val, 10);\n            var node = this.anchorNodes[index];\n            var data = this.anchorData[index];\n            if (data.newAnchor) {\n                node.innerHTML =\n                    '<a name=\"' +\n                    data.name +\n                    '\" class=\"mce-item-anchor\"></a>' +\n                    node.innerHTML;\n            }\n            return \"#\" + data.name;\n        }\n        return null;\n    },\n\n    set: function (val) {\n        var anchor = this.getIndex(val);\n        this.$select.select2(\"data\", \"\" + anchor);\n    },\n});\n\nconst add_image = (editor) => {\n    // in case of inline mode we need the node where the pattern is instantinated\n    // not the tinymce editable div (\"-editable\")\n    var pattern_inst = document.getElementById(editor.id.replace(\"-editable\", \"\"))[\"pattern-tinymce\"].instance;\n    pattern_inst.addImageClicked();\n}\n\nconst add_link = (editor) => {\n    var pattern_inst = document.getElementById(editor.id.replace(\"-editable\", \"\"))[\"pattern-tinymce\"].instance;\n    pattern_inst.addLinkClicked();\n}\n\n// image plugin\n// eslint-disable-next-line no-unused-vars\ntinymce.PluginManager.add(\"ploneimage\", (editor, url) => {\n    editor.ui.registry.addButton(\"ploneimage\", {\n        icon: \"image\",\n        text: \"Insert image\",\n        tooltip: \"Insert/edit image\",\n        onAction: () => {\n            add_image(editor);\n        },\n        // stateSelector: \"img:not([data-mce-object])\",\n    });\n    editor.ui.registry.addMenuItem(\"ploneimage\", {\n        icon: \"image\",\n        text: \"Insert image\",\n        onAction: () => {\n            add_image(editor);\n        },\n        // stateSelector: \"img:not([data-mce-object])\",\n    });\n});\n\n// link plugin\n// eslint-disable-next-line no-unused-vars\ntinymce.PluginManager.add(\"plonelink\", function (editor, url) {\n    editor.ui.registry.addButton(\"plonelink\", {\n        icon: \"link\",\n        tooltip: \"Insert/edit link\",\n        shortcut: \"Ctrl+K\",\n        onAction: () => {\n            add_link(editor);\n        },\n        stateSelector: \"a[href]\",\n    });\n    editor.ui.registry.addMenuItem(\"plonelink\", {\n        icon: \"link\",\n        text: \"Insert link\",\n        shortcut: \"Ctrl+K\",\n        onAction: () => {\n            add_link(editor);\n        },\n        stateSelector: \"a[href]\",\n    });\n\n    editor.ui.registry.addButton(\"unlink\", {\n        icon: \"unlink\",\n        tooltip: \"Remove link\",\n        // eslint-disable-next-line no-unused-vars\n        onAction: (api) => {\n            editor.execCommand(\"unlink\");\n        },\n        stateSelector: \"a[href]\",\n    });\n});\n\nexport default Base.extend({\n    name: \"linkmodal\",\n    trigger: \".pat-linkmodal\",\n    defaults: {\n        anchorSelector: \"h1,h2,h3\",\n        linkTypes: [\n            /* available, none activate by default because these options\n         * only get merged, not set.\n        'internal',\n        'upload',\n        'external',\n        'email',\n        'anchor',\n        'image'\n        'externalImage'*/\n        ],\n        initialLinkType: \"internal\",\n        text: {\n            insertHeading: \"Insert Link\",\n        },\n        linkTypeClassMapping: {\n            internal: InternalLink,\n            upload: UploadLink,\n            external: ExternalLink,\n            email: EmailLink,\n            anchor: AnchorLink,\n            image: ImageLink,\n            uploadImage: UploadLink,\n            externalImage: LinkType,\n        },\n    },\n    // XXX: this is a temporary work around for having separated templates.\n    // Image modal is going to have its own modal class, funcs and template.\n    linkTypeTemplateMapping: {\n        internal: LinkTemplate,\n        upload: LinkTemplate,\n        external: LinkTemplate,\n        email: LinkTemplate,\n        anchor: LinkTemplate,\n        image: ImageTemplate,\n        uploadImage: ImageTemplate,\n        externalImage: ImageTemplate,\n    },\n\n    template: function (data) {\n        return _.template(this.linkTypeTemplateMapping[this.linkType])(data);\n    },\n\n    init: function () {\n        var self = this;\n        self.tinypattern = self.options.tinypattern;\n        if (self.tinypattern.options.anchorSelector) {\n            self.options.anchorSelector = self.tinypattern.options.anchorSelector;\n        }\n        self.tiny = self.tinypattern.tiny;\n        self.dom = self.tiny.dom;\n        self.linkType = self.options.initialLinkType;\n        self.linkTypes = {};\n        self.modal = registry.patterns[\"plone-modal\"].init(self.$el, {\n            html: self.generateModalHtml(),\n            content: null,\n            buttons: \".plone-btn\",\n            reloadWindowOnClose: false,\n            templateOptions: {\n                classDialog: \"modal-dialog modal-lg\",\n                reloadWindowOnClose: false,\n            },\n            actionOptions: { reloadWindowOnClose: false },\n            backdropOptions: {\n                zIndex: \"1340\",\n                closeOnClick: false,\n            },\n        });\n        self.modal.on(\"shown\", (e) => {\n            self.modalShown.apply(self, [e]);\n        });\n    },\n\n    isOnlyTextSelected: function () {\n        /* pulled from TinyMCE link plugin */\n        var html = this.tiny.selection.getContent();\n\n        // Partial html and not a fully selected anchor element\n        if (\n            /</.test(html) &&\n            (!/^<a [^>]+>[^<]+<\\/a>$/.test(html) || html.indexOf(\"href=\") === -1)\n        ) {\n            return false;\n        }\n\n        if (this.anchorElm) {\n            var nodes = this.anchorElm.childNodes;\n\n            if (nodes.length === 0) {\n                return false;\n            }\n\n            for (var ii = nodes.length - 1; ii >= 0; ii--) {\n                if (nodes[ii].nodeType !== 3) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    },\n\n    generateModalHtml: function () {\n        return this.template({\n            options: this.options,\n            upload: this.options.upload,\n            text: this.options.text,\n            insertHeading: this.options.text.insertHeading,\n            insertImageHelp: this.options.text.insertImageHelp,\n            uploadText: this.options.text.upload,\n            insertLinkHelp: this.options.text.insertLinkHelp,\n            internal: this.options.text.internal,\n            external: this.options.text.external,\n            anchor: this.options.text.anchor,\n            anchorLabel: this.options.text.anchorLabel,\n            target: this.options.text.target,\n            linkTypes: this.options.linkTypes,\n            externalText: this.options.text.externalText,\n            emailText: this.options.text.email,\n            subjectText: this.options.text.subject,\n            targetList: this.options.targetList,\n            titleText: this.options.text.title,\n            internalImageText: this.options.text.internalImage,\n            externalImage: this.options.text.externalImage,\n            externalImageText: this.options.text.externalImageText,\n            altText: this.options.text.alt,\n            imageAlignText: this.options.text.imageAlign,\n            captionFromDescriptionText: this.options.text.captionFromDescription,\n            enableImageZoom: this.options.text.enableImageZoom,\n            captionText: this.options.text.caption,\n            scaleText: this.options.text.scale,\n            pictureVariants: this.options.pictureVariants,\n            imageCaptioningEnabled: this.options.imageCaptioningEnabled,\n            cancelBtn: this.options.text.cancelBtn,\n            insertBtn: this.options.text.insertBtn,\n        });\n    },\n\n    isImageMode: function () {\n        return [\"image\", \"uploadImage\", \"externalImage\"].indexOf(this.linkType) !== -1;\n    },\n\n    initElements: async function () {\n        var self = this;\n        self.$target = $('select[name=\"target\"]', self.modal.$modal);\n        self.$button = $('.modal-footer input[name=\"insert\"]', self.modal.$modal);\n        self.$title = $('input[name=\"title\"]', self.modal.$modal);\n        self.$subject = $('input[name=\"subject\"]', self.modal.$modal);\n\n        self.$alt = $('input[name=\"alt\"]', self.modal.$modal);\n        self.$align = $('select[name=\"align\"]', self.modal.$modal);\n        self.$scale = $('select[name=\"scale\"]', self.modal.$modal);\n        self.$selectedItems = $(\"input.pat-contentbrowser\", self.modal.$modal);\n        self.$enableImageZoom = $('input[name=\"enableImageZoom\"]', self.modal.$modal);\n        self.$captionFromDescription = $(\n            'input[name=\"captionFromDescription\"]',\n            self.modal.$modal\n        );\n        self.$caption = $('textarea[name=\"caption\"]', self.modal.$modal);\n\n        /* load up all the link types */\n        for (var index = 0; index < self.options.linkTypes.length; index++) {\n            var type = self.options.linkTypes[index];\n            var $container = $(\".linkType.\" + type + \" .main\", self.modal.$modal);\n            if ($container.length) {\n                var instance = new self.options.linkTypeClassMapping[type](\n                    $container,\n                    {\n                        linkModal: self,\n                        tinypattern: self.tinypattern,\n                    }\n                );\n                await events.await_pattern_init(instance);\n                self.linkTypes[type] = instance;\n            }\n        }\n\n        $(\".autotoc-nav a\", self.modal.$modal).on(\"click\", function () {\n            var $fieldset = $(\"fieldset.linkType\", self.modal.$modal).eq(\n                $(this).index()\n            );\n            var classes = $fieldset[0].className.split(/\\s+/);\n            _.each(classes, function (val) {\n                if (_.indexOf(self.options.linkTypes, val) !== -1) {\n                    self.linkType = val;\n                }\n            });\n        });\n\n        self.$captionFromDescription.on(\"change\", function () {\n            if (this.checked) {\n                self.$caption.prop(\"disabled\", true);\n            } else {\n                self.$caption.prop(\"disabled\", false);\n            }\n        });\n    },\n\n    getLinkUrl: function () {\n        // get the url, only get one uid\n        return this.linkTypes[this.linkType].toUrl();\n    },\n\n    getValue: function () {\n        return this.linkTypes[this.linkType].value();\n    },\n\n    updateAnchor: function (href) {\n        var self = this;\n\n        self.tiny.focus();\n        self.tiny.selection.setRng(self.rng);\n\n        var target = self.$target.val();\n        var title = self.$title.val();\n        var linkAttrs = $.extend(\n            true,\n            self.data,\n            {\n                \"title\": title ? title : null,\n                \"target\": target ? target : null,\n                \"data-linkType\": self.linkType,\n                \"href\": href,\n            },\n            self.linkTypes[self.linkType].attributes()\n        );\n        if (self.anchorElm) {\n            if (self.onlyText && linkAttrs.text !== self.initialText) {\n                if (\"innerText\" in self.anchorElm) {\n                    self.anchorElm.innerText = self.data.text;\n                } else {\n                    self.anchorElm.textContent = self.data.text;\n                }\n            }\n\n            self.tiny.dom.setAttribs(self.anchorElm, linkAttrs);\n\n            self.tiny.selection.select(self.anchorElm);\n            self.tiny.undoManager.add();\n        } else {\n            if (self.onlyText) {\n                self.tiny.insertContent(\n                    self.tiny.dom.createHTML(\n                        \"a\",\n                        linkAttrs,\n                        self.tiny.dom.encode(self.data.text)\n                    )\n                );\n            } else {\n                self.tiny.execCommand(\"mceInsertLink\", false, linkAttrs);\n            }\n        }\n    },\n\n    focusElement: function (elm) {\n        this.tiny.focus();\n        this.tiny.selection.select(elm);\n        this.tiny.nodeChanged();\n    },\n\n    getScaleFromSrcset: function (pictureVariant) {\n        let pictureVariantsConfig = this.options.pictureVariants[pictureVariant];\n        return pictureVariantsConfig.sourceset[\n            pictureVariantsConfig.sourceset.length - 1\n        ].scale;\n    },\n\n    updateImage: function (src) {\n        console.log(`updateImage: ${src}`);\n        var self = this;\n        var title = self.$title.val();\n        var captionFromDescription = self.$captionFromDescription.prop(\"checked\");\n        var enableImageZoom = self.$enableImageZoom.prop(\"checked\");\n        var caption = self.$caption.val();\n\n        self.tiny.focus();\n        self.tiny.selection.setRng(self.rng);\n        var cssclasses = [\n            \"image-richtext\",\n        ];\n        if (self.$align.val()) {\n            cssclasses.push(self.$align.val());\n        }\n        if (self.linkType !== \"externalImage\") {\n            cssclasses.push(\"picture-variant-\" + self.$scale.val())\n        }\n        if (captionFromDescription || caption) {\n            cssclasses.push(\"captioned\");\n        }\n        if (enableImageZoom) {\n            cssclasses.push(\"zoomable\");\n        }\n        var data = {\n            \"src\": src,\n            \"title\": title ? title : null,\n            \"alt\": self.$alt.val(),\n            \"class\": cssclasses.join(\" \"),\n            \"data-linkType\": self.linkType,\n            \"data-scale\": self.getScaleFromSrcset(self.$scale.val()),\n            ...self.linkTypes[self.linkType].attributes()\n        };\n\n        if (self.linkType !== \"externalImage\") {\n            data[\"data-picturevariant\"] = self.$scale.val();\n        }\n\n        if (caption && !captionFromDescription) {\n            data[\"data-captiontext\"] = caption;\n        }\n        if (self.imgElm && !self.imgElm.getAttribute(\"data-mce-object\")) {\n            const imgWidth = self.dom.getAttrib(self.imgElm, \"width\");\n            const imgHeight = self.dom.getAttrib(self.imgElm, \"height\");\n            if (imgWidth) {\n                data.width = imgWidth;\n            }\n            if (imgHeight) {\n                data.height = imgHeight;\n            }\n        } else {\n            self.imgElm = null;\n        }\n\n        function waitLoad(imgElm) {\n            imgElm.onload = imgElm.onerror = function () {\n                imgElm.onload = imgElm.onerror = null;\n                self.focusElement(imgElm);\n            };\n        }\n\n        var newImgElm = self.dom.create(\"img\", data);\n\n        if (self.imgElm && self.imgElm.tagName.toLowerCase() == \"img\") {\n            self.imgElm.replaceWith(newImgElm);\n        } else {\n            self.rng.insertNode(newImgElm);\n        }\n        self.imgElm = newImgElm;\n\n        waitLoad(self.imgElm);\n        if (self.imgElm.complete) {\n            self.focusElement(self.imgElm);\n        }\n    },\n\n    // eslint-disable-next-line no-unused-vars\n    modalShown: async function (e) {\n        var self = this;\n        await self.initElements();\n        self.initData();\n        // upload init\n        // if (self.options.upload) {\n        //     self.$upload = $(\".uploadify-me\", self.modal.$modal);\n        //     self.options.upload.relatedItems = $.extend(\n        //         true,\n        //         {},\n        //         self.options.relatedItems\n        //     );\n        //     self.options.upload.relatedItems.selectableTypes = self.options.folderTypes;\n        //     self.$upload.addClass(\"pat-upload\");\n        //     new PatternUpload(self.$upload, self.options.upload);\n        //     self.$upload.on(\n        //         \"uploadAllCompleted\",\n        //         function (evt, data) {\n        //             if (self.linkTypes.image) {\n        //                 self.linkTypes.image.set(data.data.UID);\n        //                 $(\n        //                     \"#\" + $(\"#tinylink-image\", self.modal.$modal).data(\"navref\")\n        //                 ).trigger(\"click\");\n        //             } else {\n        //                 self.linkTypes.internal.set(data.data.UID);\n        //                 $(\n        //                     \"#\" +\n        //                         $(\"#tinylink-internal\", self.modal.$modal).data(\"navref\")\n        //                 ).trigger(\"click\");\n        //             }\n        //         }.bind(self)\n        //     );\n        // }\n\n        self.$button.off(\"click\").on(\"click\", function (e) {\n            e.preventDefault();\n            e.stopPropagation();\n            self.linkType = self.modal.$modal.find(\"fieldset.active\").data(\"linktype\");\n            // if (self.linkType === \"uploadImage\" || self.linkType === \"upload\") {\n            //     var patUpload = self.$upload.data().patternUpload;\n            //     if (patUpload.dropzone.files.length > 0) {\n            //         patUpload.processUpload();\n            //         // eslint-disable-next-line no-unused-vars\n            //         self.$upload.on(\"uploadAllCompleted\", function (evt, data) {\n            //             var counter = 0;\n            //             var checkUpload = function () {\n            //                 if (counter < 5 && !self.linkTypes[self.linkType].value()) {\n            //                     counter += 1;\n            //                     setTimeout(checkUpload, 100);\n            //                     return;\n            //                 } else {\n            //                     var href = self.getLinkUrl();\n            //                     self.updateImage(href);\n            //                     self.hide();\n            //                 }\n            //             };\n            //             checkUpload();\n            //         });\n            //     }\n            // }\n            var href;\n            try {\n                href = self.getLinkUrl();\n            } catch (error) {\n                console.log(error);\n                return; // just cut out if no url\n            }\n            if (!href) {\n                return; // just cut out if no url\n            }\n            if (self.isImageMode()) {\n                self.updateImage(href);\n            } else {\n                /* regular anchor */\n                self.updateAnchor(href);\n            }\n            self.hide();\n        });\n        $('.modal-footer input[name=\"cancel\"]', self.modal.$modal).on(\n            \"click\",\n            function (e) {\n                e.preventDefault();\n                self.hide();\n            }\n        );\n    },\n\n    show: function () {\n        this.modal.show();\n    },\n\n    hide: function () {\n        this.modal.hide();\n    },\n\n    initData: function () {\n        var self = this;\n        self.data = {};\n        // get selection BEFORE..\n        // This is pulled from TinyMCE link plugin\n        self.initialText = null;\n        var value;\n        self.rng = self.tiny.selection.getRng();\n        self.selectedElm = self.tiny.selection.getNode();\n        self.anchorElm = self.tiny.dom.getParent(self.selectedElm, \"a[href]\");\n        self.onlyText = self.isOnlyTextSelected();\n\n        self.data.text = self.initialText = self.anchorElm\n            ? self.anchorElm.innerText || self.anchorElm.textContent\n            : self.tiny.selection.getContent({ format: \"text\" });\n        self.data.href = self.anchorElm\n            ? self.tiny.dom.getAttrib(self.anchorElm, \"href\")\n            : \"\";\n\n        if (self.anchorElm) {\n            self.data.target = self.tiny.dom.getAttrib(self.anchorElm, \"target\");\n        } else if (self.tiny.options.get('link_default_target')) {\n            self.data.target = self.tiny.options.get('link_default_target');\n        }\n\n        if ((value = self.tiny.dom.getAttrib(self.anchorElm, \"rel\"))) {\n            self.data.rel = value;\n        }\n\n        if ((value = self.tiny.dom.getAttrib(self.anchorElm, \"class\"))) {\n            self.data[\"class\"] = value;\n        }\n\n        if ((value = self.tiny.dom.getAttrib(self.anchorElm, \"title\"))) {\n            self.data.title = value;\n        }\n\n        self.tiny.focus();\n        self.anchorElm = self.dom.getParent(self.selectedElm, \"a[href]\");\n\n        var linkType;\n        if (self.isImageMode()) {\n            var img;\n            img = self.selectedElm;\n            self.imgElm = img;\n\n            var src = self.dom.getAttrib(self.imgElm, \"src\");\n            var captionText = self.dom.getAttrib(self.imgElm, \"data-captiontext\");\n            self.$title.val(self.dom.getAttrib(self.imgElm, \"title\"));\n            self.$alt.val(self.dom.getAttrib(self.imgElm, \"alt\"));\n\n            if ($(self.imgElm).hasClass(\"zoomable\")) {\n                self.$enableImageZoom.prop(\"checked\", true);\n            }\n            if ($(self.imgElm).hasClass(\"captioned\") && !captionText) {\n                self.$captionFromDescription.prop(\"checked\", true);\n                self.$caption.prop(\"disabled\", true);\n            } else if ($(self.imgElm).hasClass(\"captioned\") && captionText) {\n                self.$captionFromDescription.prop(\"checked\", false);\n            } else {\n                self.$captionFromDescription.prop(\"checked\", false);\n            }\n            if (captionText) {\n                self.$caption.val(captionText);\n            }\n\n            linkType = self.dom.getAttrib(self.imgElm, \"data-linktype\");\n            if (linkType && linkType in self.linkTypes) {\n                self.linkType = linkType;\n                self.linkTypes[self.linkType].load(self.imgElm);\n\n                // set scale selection in link modal:\n                var pictureVariant = self.dom.getAttrib(\n                    self.imgElm,\n                    \"data-picturevariant\"\n                );\n                self.$scale.val(pictureVariant);\n\n                // var selectedImageUid = self.dom.getAttrib(\n                //     self.imgElm,\n                //     \"data-val\"\n                // );\n                // self.$selectedItems.val()\n\n                $(\"#tinylink-\" + self.linkType, self.modal.$modal).trigger(\"click\");\n            } else if (src) {\n                self.guessImageLink(src);\n            }\n            var className = self.dom.getAttrib(self.imgElm, \"class\");\n            var klasses = className.split(\" \");\n            for (var i = 0; i < klasses.length; i = i + 1) {\n                var klass = klasses[i];\n                for (var availClass in self.options.imageClasses) {\n                    if (availClass.indexOf(klass) !== -1) {\n                        self.$align.val(klass);\n                    }\n                }\n            }\n        } else if (self.anchorElm) {\n            self.focusElement(self.anchorElm);\n            var href = \"\";\n            href = self.dom.getAttrib(self.anchorElm, \"href\");\n            self.$target.val(self.dom.getAttrib(self.anchorElm, \"target\"));\n            self.$title.val(self.dom.getAttrib(self.anchorElm, \"title\"));\n            linkType = self.dom.getAttrib(self.anchorElm, \"data-linktype\");\n            if (linkType) {\n                self.linkType = linkType;\n                self.linkTypes[self.linkType].load(self.anchorElm);\n                var $panel = $(\"#tinylink-\" + self.linkType, self.modal.$modal);\n                // $('#tinylink-' + self.linkType, self.modal.$modal).trigger('click');\n                if ($panel.length === 1) {\n                    $(\"#\" + $panel.data(\"autotoc-trigger-id\")).trigger(\"click\");\n                }\n            } else if (href) {\n                self.guessAnchorLink(href);\n            }\n        }\n    },\n\n    guessImageLink: function (src) {\n        if (src.indexOf(this.options.prependToScalePart) !== -1) {\n            this.linkType = \"image\";\n            // TODO: use data-scale attribute instead:\n            this.$scale.val(this.tinypattern.getScaleFromUrl(src));\n            this.linkTypes.image.set(this.tinypattern.stripGeneratedUrl(src));\n        } else {\n            this.linkType = \"externalImage\";\n            this.linkTypes.externalImage.set(src);\n        }\n    },\n\n    guessAnchorLink: function (href) {\n        console.log(\"href: \" + href);\n        if (\n            this.options.prependToUrl &&\n            href.indexOf(this.options.prependToUrl) !== -1\n        ) {\n            // XXX if using default configuration, it gets more difficult\n            // here to detect internal urls so this might need to change...\n            this.linkType = \"internal\";\n            this.linkTypes.internal.set(this.tinypattern.stripGeneratedUrl(href));\n        } else if (href.indexOf(\"mailto:\") !== -1) {\n            this.linkType = \"email\";\n            var email = href.substring(\"mailto:\".length, href.length);\n            var split = email.split(\"?subject=\");\n            this.linkTypes.email.set(split[0]);\n            if (split.length > 1) {\n                this.$subject.val(decodeURIComponent(split[1]));\n            }\n        } else if (href[0] === \"#\") {\n            this.linkType = \"anchor\";\n            this.linkTypes.anchor.set(href.substring(1));\n        } else {\n            this.linkType = \"external\";\n            this.linkTypes.external.set(href);\n        }\n    },\n\n    // setSelectElement: function ($el, val) {\n    //     $el.find(\"option:selected\").prop(\"selected\", false);\n    //     if (val) {\n    //         // update\n    //         $el.find('option[value=\"' + val + '\"]').prop(\"selected\", true);\n    //     }\n    // },\n\n    reinitialize: function () {\n        /*\n         * This will probably be called before show is run.\n         * It will overwrite the base html template given to\n         * be able to privde default values for the overlay\n         */\n        this.modal.options.html = this.generateModalHtml();\n    },\n});\n"],"names":["LinkType","Base","extend","name","trigger","defaults","linkModal","init","this","options","tinypattern","tiny","dom","getEl","el","querySelector","value","trim","toUrl","load","element","val","getAttrib","set","setAttribute","attributes","updateRelatedItems","ExternalLink","prototype","call","addEventListener","$","RegExp","test","split","indexOf","InternalLink","async","createContentBrowser","relatedItems","inputEl","selection","getNode","linkType","push","ContentBrowser","default","contentBrowserPattern","generateUrl","UploadLink","getDelegatedLinkType","linkTypes","image","internal","ImageLink","generateImageUrl","getScaleFromSrcset","$scale","EmailLink","subject","getSubject","href","apply","$subject","attribs","AnchorLink","$select","$el","find","anchorNodes","anchorData","populate","select2","id","node","i","j","title","self","remove","nodes","select","length","anchorSelector","text","replace","toLowerCase","substring","found","anode","newAnchor","data","append","getIndex","index","parseInt","innerHTML","anchor","add_image","editor","document","getElementById","instance","addImageClicked","add_link","addLinkClicked","tinymce","add","url","ui","registry","addButton","icon","tooltip","onAction","addMenuItem","shortcut","stateSelector","api","execCommand","initialLinkType","insertHeading","linkTypeClassMapping","upload","external","email","uploadImage","externalImage","linkTypeTemplateMapping","LinkTemplate","ImageTemplate","template","_","modal","patterns","html","generateModalHtml","content","buttons","reloadWindowOnClose","templateOptions","classDialog","actionOptions","backdropOptions","zIndex","closeOnClick","on","e","modalShown","isOnlyTextSelected","getContent","anchorElm","childNodes","ii","nodeType","insertImageHelp","uploadText","insertLinkHelp","anchorLabel","target","externalText","emailText","subjectText","targetList","titleText","internalImageText","internalImage","externalImageText","altText","alt","imageAlignText","imageAlign","captionFromDescriptionText","captionFromDescription","enableImageZoom","captionText","caption","scaleText","scale","pictureVariants","imageCaptioningEnabled","cancelBtn","insertBtn","isImageMode","initElements","$target","$modal","$button","$title","$alt","$align","$selectedItems","$enableImageZoom","$captionFromDescription","$caption","type","$container","events","await_pattern_init","classes","eq","className","checked","prop","getLinkUrl","getValue","updateAnchor","focus","setRng","rng","linkAttrs","onlyText","initialText","innerText","textContent","setAttribs","undoManager","insertContent","createHTML","encode","focusElement","elm","nodeChanged","pictureVariant","pictureVariantsConfig","sourceset","updateImage","src","console","log","cssclasses","join","imgElm","getAttribute","imgWidth","imgHeight","width","height","newImgElm","create","tagName","replaceWith","insertNode","onload","onerror","complete","initData","off","preventDefault","stopPropagation","error","hide","show","getRng","selectedElm","getParent","format","get","rel","img","hasClass","guessImageLink","klasses","klass","availClass","imageClasses","$panel","guessAnchorLink","prependToScalePart","getScaleFromUrl","stripGeneratedUrl","prependToUrl","decodeURIComponent","reinitialize"],"sourceRoot":""}