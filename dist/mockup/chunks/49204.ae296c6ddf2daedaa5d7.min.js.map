{"version":3,"file":"chunks/49204.ae296c6ddf2daedaa5d7.min.js","mappings":"+GAMA,EAAQ,M,oBCFR,WACI,aAgBA,IAAIA,EAASC,QAAQC,KAAKC,MAAMC,QAAQ,yBAExC,MAIMC,EAAqB,CAACC,EAAQC,EAAWC,KACjCF,EAAOG,IACfC,YAAYJ,EAAOK,UAAW,oBAClCH,EAAaI,KAAKJ,EAAaK,OAPR,EAACP,EAAQQ,KAChCR,EAAOS,SAAS,eAAgB,CAAED,SAAQ,EAO1CE,CAAiBV,EAAQE,EAAaK,MAAM,EAiBxCI,GARSC,EAQmB,6BARXZ,GAAUA,EAAOa,QAAQN,IAAIK,IAArCA,MAUf,MAaME,EAAoB,CAACd,EAAQE,IAAiBa,IAClDA,EAAIC,UAAUd,EAAaK,OAC3B,MAAMU,EAAsBC,GAAKH,EAAIC,UAAUE,EAAEV,OAEjD,OADAR,EAAOmB,GAAG,eAAgBF,GACnB,IAAMjB,EAAOoB,IAAI,eAAgBH,EAAoB,EAmB5DvB,EAAO2B,IAAI,gBAAgB,CAACrB,EAAQC,KA7CnBD,MAEjBsB,EADuBtB,EAAOa,QAAQU,UACvB,6BAA8B,CAC3CC,UAAW,UACXC,SAAS,GACT,EAyCAC,CAAW1B,GACX,MAAME,EAjFGyB,KACX,IAAIC,EAAQD,EAOZ,MAAO,CACLpB,IAPU,IACHqB,EAOPtB,IALUuB,IACVD,EAAQC,CAAC,EAKV,EAsEsBC,EAAK,GAtDX,EAAC9B,EAAQC,EAAWC,KACrCF,EAAO+B,WAAW,mBAAmB,KACnChC,EAAmBC,EAAQC,EAAWC,EAAa,GACnD,EAoDA8B,CAAWhC,EAAQC,EAAWC,GApBjB,EAACF,EAAQE,KACxB,MAAM+B,EAAW,IAAMjC,EAAOkC,YAAY,mBAC1ClC,EAAOmC,GAAGC,SAASC,gBAAgB,eAAgB,CACjDC,KAAM,eACNC,QAAS,cACTN,WACAO,QAAS1B,EAAkBd,EAAQE,KAErCF,EAAOmC,GAAGC,SAASK,kBAAkB,eAAgB,CACnDC,KAAM,cACNJ,KAAM,eACNL,WACAO,QAAS1B,EAAkBd,EAAQE,IACnC,EAQAqB,CAASvB,EAAQE,GAxCP,EAACF,EAAQC,EAAWC,KAChCF,EAAOmB,GAAG,sCAAsCD,IAC1ChB,EAAaK,OACfP,EAAOG,IAAIC,YAAYJ,EAAOK,UAAW,mBAA+B,wBAAXa,EAAEyB,KACjE,IAEF3C,EAAOmB,GAAG,QAAQ,KACZR,EAAmBX,IACrBD,EAAmBC,EAAQC,EAAWC,EACxC,GACA,EA+BA0C,CAAM5C,EAAQC,EAAWC,EAAa,GAM7C,CA7FD,E","sources":["webpack://@plone/mockup/./node_modules/tinymce/plugins/visualblocks/index.js","webpack://@plone/mockup/./node_modules/tinymce/plugins/visualblocks/plugin.js"],"sourcesContent":["// Exports the \"visualblocks\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/visualblocks')\n//   ES2015:\n//     import 'tinymce/plugins/visualblocks'\nrequire('./plugin.js');","/**\n * TinyMCE version 7.2.1 (2024-07-03)\n */\n\n(function () {\n    'use strict';\n\n    const Cell = initial => {\n      let value = initial;\n      const get = () => {\n        return value;\n      };\n      const set = v => {\n        value = v;\n      };\n      return {\n        get,\n        set\n      };\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    const fireVisualBlocks = (editor, state) => {\n      editor.dispatch('VisualBlocks', { state });\n    };\n\n    const toggleVisualBlocks = (editor, pluginUrl, enabledState) => {\n      const dom = editor.dom;\n      dom.toggleClass(editor.getBody(), 'mce-visualblocks');\n      enabledState.set(!enabledState.get());\n      fireVisualBlocks(editor, enabledState.get());\n    };\n\n    const register$2 = (editor, pluginUrl, enabledState) => {\n      editor.addCommand('mceVisualBlocks', () => {\n        toggleVisualBlocks(editor, pluginUrl, enabledState);\n      });\n    };\n\n    const option = name => editor => editor.options.get(name);\n    const register$1 = editor => {\n      const registerOption = editor.options.register;\n      registerOption('visualblocks_default_state', {\n        processor: 'boolean',\n        default: false\n      });\n    };\n    const isEnabledByDefault = option('visualblocks_default_state');\n\n    const setup = (editor, pluginUrl, enabledState) => {\n      editor.on('PreviewFormats AfterPreviewFormats', e => {\n        if (enabledState.get()) {\n          editor.dom.toggleClass(editor.getBody(), 'mce-visualblocks', e.type === 'afterpreviewformats');\n        }\n      });\n      editor.on('init', () => {\n        if (isEnabledByDefault(editor)) {\n          toggleVisualBlocks(editor, pluginUrl, enabledState);\n        }\n      });\n    };\n\n    const toggleActiveState = (editor, enabledState) => api => {\n      api.setActive(enabledState.get());\n      const editorEventCallback = e => api.setActive(e.state);\n      editor.on('VisualBlocks', editorEventCallback);\n      return () => editor.off('VisualBlocks', editorEventCallback);\n    };\n    const register = (editor, enabledState) => {\n      const onAction = () => editor.execCommand('mceVisualBlocks');\n      editor.ui.registry.addToggleButton('visualblocks', {\n        icon: 'visualblocks',\n        tooltip: 'Show blocks',\n        onAction,\n        onSetup: toggleActiveState(editor, enabledState)\n      });\n      editor.ui.registry.addToggleMenuItem('visualblocks', {\n        text: 'Show blocks',\n        icon: 'visualblocks',\n        onAction,\n        onSetup: toggleActiveState(editor, enabledState)\n      });\n    };\n\n    var Plugin = () => {\n      global.add('visualblocks', (editor, pluginUrl) => {\n        register$1(editor);\n        const enabledState = Cell(false);\n        register$2(editor, pluginUrl, enabledState);\n        register(editor, enabledState);\n        setup(editor, pluginUrl, enabledState);\n      });\n    };\n\n    Plugin();\n\n})();\n"],"names":["global","tinymce","util","Tools","resolve","toggleVisualBlocks","editor","pluginUrl","enabledState","dom","toggleClass","getBody","set","get","state","dispatch","fireVisualBlocks","isEnabledByDefault","name","options","toggleActiveState","api","setActive","editorEventCallback","e","on","off","add","registerOption","register","processor","default","register$1","initial","value","v","Cell","addCommand","register$2","onAction","execCommand","ui","registry","addToggleButton","icon","tooltip","onSetup","addToggleMenuItem","text","type","setup"],"sourceRoot":""}