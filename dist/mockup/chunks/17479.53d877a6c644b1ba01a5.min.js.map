{"version":3,"file":"chunks/17479.53d877a6c644b1ba01a5.min.js","mappings":"6GAMA,EAAQ,I,kBCFR,WACI,aAEA,IAAIA,EAAWC,QAAQC,KAAKC,MAAMC,QAAQ,yBAE1C,MACMC,GADeC,EACW,WADHC,UAAgBA,IAAUD,GAAlCA,MAGjBE,EAAWP,QAAQC,KAAKC,MAAMC,QAAQ,wBAEtCK,EAASR,QAAQC,KAAKC,MAAMC,QAAQ,sBAExC,MAAMM,EAASC,GAAQC,GAAUA,EAAOC,QAAQC,IAAIH,GAU9CI,EAAkBL,EAAO,wBACzBM,EAAoBN,EAAO,uBAC3BO,EAAsBP,EAAO,yBAE7BQ,EAAsB,CAACN,EAAQO,KACnCP,EAAOQ,oBAAoBC,KAAK,CAC9BC,KAAMH,EACNb,KAAM,SACN,EAsCEiB,EAAaX,IACjBA,EAAOY,WAAW,WAAW,KArClBZ,KACX,MAAMa,EAAUjB,EAASkB,IAAIC,UAAUf,EAAOgB,GAAI,QAClD,GAAIb,EAAgBH,KAAYA,EAAOiB,UACrC,OAEFjB,EAAOkB,OACP,MAAMC,EAAiBf,EAAkBJ,GACzC,GAAIP,EAAW0B,GAGb,OAFAA,EAAeC,KAAKpB,EAAQA,QAC5BA,EAAOqB,cAGLR,GACFb,EAAOsB,UAAS,GACXT,EAAQU,WAAYV,EAAQU,aACD,mBAAnBV,EAAQW,OACjBX,EAAQW,SAERlB,EAAoBN,EAAQ,wCAGhCA,EAAOqB,eAEPf,EAAoBN,EAAQ,gCAC9B,EAcEkB,CAAKlB,EAAO,IAEdA,EAAOY,WAAW,aAAa,KAdlBZ,KACb,MAAMyB,EAAI5B,EAAO6B,KAAK1B,EAAO2B,cACvBC,EAAmBvB,EAAoBL,GACzCP,EAAWmC,GACbA,EAAiBR,KAAKpB,EAAQA,GAGhCA,EAAO6B,aAAaJ,EAAE,EAQpBK,CAAO9B,EAAO,GACd,EAGE+B,EAAc/B,GAAUgC,IAC5B,MAAMC,EAAU,KACdD,EAAIE,YAAY/B,EAAgBH,IAAWA,EAAOiB,UAAU,EAI9D,OAFAgB,IACAjC,EAAOmC,GAAG,mBAAoBF,GACvB,IAAMjC,EAAOoC,IAAI,mBAAoBH,EAAQ,EAsBpD7C,EAASiD,IAAI,QAAQrC,IA5FJA,KACjB,MAAMsC,EAAiBtC,EAAOC,QAAQsC,SACtCD,EAAe,uBAAwB,CACrCE,UAAW,UACXC,SAAS,IAEXH,EAAe,sBAAuB,CAAEE,UAAW,aACnDF,EAAe,wBAAyB,CAAEE,UAAW,YAAa,EAsFhEE,CAAW1C,GArBEA,KACfA,EAAO2C,GAAGC,SAASC,UAAU,OAAQ,CACnCC,KAAM,OACNC,QAAS,OACTC,SAAS,EACTC,SAAU,IAAMjD,EAAOkD,YAAY,WACnCC,QAASpB,EAAY/B,GACrBoD,SAAU,WAEZpD,EAAO2C,GAAGC,SAASC,UAAU,SAAU,CACrCC,KAAM,SACNC,QAAS,SACTC,SAAS,EACTC,SAAU,IAAMjD,EAAOkD,YAAY,aACnCC,QAASpB,EAAY/B,KAEvBA,EAAOqD,YAAY,SAAU,GAAI,UAAU,EAMzCd,CAASvC,GACTW,EAAWX,EAAO,GAMzB,CAlHD,E","sources":["webpack://@plone/mockup/./node_modules/tinymce/plugins/save/index.js","webpack://@plone/mockup/./node_modules/tinymce/plugins/save/plugin.js"],"sourcesContent":["// Exports the \"save\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/save')\n//   ES2015:\n//     import 'tinymce/plugins/save'\nrequire('./plugin.js');","/**\n * TinyMCE version 7.2.1 (2024-07-03)\n */\n\n(function () {\n    'use strict';\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    const isSimpleType = type => value => typeof value === type;\n    const isFunction = isSimpleType('function');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n\n    var global = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    const option = name => editor => editor.options.get(name);\n    const register$2 = editor => {\n      const registerOption = editor.options.register;\n      registerOption('save_enablewhendirty', {\n        processor: 'boolean',\n        default: true\n      });\n      registerOption('save_onsavecallback', { processor: 'function' });\n      registerOption('save_oncancelcallback', { processor: 'function' });\n    };\n    const enableWhenDirty = option('save_enablewhendirty');\n    const getOnSaveCallback = option('save_onsavecallback');\n    const getOnCancelCallback = option('save_oncancelcallback');\n\n    const displayErrorMessage = (editor, message) => {\n      editor.notificationManager.open({\n        text: message,\n        type: 'error'\n      });\n    };\n    const save = editor => {\n      const formObj = global$1.DOM.getParent(editor.id, 'form');\n      if (enableWhenDirty(editor) && !editor.isDirty()) {\n        return;\n      }\n      editor.save();\n      const onSaveCallback = getOnSaveCallback(editor);\n      if (isFunction(onSaveCallback)) {\n        onSaveCallback.call(editor, editor);\n        editor.nodeChanged();\n        return;\n      }\n      if (formObj) {\n        editor.setDirty(false);\n        if (!formObj.onsubmit || formObj.onsubmit()) {\n          if (typeof formObj.submit === 'function') {\n            formObj.submit();\n          } else {\n            displayErrorMessage(editor, 'Error: Form submit field collision.');\n          }\n        }\n        editor.nodeChanged();\n      } else {\n        displayErrorMessage(editor, 'Error: No form element found.');\n      }\n    };\n    const cancel = editor => {\n      const h = global.trim(editor.startContent);\n      const onCancelCallback = getOnCancelCallback(editor);\n      if (isFunction(onCancelCallback)) {\n        onCancelCallback.call(editor, editor);\n        return;\n      }\n      editor.resetContent(h);\n    };\n\n    const register$1 = editor => {\n      editor.addCommand('mceSave', () => {\n        save(editor);\n      });\n      editor.addCommand('mceCancel', () => {\n        cancel(editor);\n      });\n    };\n\n    const stateToggle = editor => api => {\n      const handler = () => {\n        api.setEnabled(!enableWhenDirty(editor) || editor.isDirty());\n      };\n      handler();\n      editor.on('NodeChange dirty', handler);\n      return () => editor.off('NodeChange dirty', handler);\n    };\n    const register = editor => {\n      editor.ui.registry.addButton('save', {\n        icon: 'save',\n        tooltip: 'Save',\n        enabled: false,\n        onAction: () => editor.execCommand('mceSave'),\n        onSetup: stateToggle(editor),\n        shortcut: 'Meta+S'\n      });\n      editor.ui.registry.addButton('cancel', {\n        icon: 'cancel',\n        tooltip: 'Cancel',\n        enabled: false,\n        onAction: () => editor.execCommand('mceCancel'),\n        onSetup: stateToggle(editor)\n      });\n      editor.addShortcut('Meta+S', '', 'mceSave');\n    };\n\n    var Plugin = () => {\n      global$2.add('save', editor => {\n        register$2(editor);\n        register(editor);\n        register$1(editor);\n      });\n    };\n\n    Plugin();\n\n})();\n"],"names":["global$2","tinymce","util","Tools","resolve","isFunction","type","value","global$1","global","option","name","editor","options","get","enableWhenDirty","getOnSaveCallback","getOnCancelCallback","displayErrorMessage","message","notificationManager","open","text","register$1","addCommand","formObj","DOM","getParent","id","isDirty","save","onSaveCallback","call","nodeChanged","setDirty","onsubmit","submit","h","trim","startContent","onCancelCallback","resetContent","cancel","stateToggle","api","handler","setEnabled","on","off","add","registerOption","register","processor","default","register$2","ui","registry","addButton","icon","tooltip","enabled","onAction","execCommand","onSetup","shortcut","addShortcut"],"sourceRoot":""}