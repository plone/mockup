{"version":3,"file":"chunks/83683.9130ae061aed3e330605.min.js","mappings":"2GAIA,WACI,aAEA,IAAIA,EAAWC,QAAQC,KAAKC,MAAMC,QAAQ,yBAEtCC,EAAWJ,QAAQC,KAAKC,MAAMC,QAAQ,0BAEtCE,EAASL,QAAQC,KAAKC,MAAMC,QAAQ,sBAExC,MAQMG,GARUC,EAQsB,6BARZC,GAAWA,EAAOC,QAAQC,IAAIH,IAAzC,IAACA,EAUhB,MAAMI,EAAsB,gBACtBC,EAAiBC,IAASA,EAC1BC,EAAmBC,GACVA,EAAIC,aAAa,OAASD,EAAIC,aAAa,SACzC,GAGXC,EAAiBF,GADN,CAACA,GAAuC,MAA/BA,EAAIG,SAASC,cACRC,CAASL,KAASA,EAAIC,aAAa,SAAoC,KAAzBF,EAAgBC,GAGvFM,EAAsCb,IACxC,MAAMc,EAAMd,EAAOc,IACnBlB,EAASkB,GAAKC,KAAKf,EAAOgB,UAAUC,SAAWC,IAC3CrB,EAAOsB,KAAKD,EAAQE,IALD,IAACb,EAAQE,EAARF,EAMOa,KANwBb,EAAIc,YAO/CP,EAAIQ,OAAOF,GAAM,QAQ3BG,EAAkBvB,GAAWA,EAAOc,IAAIU,UAAUxB,EAAOgB,UAAUS,WAAYtB,GAoC/EuB,EAAS,CAAC1B,EAAQ2B,KACpB,MAAMC,EAASL,EAAevB,GAC1B4B,EARa,EAAC5B,EAAQ2B,EAAIE,KAC9BA,EAAcC,gBAAgB,QAC9BD,EAAcF,GAAKA,EACnB3B,EAAO+B,YACP/B,EAAOgC,YAAYC,OAKfC,CAAalC,EAAQ2B,EAAIC,GA7BZ,EAAC5B,EAAQ2B,KAC1B3B,EAAOgC,YAAYG,SAAS,KACnBrC,EAAuBE,IACxBA,EAAOgB,UAAUoB,UAAS,GAE1BpC,EAAOgB,UAAUqB,cACjBrC,EAAOsC,cAActC,EAAOc,IAAIyB,WAAW,IAAK,CAAEZ,SAIlDd,EAAmCb,GAEnCA,EAAOwC,UAAUlB,OAAO,mBAAemB,OAAWA,GAAW,GAE7DzC,EAAOwC,UAAUE,MAAM,cAAe,CAAEC,MAAOhB,IAE/C3B,EAAO+B,gBAgBXa,CAAa5C,EAAQ2B,GAEzB3B,EAAO6C,SAaLC,EAAQ9C,IACV,MAAM+C,EAzDI,CAAC/C,IACX,MAAM4B,EAASL,EAAevB,GAC9B,OAAI4B,EACOtB,EAAgBsB,GAGhB,IAmDOoB,CAAMhD,GACxBA,EAAOiD,cAAcH,KAAK,CACtBI,MAAO,SACPC,KAAM,SACNC,KAAM,CACFC,KAAM,QACNC,MAAO,CACH,CACIvD,KAAM,KACNsD,KAAM,QACNE,MAAO,KACPC,YAAa,aAIzBC,QAAS,CACL,CACIJ,KAAM,SACNtD,KAAM,SACN2D,KAAM,UAEV,CACIL,KAAM,SACNtD,KAAM,OACN2D,KAAM,OACNC,SAAS,IAGjBC,YAAa,CACTjC,GAAIoB,GAERc,SAAWC,IA1CE,EAAC9D,EAAQ+D,IAhD9B,8BAA8BC,KAiDXD,IAKXrC,EAAO1B,EAAQ+D,IACR,IALP/D,EAAOiD,cAAcgB,MAAM,2GACpB,GAwCCC,CAAalE,EAAQ8D,EAAIK,UAAUxC,KACnCmC,EAAIM,YAedC,EAA0BjD,GADN,CAACA,GAAShB,EAAcgB,EAAKkD,KAAK,WAAalE,EAAcgB,EAAKkD,KAAK,OAASlD,EAAKkD,KAAK,SAC3EC,CAAkBnD,KAAUA,EAAKC,WACpEmD,EAAsBC,GAAWvD,IACnC,IAAK,IAAIwD,EAAI,EAAGA,EAAIxD,EAAMyD,OAAQD,IAAK,CACnC,MAAMtD,EAAOF,EAAMwD,GACfL,EAAuBjD,IACvBA,EAAKkD,KAAK,kBAAmBG,EAErC,GAyBEG,EAAmB5E,GAAY8D,IACjC,MAAMe,EAAc,KAChBf,EAAIgB,WAAW9E,EAAOgB,UAAU+D,eAIpC,OAFA/E,EAAOgF,GAAG,aAAcH,GACxBA,IACO,KACH7E,EAAOiF,IAAI,aAAcJ,KA2B7BtF,EAAS0C,IAAI,SAAWjC,IA5MT,CAACA,KAEhBkF,EADuBlF,EAAOC,QAAQkF,UACvB,6BAA8B,CACzCC,UAAW,UACXC,SAAS,KAyMTC,CAAWtF,GA1DL,CAACA,IACXA,EAAOgF,GAAG,UAAW,KACjBhF,EAAOuF,OAAOC,cAAc,IAAKhB,EAAmB,UACpDxE,EAAOyF,WAAWD,cAAc,IAAKhB,EAAmB,UAwDxDkB,CAAM1F,GA7EK,CAACA,IAChBA,EAAO2F,WAAW,YAAa,KAC3B7C,EAAK9C,MA4EL4F,CAAW5F,GA3BF,CAACA,IACd,MAAM6F,EAAW,IAAM7F,EAAO8F,YAAY,aAC1C9F,EAAO+F,GAAGC,SAASC,gBAAgB,SAAU,CACzCC,KAAM,WACNC,QAAS,SACTN,WACAO,QAAUC,IACN,MAAMC,EAAwBtG,EAAOgB,UAAUuF,0BAA0B,gBAAiBF,EAAUG,WAAWC,OACzGC,EAAwB9B,EAAgB5E,EAAhB4E,CAAwByB,GACtD,MAAO,KACHC,IACAI,QAIZ1G,EAAO+F,GAAGC,SAASW,YAAY,SAAU,CACrCT,KAAM,WACNxC,KAAM,YACNmC,WACAO,QAASxB,EAAgB5E,MASzBmF,CAASnF,GACTA,EAAOgF,GAAG,UAAW,KAvDL,CAAChF,IACrBA,EAAOwC,UAAU2C,SAAS,cAAe,CACrCyB,OAAQ,IACRC,SAAU1G,EACVmB,OAAQ,MACRwF,OAAO,EACPC,MAAM,EACNC,WAAY,CACRrF,GAAI,UAERsF,QAAS,CAAC7F,EAAM8F,EAAMC,IACX1G,EAAcW,MA6CrBgG,CAAgBpH,MAY/B,CAxOD,E,wBCEA,EAAQ,M","sources":["webpack://@plone/mockup/./node_modules/tinymce/plugins/anchor/plugin.js","webpack://@plone/mockup/./node_modules/tinymce/plugins/anchor/index.js"],"sourcesContent":["/**\n * TinyMCE version 7.9.1 (2025-05-29)\n */\n\n(function () {\n    'use strict';\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.dom.RangeUtils');\n\n    var global = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    const option = (name) => (editor) => editor.options.get(name);\n    const register$2 = (editor) => {\n        const registerOption = editor.options.register;\n        registerOption('allow_html_in_named_anchor', {\n            processor: 'boolean',\n            default: false\n        });\n    };\n    const allowHtmlInNamedAnchor = option('allow_html_in_named_anchor');\n\n    const namedAnchorSelector = 'a:not([href])';\n    const isEmptyString = (str) => !str;\n    const getIdFromAnchor = (elm) => {\n        const id = elm.getAttribute('id') || elm.getAttribute('name');\n        return id || '';\n    };\n    const isAnchor = (elm) => elm.nodeName.toLowerCase() === 'a';\n    const isNamedAnchor = (elm) => isAnchor(elm) && !elm.getAttribute('href') && getIdFromAnchor(elm) !== '';\n    const isEmptyNamedAnchor = (elm) => isNamedAnchor(elm) && !elm.firstChild;\n\n    const removeEmptyNamedAnchorsInSelection = (editor) => {\n        const dom = editor.dom;\n        global$1(dom).walk(editor.selection.getRng(), (nodes) => {\n            global.each(nodes, (node) => {\n                if (isEmptyNamedAnchor(node)) {\n                    dom.remove(node, false);\n                }\n            });\n        });\n    };\n    const isValidId = (id) => \n    // Follows HTML4 rules: https://www.w3.org/TR/html401/types.html#type-id\n    /^[A-Za-z][A-Za-z0-9\\-:._]*$/.test(id);\n    const getNamedAnchor = (editor) => editor.dom.getParent(editor.selection.getStart(), namedAnchorSelector);\n    const getId = (editor) => {\n        const anchor = getNamedAnchor(editor);\n        if (anchor) {\n            return getIdFromAnchor(anchor);\n        }\n        else {\n            return '';\n        }\n    };\n    const createAnchor = (editor, id) => {\n        editor.undoManager.transact(() => {\n            if (!allowHtmlInNamedAnchor(editor)) {\n                editor.selection.collapse(true);\n            }\n            if (editor.selection.isCollapsed()) {\n                editor.insertContent(editor.dom.createHTML('a', { id }));\n            }\n            else {\n                // Remove any empty named anchors in the selection as they cannot be removed by the formatter since they are cef\n                removeEmptyNamedAnchorsInSelection(editor);\n                // Format is set up to truncate any partially selected named anchors so that they are not completely removed\n                editor.formatter.remove('namedAnchor', undefined, undefined, true);\n                // Insert new anchor using the formatter - will wrap selected content in anchor\n                editor.formatter.apply('namedAnchor', { value: id });\n                // Need to add visual classes to anchors if required\n                editor.addVisual();\n            }\n        });\n    };\n    const updateAnchor = (editor, id, anchorElement) => {\n        anchorElement.removeAttribute('name');\n        anchorElement.id = id;\n        editor.addVisual(); // Need to add visual classes to anchors if required\n        editor.undoManager.add();\n    };\n    const insert = (editor, id) => {\n        const anchor = getNamedAnchor(editor);\n        if (anchor) {\n            updateAnchor(editor, id, anchor);\n        }\n        else {\n            createAnchor(editor, id);\n        }\n        editor.focus();\n    };\n\n    const insertAnchor = (editor, newId) => {\n        if (!isValidId(newId)) {\n            editor.windowManager.alert('ID should start with a letter, followed only by letters, numbers, dashes, dots, colons or underscores.');\n            return false;\n        }\n        else {\n            insert(editor, newId);\n            return true;\n        }\n    };\n    const open = (editor) => {\n        const currentId = getId(editor);\n        editor.windowManager.open({\n            title: 'Anchor',\n            size: 'normal',\n            body: {\n                type: 'panel',\n                items: [\n                    {\n                        name: 'id',\n                        type: 'input',\n                        label: 'ID',\n                        placeholder: 'example'\n                    }\n                ]\n            },\n            buttons: [\n                {\n                    type: 'cancel',\n                    name: 'cancel',\n                    text: 'Cancel'\n                },\n                {\n                    type: 'submit',\n                    name: 'save',\n                    text: 'Save',\n                    primary: true\n                }\n            ],\n            initialData: {\n                id: currentId\n            },\n            onSubmit: (api) => {\n                if (insertAnchor(editor, api.getData().id)) { // TODO we need a better way to do validation\n                    api.close();\n                }\n            }\n        });\n    };\n\n    const register$1 = (editor) => {\n        editor.addCommand('mceAnchor', () => {\n            open(editor);\n        });\n    };\n\n    // Note: node.firstChild check is for the 'allow_html_in_named_anchor' setting\n    // Only want to add contenteditable attributes if there is no text within the anchor\n    const isNamedAnchorNode = (node) => isEmptyString(node.attr('href')) && !isEmptyString(node.attr('id') || node.attr('name'));\n    const isEmptyNamedAnchorNode = (node) => isNamedAnchorNode(node) && !node.firstChild;\n    const setContentEditable = (state) => (nodes) => {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (isEmptyNamedAnchorNode(node)) {\n                node.attr('contenteditable', state);\n            }\n        }\n    };\n    const setup = (editor) => {\n        editor.on('PreInit', () => {\n            editor.parser.addNodeFilter('a', setContentEditable('false'));\n            editor.serializer.addNodeFilter('a', setContentEditable(null));\n        });\n    };\n\n    const registerFormats = (editor) => {\n        editor.formatter.register('namedAnchor', {\n            inline: 'a',\n            selector: namedAnchorSelector,\n            remove: 'all',\n            split: true,\n            deep: true,\n            attributes: {\n                id: '%value'\n            },\n            onmatch: (node, _fmt, _itemName) => {\n                return isNamedAnchor(node);\n            }\n        });\n    };\n\n    const onSetupEditable = (editor) => (api) => {\n        const nodeChanged = () => {\n            api.setEnabled(editor.selection.isEditable());\n        };\n        editor.on('NodeChange', nodeChanged);\n        nodeChanged();\n        return () => {\n            editor.off('NodeChange', nodeChanged);\n        };\n    };\n    const register = (editor) => {\n        const onAction = () => editor.execCommand('mceAnchor');\n        editor.ui.registry.addToggleButton('anchor', {\n            icon: 'bookmark',\n            tooltip: 'Anchor',\n            onAction,\n            onSetup: (buttonApi) => {\n                const unbindSelectorChanged = editor.selection.selectorChangedWithUnbind('a:not([href])', buttonApi.setActive).unbind;\n                const unbindEditableChanged = onSetupEditable(editor)(buttonApi);\n                return () => {\n                    unbindSelectorChanged();\n                    unbindEditableChanged();\n                };\n            }\n        });\n        editor.ui.registry.addMenuItem('anchor', {\n            icon: 'bookmark',\n            text: 'Anchor...',\n            onAction,\n            onSetup: onSetupEditable(editor)\n        });\n    };\n\n    var Plugin = () => {\n        global$2.add('anchor', (editor) => {\n            register$2(editor);\n            setup(editor);\n            register$1(editor);\n            register(editor);\n            editor.on('PreInit', () => {\n                registerFormats(editor);\n            });\n        });\n    };\n\n    Plugin();\n    /** *****\n     * DO NOT EXPORT ANYTHING\n     *\n     * IF YOU DO ROLLUP WILL LEAVE A GLOBAL ON THE PAGE\n     *******/\n\n})();\n","// Exports the \"anchor\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/anchor')\n//   ES2015:\n//     import 'tinymce/plugins/anchor'\nrequire('./plugin.js');"],"names":["global$2","tinymce","util","Tools","resolve","global$1","global","allowHtmlInNamedAnchor","name","editor","options","get","namedAnchorSelector","isEmptyString","str","getIdFromAnchor","elm","getAttribute","isNamedAnchor","nodeName","toLowerCase","isAnchor","removeEmptyNamedAnchorsInSelection","dom","walk","selection","getRng","nodes","each","node","firstChild","remove","getNamedAnchor","getParent","getStart","insert","id","anchor","anchorElement","removeAttribute","addVisual","undoManager","add","updateAnchor","transact","collapse","isCollapsed","insertContent","createHTML","formatter","undefined","apply","value","createAnchor","focus","open","currentId","getId","windowManager","title","size","body","type","items","label","placeholder","buttons","text","primary","initialData","onSubmit","api","newId","test","alert","insertAnchor","getData","close","isEmptyNamedAnchorNode","attr","isNamedAnchorNode","setContentEditable","state","i","length","onSetupEditable","nodeChanged","setEnabled","isEditable","on","off","registerOption","register","processor","default","register$2","parser","addNodeFilter","serializer","setup","addCommand","register$1","onAction","execCommand","ui","registry","addToggleButton","icon","tooltip","onSetup","buttonApi","unbindSelectorChanged","selectorChangedWithUnbind","setActive","unbind","unbindEditableChanged","addMenuItem","inline","selector","split","deep","attributes","onmatch","_fmt","_itemName","registerFormats"],"sourceRoot":""}