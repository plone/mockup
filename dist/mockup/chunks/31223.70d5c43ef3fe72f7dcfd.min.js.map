{"version":3,"file":"chunks/31223.70d5c43ef3fe72f7dcfd.min.js","mappings":"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","sources":["webpack://@plone/mockup/./src/pat/tinymce/js/template.js"],"sourcesContent":["/**\n * template plugin backport from TinyMCE version 6.8.3 (2024-02-08)\n */\nimport tinymce from \"tinymce/tinymce\";\n\nconst hasProto = (v, constructor, predicate) => {\n    let _a;\n    if (predicate(v, constructor.prototype)) {\n        return true;\n    } else {\n        return (\n            ((_a = v.constructor) === null || _a === void 0 ? void 0 : _a.name) ===\n            constructor.name\n        );\n    }\n};\nconst typeOf = (x) => {\n    const t = typeof x;\n    if (x === null) {\n        return \"null\";\n    } else if (t === \"object\" && Array.isArray(x)) {\n        return \"array\";\n    } else if (\n        t === \"object\" &&\n        // eslint-disable-next-line no-prototype-builtins\n        hasProto(x, String, (o, proto) => proto.isPrototypeOf(o))\n    ) {\n        return \"string\";\n    } else {\n        return t;\n    }\n};\nconst isType = (type) => (value) => typeOf(value) === type;\nconst isSimpleType = (type) => (value) => typeof value === type;\nconst isString = isType(\"string\");\nconst isObject = isType(\"object\");\nconst isArray = isType(\"array\");\nconst isNullable = (a) => a === null || a === undefined;\nconst isNonNullable = (a) => !isNullable(a);\nconst isFunction = isSimpleType(\"function\");\nconst isArrayOf = (value, pred) => {\n    if (isArray(value)) {\n        for (let i = 0, len = value.length; i < len; ++i) {\n            if (!pred(value[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n};\n\nconst constant = (value) => {\n    return () => {\n        return value;\n    };\n};\nfunction curry(fn, ...initialArgs) {\n    return (...restArgs) => {\n        const all = initialArgs.concat(restArgs);\n        return fn.apply(null, all);\n    };\n}\nconst never = constant(false);\n\nconst escape = (text) => text.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n\nconst global$2 = tinymce.util.Tools;\n\nconst option = (name) => (editor) => editor.options.get(name);\nconst register$2 = (editor) => {\n    const registerOption = editor.options.register;\n    registerOption(\"template_cdate_classes\", {\n        processor: \"string\",\n        default: \"cdate\",\n    });\n    registerOption(\"template_mdate_classes\", {\n        processor: \"string\",\n        default: \"mdate\",\n    });\n    registerOption(\"template_selected_content_classes\", {\n        processor: \"string\",\n        default: \"selcontent\",\n    });\n    registerOption(\"template_preview_replace_values\", { processor: \"object\" });\n    registerOption(\"template_replace_values\", { processor: \"object\" });\n    registerOption(\"templates\", {\n        processor: (value) =>\n            isString(value) || isArrayOf(value, isObject) || isFunction(value),\n        default: [],\n    });\n    registerOption(\"template_cdate_format\", {\n        processor: \"string\",\n        default: editor.translate(\"%Y-%m-%d\"),\n    });\n    registerOption(\"template_mdate_format\", {\n        processor: \"string\",\n        default: editor.translate(\"%Y-%m-%d\"),\n    });\n};\nconst getCreationDateClasses = option(\"template_cdate_classes\");\nconst getModificationDateClasses = option(\"template_mdate_classes\");\nconst getSelectedContentClasses = option(\"template_selected_content_classes\");\nconst getPreviewReplaceValues = option(\"template_preview_replace_values\");\nconst getTemplateReplaceValues = option(\"template_replace_values\");\nconst getTemplates = option(\"templates\");\nconst getCdateFormat = option(\"template_cdate_format\");\nconst getMdateFormat = option(\"template_mdate_format\");\nconst getContentStyle = option(\"content_style\");\nconst shouldUseContentCssCors = option(\"content_css_cors\");\nconst getBodyClass = option(\"body_class\");\n\nconst addZeros = (value, len) => {\n    value = \"\" + value;\n    if (value.length < len) {\n        for (let i = 0; i < len - value.length; i++) {\n            value = \"0\" + value;\n        }\n    }\n    return value;\n};\nconst getDateTime = (editor, fmt, date = new Date()) => {\n    const daysShort = \"Sun Mon Tue Wed Thu Fri Sat Sun\".split(\" \");\n    const daysLong =\n        \"Sunday Monday Tuesday Wednesday Thursday Friday Saturday Sunday\".split(\" \");\n    const monthsShort = \"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\".split(\" \");\n    const monthsLong =\n        \"January February March April May June July August September October November December\".split(\n            \" \",\n        );\n    fmt = fmt.replace(\"%D\", \"%m/%d/%Y\");\n    fmt = fmt.replace(\"%r\", \"%I:%M:%S %p\");\n    fmt = fmt.replace(\"%Y\", \"\" + date.getFullYear());\n    fmt = fmt.replace(\"%y\", \"\" + date.getYear());\n    fmt = fmt.replace(\"%m\", addZeros(date.getMonth() + 1, 2));\n    fmt = fmt.replace(\"%d\", addZeros(date.getDate(), 2));\n    fmt = fmt.replace(\"%H\", \"\" + addZeros(date.getHours(), 2));\n    fmt = fmt.replace(\"%M\", \"\" + addZeros(date.getMinutes(), 2));\n    fmt = fmt.replace(\"%S\", \"\" + addZeros(date.getSeconds(), 2));\n    fmt = fmt.replace(\"%I\", \"\" + (((date.getHours() + 11) % 12) + 1));\n    fmt = fmt.replace(\"%p\", \"\" + (date.getHours() < 12 ? \"AM\" : \"PM\"));\n    fmt = fmt.replace(\"%B\", \"\" + editor.translate(monthsLong[date.getMonth()]));\n    fmt = fmt.replace(\"%b\", \"\" + editor.translate(monthsShort[date.getMonth()]));\n    fmt = fmt.replace(\"%A\", \"\" + editor.translate(daysLong[date.getDay()]));\n    fmt = fmt.replace(\"%a\", \"\" + editor.translate(daysShort[date.getDay()]));\n    fmt = fmt.replace(\"%%\", \"%\");\n    return fmt;\n};\n\nclass Optional {\n    constructor(tag, value) {\n        this.tag = tag;\n        this.value = value;\n    }\n    static some(value) {\n        return new Optional(true, value);\n    }\n    static none() {\n        return Optional.singletonNone;\n    }\n    fold(onNone, onSome) {\n        if (this.tag) {\n            return onSome(this.value);\n        } else {\n            return onNone();\n        }\n    }\n    isSome() {\n        return this.tag;\n    }\n    isNone() {\n        return !this.tag;\n    }\n    map(mapper) {\n        if (this.tag) {\n            return Optional.some(mapper(this.value));\n        } else {\n            return Optional.none();\n        }\n    }\n    bind(binder) {\n        if (this.tag) {\n            return binder(this.value);\n        } else {\n            return Optional.none();\n        }\n    }\n    exists(predicate) {\n        return this.tag && predicate(this.value);\n    }\n    forall(predicate) {\n        return !this.tag || predicate(this.value);\n    }\n    filter(predicate) {\n        if (!this.tag || predicate(this.value)) {\n            return this;\n        } else {\n            return Optional.none();\n        }\n    }\n    getOr(replacement) {\n        return this.tag ? this.value : replacement;\n    }\n    or(replacement) {\n        return this.tag ? this : replacement;\n    }\n    getOrThunk(thunk) {\n        return this.tag ? this.value : thunk();\n    }\n    orThunk(thunk) {\n        return this.tag ? this : thunk();\n    }\n    getOrDie(message) {\n        if (!this.tag) {\n            throw new Error(\n                message !== null && message !== void 0\n                    ? message\n                    : \"Called getOrDie on None\",\n            );\n        } else {\n            return this.value;\n        }\n    }\n    static from(value) {\n        return isNonNullable(value) ? Optional.some(value) : Optional.none();\n    }\n    getOrNull() {\n        return this.tag ? this.value : null;\n    }\n    getOrUndefined() {\n        return this.value;\n    }\n    each(worker) {\n        if (this.tag) {\n            worker(this.value);\n        }\n    }\n    toArray() {\n        return this.tag ? [this.value] : [];\n    }\n    toString() {\n        return this.tag ? `some(${this.value})` : \"none()\";\n    }\n}\nOptional.singletonNone = new Optional(false);\n\nconst exists = (xs, pred) => {\n    for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        if (pred(x, i)) {\n            return true;\n        }\n    }\n    return false;\n};\nconst map = (xs, f) => {\n    const len = xs.length;\n    const r = new Array(len);\n    for (let i = 0; i < len; i++) {\n        const x = xs[i];\n        r[i] = f(x, i);\n    }\n    return r;\n};\nconst findUntil = (xs, pred, until) => {\n    for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        if (pred(x, i)) {\n            return Optional.some(x);\n        } else if (until(x, i)) {\n            break;\n        }\n    }\n    return Optional.none();\n};\nconst find = (xs, pred) => {\n    return findUntil(xs, pred, never);\n};\n\nconst hasOwnProperty = Object.hasOwnProperty;\nconst get = (obj, key) => {\n    return has(obj, key) ? Optional.from(obj[key]) : Optional.none();\n};\nconst has = (obj, key) => hasOwnProperty.call(obj, key);\n\nconst global$1 = tinymce.html.Serializer;\n\nconst entitiesAttr = {\n    '\"': \"&quot;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    \"&\": \"&amp;\",\n    \"'\": \"&#039;\",\n};\nconst htmlEscape = (html) =>\n    html.replace(/[\"'<>&]/g, (match) => get(entitiesAttr, match).getOr(match));\nconst hasAnyClasses = (dom, n, classes) =>\n    exists(classes.split(/\\s+/), (c) => dom.hasClass(n, c));\nconst parseAndSerialize = (editor, html) =>\n    global$1({ validate: true }, editor.schema).serialize(\n        editor.parser.parse(html, { insert: true }),\n    );\n\nconst createTemplateList = (editor, callback) => {\n    return () => {\n        const templateList = getTemplates(editor);\n        if (isFunction(templateList)) {\n            templateList(callback);\n        } else if (isString(templateList)) {\n            fetch(templateList).then((res) => {\n                if (res.ok) {\n                    res.json().then(callback);\n                }\n            });\n        } else {\n            callback(templateList);\n        }\n    };\n};\nconst replaceTemplateValues = (html, templateValues) => {\n    global$2.each(templateValues, (v, k) => {\n        if (isFunction(v)) {\n            v = v(k);\n        }\n        html = html.replace(new RegExp(\"\\\\{\\\\$\" + escape(k) + \"\\\\}\", \"g\"), v);\n    });\n    return html;\n};\nconst replaceVals = (editor, scope) => {\n    const dom = editor.dom,\n        vl = getTemplateReplaceValues(editor);\n    global$2.each(dom.select(\"*\", scope), (e) => {\n        global$2.each(vl, (v, k) => {\n            if (dom.hasClass(e, k)) {\n                if (isFunction(v)) {\n                    v(e);\n                }\n            }\n        });\n    });\n};\nconst insertTemplate = (editor, _ui, html) => {\n    const dom = editor.dom;\n    const sel = editor.selection.getContent();\n    html = replaceTemplateValues(html, getTemplateReplaceValues(editor));\n    let el = dom.create(\"div\", {}, parseAndSerialize(editor, html));\n    const n = dom.select(\".mceTmpl\", el);\n    if (n && n.length > 0) {\n        el = dom.create(\"div\");\n        el.appendChild(n[0].cloneNode(true));\n    }\n    global$2.each(dom.select(\"*\", el), (n) => {\n        if (hasAnyClasses(dom, n, getCreationDateClasses(editor))) {\n            n.innerHTML = getDateTime(editor, getCdateFormat(editor));\n        }\n        if (hasAnyClasses(dom, n, getModificationDateClasses(editor))) {\n            n.innerHTML = getDateTime(editor, getMdateFormat(editor));\n        }\n        if (hasAnyClasses(dom, n, getSelectedContentClasses(editor))) {\n            n.innerHTML = sel;\n        }\n    });\n    replaceVals(editor, el);\n    editor.execCommand(\"mceInsertContent\", false, el.innerHTML);\n    editor.addVisual();\n};\n\nconst global = tinymce.Env;\n\nconst getPreviewContent = (editor, html) => {\n    let _a;\n    let previewHtml = parseAndSerialize(editor, html);\n    if (html.indexOf(\"<html>\") === -1) {\n        let contentCssEntries = \"\";\n        const contentStyle =\n            (_a = getContentStyle(editor)) !== null && _a !== void 0 ? _a : \"\";\n        const cors = shouldUseContentCssCors(editor) ? ' crossorigin=\"anonymous\"' : \"\";\n        global$2.each(editor.contentCSS, (url) => {\n            contentCssEntries +=\n                '<link type=\"text/css\" rel=\"stylesheet\" href=\"' +\n                editor.documentBaseURI.toAbsolute(url) +\n                '\"' +\n                cors +\n                \">\";\n        });\n        if (contentStyle) {\n            contentCssEntries += '<style type=\"text/css\">' + contentStyle + \"</style>\";\n        }\n        const bodyClass = getBodyClass(editor);\n        const encode = editor.dom.encode;\n        const isMetaKeyPressed =\n            global.os.isMacOS() || global.os.isiOS()\n                ? \"e.metaKey\"\n                : \"e.ctrlKey && !e.altKey\";\n        const preventClicksOnLinksScript =\n            \"<script>\" +\n            'document.addEventListener && document.addEventListener(\"click\", function(e) {' +\n            \"for (let elm = e.target; elm; elm = elm.parentNode) {\" +\n            'if (elm.nodeName === \"A\" && !(' +\n            isMetaKeyPressed +\n            \")) {\" +\n            \"e.preventDefault();\" +\n            \"}\" +\n            \"}\" +\n            \"}, false);\" +\n            \"</script> \";\n        const directionality = editor.getBody().dir;\n        const dirAttr = directionality ? ' dir=\"' + encode(directionality) + '\"' : \"\";\n        previewHtml =\n            \"<!DOCTYPE html>\" +\n            \"<html>\" +\n            \"<head>\" +\n            '<base href=\"' +\n            encode(editor.documentBaseURI.getURI()) +\n            '\">' +\n            contentCssEntries +\n            preventClicksOnLinksScript +\n            \"</head>\" +\n            '<body class=\"' +\n            encode(bodyClass) +\n            '\"' +\n            dirAttr +\n            \">\" +\n            previewHtml +\n            \"</body>\" +\n            \"</html>\";\n    }\n    return replaceTemplateValues(previewHtml, getPreviewReplaceValues(editor));\n};\nconst open = (editor, templateList) => {\n    const createTemplates = () => {\n        if (!templateList || templateList.length === 0) {\n            const message = editor.translate(\"No templates defined.\");\n            editor.notificationManager.open({\n                text: message,\n                type: \"info\",\n            });\n            return Optional.none();\n        }\n        return Optional.from(\n            global$2.map(templateList, (template, index) => {\n                const isUrlTemplate = (t) => t.url !== undefined;\n                return {\n                    selected: index === 0,\n                    text: template.title,\n                    value: {\n                        url: isUrlTemplate(template)\n                            ? Optional.from(template.url)\n                            : Optional.none(),\n                        content: !isUrlTemplate(template)\n                            ? Optional.from(template.content)\n                            : Optional.none(),\n                        description: template.description,\n                    },\n                };\n            }),\n        );\n    };\n    const createSelectBoxItems = (templates) =>\n        map(templates, (t) => ({\n            text: t.text,\n            value: t.text,\n        }));\n    const findTemplate = (templates, templateTitle) =>\n        find(templates, (t) => t.text === templateTitle);\n    const loadFailedAlert = (api) => {\n        editor.windowManager.alert(\"Could not load the specified template.\", () =>\n            api.focus(\"template\"),\n        );\n    };\n    const getTemplateContent = (t) =>\n        t.value.url.fold(\n            () => Promise.resolve(t.value.content.getOr(\"\")),\n            (url) => fetch(url).then((res) => (res.ok ? res.text() : Promise.reject())),\n        );\n    const onChange = (templates, updateDialog) => (api, change) => {\n        if (change.name === \"template\") {\n            const newTemplateTitle = api.getData().template;\n            findTemplate(templates, newTemplateTitle).each((t) => {\n                api.block(\"Loading...\");\n                getTemplateContent(t)\n                    .then((previewHtml) => {\n                        updateDialog(api, t, previewHtml);\n                    })\n                    .catch(() => {\n                        updateDialog(api, t, \"\");\n                        api.setEnabled(\"save\", false);\n                        loadFailedAlert(api);\n                    });\n            });\n        }\n    };\n    const onSubmit = (templates) => (api) => {\n        const data = api.getData();\n        findTemplate(templates, data.template).each((t) => {\n            getTemplateContent(t)\n                .then((previewHtml) => {\n                    editor.execCommand(\"mceInsertTemplate\", false, previewHtml);\n                    api.close();\n                })\n                .catch(() => {\n                    api.setEnabled(\"save\", false);\n                    loadFailedAlert(api);\n                });\n        });\n    };\n    const openDialog = (templates) => {\n        const selectBoxItems = createSelectBoxItems(templates);\n        const buildDialogSpec = (bodyItems, initialData) => ({\n            title: \"Insert Template\",\n            size: \"large\",\n            body: {\n                type: \"panel\",\n                items: bodyItems,\n            },\n            initialData,\n            buttons: [\n                {\n                    type: \"cancel\",\n                    name: \"cancel\",\n                    text: \"Cancel\",\n                },\n                {\n                    type: \"submit\",\n                    name: \"save\",\n                    text: \"Save\",\n                    primary: true,\n                },\n            ],\n            onSubmit: onSubmit(templates),\n            onChange: onChange(templates, updateDialog),\n        });\n        const updateDialog = (dialogApi, template, previewHtml) => {\n            const content = getPreviewContent(editor, previewHtml);\n            const bodyItems = [\n                {\n                    type: \"listbox\",\n                    name: \"template\",\n                    label: \"Templates\",\n                    items: selectBoxItems,\n                },\n                {\n                    type: \"htmlpanel\",\n                    html: `<p aria-live=\"polite\">${htmlEscape(template.value.description)}</p>`,\n                },\n                {\n                    label: \"Preview\",\n                    type: \"iframe\",\n                    name: \"preview\",\n                    sandboxed: false,\n                    transparent: false,\n                },\n            ];\n            const initialData = {\n                template: template.text,\n                preview: content,\n            };\n            dialogApi.unblock();\n            dialogApi.redial(buildDialogSpec(bodyItems, initialData));\n            dialogApi.focus(\"template\");\n        };\n        const dialogApi = editor.windowManager.open(\n            buildDialogSpec([], {\n                template: \"\",\n                preview: \"\",\n            }),\n        );\n        dialogApi.block(\"Loading...\");\n        getTemplateContent(templates[0])\n            .then((previewHtml) => {\n                updateDialog(dialogApi, templates[0], previewHtml);\n            })\n            .catch(() => {\n                updateDialog(dialogApi, templates[0], \"\");\n                dialogApi.setEnabled(\"save\", false);\n                loadFailedAlert(dialogApi);\n            });\n    };\n    const optTemplates = createTemplates();\n    optTemplates.each(openDialog);\n};\n\nconst showDialog = (editor) => (templates) => {\n    open(editor, templates);\n};\nconst register$1 = (editor) => {\n    editor.addCommand(\"mceInsertTemplate\", curry(insertTemplate, editor));\n    editor.addCommand(\"mceTemplate\", createTemplateList(editor, showDialog(editor)));\n};\n\nconst setup = (editor) => {\n    editor.on(\"PreProcess\", (o) => {\n        const dom = editor.dom,\n            dateFormat = getMdateFormat(editor);\n        global$2.each(dom.select(\"div\", o.node), (e) => {\n            if (dom.hasClass(e, \"mceTmpl\")) {\n                global$2.each(dom.select(\"*\", e), (e) => {\n                    if (hasAnyClasses(dom, e, getModificationDateClasses(editor))) {\n                        e.innerHTML = getDateTime(editor, dateFormat);\n                    }\n                });\n                replaceVals(editor, e);\n            }\n        });\n    });\n};\n\nconst onSetupEditable = (editor) => (api) => {\n    const nodeChanged = () => {\n        api.setEnabled(editor.selection.isEditable());\n    };\n    editor.on(\"NodeChange\", nodeChanged);\n    nodeChanged();\n    return () => {\n        editor.off(\"NodeChange\", nodeChanged);\n    };\n};\nconst register = (editor) => {\n    const onAction = () => editor.execCommand(\"mceTemplate\");\n    editor.ui.registry.addButton(\"template\", {\n        icon: \"template\",\n        tooltip: \"Insert template\",\n        onSetup: onSetupEditable(editor),\n        onAction,\n    });\n    editor.ui.registry.addMenuItem(\"template\", {\n        icon: \"template\",\n        text: \"Insert template...\",\n        onSetup: onSetupEditable(editor),\n        onAction,\n    });\n};\n\nconst TemplatePlugin = () => {\n    // eslint-disable-next-line no-unused-vars\n    tinymce.PluginManager.add(\"template\", (editor, url) => {\n        register$2(editor);\n        register(editor);\n        register$1(editor);\n        setup(editor);\n    });\n};\n\nexport default TemplatePlugin;\n"],"names":["isType","type","value","x","t","Array","isArray","hasProto","v","constructor","predicate","_a","prototype","name","String","o","proto","isPrototypeOf","typeOf","isString","isObject","isFunction","never","global$2","tinymce","Tools","option","editor","options","get","register$2","registerOption","register","processor","default","isArrayOf","pred","i","len","length","translate","getCreationDateClasses","getModificationDateClasses","getSelectedContentClasses","getPreviewReplaceValues","getTemplateReplaceValues","getTemplates","getCdateFormat","getMdateFormat","getContentStyle","shouldUseContentCssCors","getBodyClass","addZeros","getDateTime","fmt","date","Date","daysShort","split","daysLong","monthsShort","monthsLong","replace","getFullYear","getYear","getMonth","getDate","getHours","getMinutes","getSeconds","getDay","Optional","tag","this","some","none","singletonNone","fold","onNone","onSome","isSome","isNone","map","mapper","bind","binder","exists","forall","filter","getOr","replacement","or","getOrThunk","thunk","orThunk","getOrDie","message","Error","from","a","isNullable","getOrNull","getOrUndefined","each","worker","toArray","toString","find","xs","findUntil","until","hasOwnProperty","Object","has","obj","key","call","global$1","Serializer","entitiesAttr","htmlEscape","html","match","hasAnyClasses","dom","n","classes","c","hasClass","parseAndSerialize","validate","schema","serialize","parser","parse","insert","replaceTemplateValues","templateValues","k","RegExp","replaceVals","scope","vl","select","e","insertTemplate","_ui","sel","selection","getContent","el","create","appendChild","cloneNode","innerHTML","execCommand","addVisual","global","open","templateList","createSelectBoxItems","templates","f","r","text","findTemplate","templateTitle","loadFailedAlert","api","windowManager","alert","focus","getTemplateContent","url","Promise","resolve","content","fetch","then","res","ok","reject","onChange","updateDialog","change","newTemplateTitle","getData","template","block","previewHtml","catch","setEnabled","onSubmit","data","close","createTemplates","notificationManager","index","isUrlTemplate","undefined","selected","title","description","selectBoxItems","buildDialogSpec","bodyItems","initialData","size","body","items","buttons","primary","dialogApi","getPreviewContent","indexOf","contentCssEntries","contentStyle","cors","contentCSS","documentBaseURI","toAbsolute","bodyClass","encode","preventClicksOnLinksScript","os","isMacOS","isiOS","directionality","getBody","dir","dirAttr","getURI","label","sandboxed","transparent","preview","unblock","redial","register$1","addCommand","fn","initialArgs","restArgs","all","concat","apply","curry","createTemplateList","callback","json","showDialog","onSetupEditable","nodeChanged","isEditable","on","off","TemplatePlugin","add","onAction","ui","registry","addButton","icon","tooltip","onSetup","addMenuItem","dateFormat","node","setup"],"sourceRoot":""}