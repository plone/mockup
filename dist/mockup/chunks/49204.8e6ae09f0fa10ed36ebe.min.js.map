{"version":3,"file":"chunks/49204.8e6ae09f0fa10ed36ebe.min.js","mappings":"+GAMA,EAAQ,M,oBCFR,WACI,aAgBA,IAAIA,EAASC,QAAQC,KAAKC,MAAMC,QAAQ,yBAExC,MAIMC,EAAqB,CAACC,EAAQC,EAAWC,KAC/BF,EAAOG,IACfC,YAAYJ,EAAOK,UAAW,oBAClCH,EAAaI,KAAKJ,EAAaK,OAPV,EAACP,EAAQQ,KAC9BR,EAAOS,SAAS,eAAgB,CAAED,WAOlCE,CAAiBV,EAAQE,EAAaK,QAiBpCI,GARUC,EAQkB,6BARRZ,GAAWA,EAAOa,QAAQN,IAAIK,IAAzC,IAACA,EAUhB,MAcME,EAAoB,CAACd,EAAQE,IAAkBa,IACjDA,EAAIC,UAAUd,EAAaK,OAC3B,MAAMU,EAAuBC,GAAMH,EAAIC,UAAUE,EAAEV,OAEnD,OADAR,EAAOmB,GAAG,eAAgBF,GACnB,IAAMjB,EAAOoB,IAAI,eAAgBH,IAqBxCvB,EAAO2B,IAAI,eAAgB,CAACrB,EAAQC,KAhDrB,CAACD,KAEhBsB,EADuBtB,EAAOa,QAAQU,UACvB,6BAA8B,CACzCC,UAAW,UACXC,SAAS,KA6CTC,CAAW1B,GACX,MAAME,EApFD,CAACyB,IACV,IAAIC,EAAQD,EAOZ,MAAO,CACHpB,IAPQ,IACDqB,EAOPtB,IALSuB,IACTD,EAAQC,KA8EaC,EAAK,GAzDf,EAAC9B,EAAQC,EAAWC,KACnCF,EAAO+B,WAAW,kBAAmB,KACjChC,EAAmBC,EAAQC,EAAWC,MAwDtC8B,CAAWhC,EAAQC,EAAWC,GAtBrB,EAACF,EAAQE,KACtB,MAAM+B,EAAW,IAAMjC,EAAOkC,YAAY,mBAC1ClC,EAAOmC,GAAGC,SAASC,gBAAgB,eAAgB,CAC/CC,KAAM,eACNC,QAAS,cACTN,WACAO,QAAS1B,EAAkBd,EAAQE,GACnCuC,QAAS,QAEbzC,EAAOmC,GAAGC,SAASM,kBAAkB,eAAgB,CACjDC,KAAM,cACNL,KAAM,eACNL,WACAO,QAAS1B,EAAkBd,EAAQE,GACnCuC,QAAS,SASTlB,CAASvB,EAAQE,GA3CX,EAACF,EAAQC,EAAWC,KAE9BF,EAAOmB,GAAG,qCAAuCD,IACzChB,EAAaK,OACbP,EAAOG,IAAIC,YAAYJ,EAAOK,UAAW,mBAA+B,wBAAXa,EAAE0B,QAGvE5C,EAAOmB,GAAG,OAAQ,KACVR,EAAmBX,IACnBD,EAAmBC,EAAQC,EAAWC,MAmC1C2C,CAAM7C,EAAQC,EAAWC,IAWpC,CArGD,E","sources":["webpack://@plone/mockup/./node_modules/tinymce/plugins/visualblocks/index.js","webpack://@plone/mockup/./node_modules/tinymce/plugins/visualblocks/plugin.js"],"sourcesContent":["// Exports the \"visualblocks\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/visualblocks')\n//   ES2015:\n//     import 'tinymce/plugins/visualblocks'\nrequire('./plugin.js');","/**\n * TinyMCE version 7.9.1 (2025-05-29)\n */\n\n(function () {\n    'use strict';\n\n    const Cell = (initial) => {\n        let value = initial;\n        const get = () => {\n            return value;\n        };\n        const set = (v) => {\n            value = v;\n        };\n        return {\n            get,\n            set\n        };\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    const fireVisualBlocks = (editor, state) => {\n        editor.dispatch('VisualBlocks', { state });\n    };\n\n    const toggleVisualBlocks = (editor, pluginUrl, enabledState) => {\n        const dom = editor.dom;\n        dom.toggleClass(editor.getBody(), 'mce-visualblocks');\n        enabledState.set(!enabledState.get());\n        fireVisualBlocks(editor, enabledState.get());\n    };\n\n    const register$2 = (editor, pluginUrl, enabledState) => {\n        editor.addCommand('mceVisualBlocks', () => {\n            toggleVisualBlocks(editor, pluginUrl, enabledState);\n        });\n    };\n\n    const option = (name) => (editor) => editor.options.get(name);\n    const register$1 = (editor) => {\n        const registerOption = editor.options.register;\n        registerOption('visualblocks_default_state', {\n            processor: 'boolean',\n            default: false\n        });\n    };\n    const isEnabledByDefault = option('visualblocks_default_state');\n\n    const setup = (editor, pluginUrl, enabledState) => {\n        // Prevents the visualblocks from being presented in the preview of formats when that is computed\n        editor.on('PreviewFormats AfterPreviewFormats', (e) => {\n            if (enabledState.get()) {\n                editor.dom.toggleClass(editor.getBody(), 'mce-visualblocks', e.type === 'afterpreviewformats');\n            }\n        });\n        editor.on('init', () => {\n            if (isEnabledByDefault(editor)) {\n                toggleVisualBlocks(editor, pluginUrl, enabledState);\n            }\n        });\n    };\n\n    const toggleActiveState = (editor, enabledState) => (api) => {\n        api.setActive(enabledState.get());\n        const editorEventCallback = (e) => api.setActive(e.state);\n        editor.on('VisualBlocks', editorEventCallback);\n        return () => editor.off('VisualBlocks', editorEventCallback);\n    };\n    const register = (editor, enabledState) => {\n        const onAction = () => editor.execCommand('mceVisualBlocks');\n        editor.ui.registry.addToggleButton('visualblocks', {\n            icon: 'visualblocks',\n            tooltip: 'Show blocks',\n            onAction,\n            onSetup: toggleActiveState(editor, enabledState),\n            context: 'any'\n        });\n        editor.ui.registry.addToggleMenuItem('visualblocks', {\n            text: 'Show blocks',\n            icon: 'visualblocks',\n            onAction,\n            onSetup: toggleActiveState(editor, enabledState),\n            context: 'any'\n        });\n    };\n\n    var Plugin = () => {\n        global.add('visualblocks', (editor, pluginUrl) => {\n            register$1(editor);\n            const enabledState = Cell(false);\n            register$2(editor, pluginUrl, enabledState);\n            register(editor, enabledState);\n            setup(editor, pluginUrl, enabledState);\n        });\n    };\n\n    Plugin();\n    /** *****\n     * DO NOT EXPORT ANYTHING\n     *\n     * IF YOU DO ROLLUP WILL LEAVE A GLOBAL ON THE PAGE\n     *******/\n\n})();\n"],"names":["global","tinymce","util","Tools","resolve","toggleVisualBlocks","editor","pluginUrl","enabledState","dom","toggleClass","getBody","set","get","state","dispatch","fireVisualBlocks","isEnabledByDefault","name","options","toggleActiveState","api","setActive","editorEventCallback","e","on","off","add","registerOption","register","processor","default","register$1","initial","value","v","Cell","addCommand","register$2","onAction","execCommand","ui","registry","addToggleButton","icon","tooltip","onSetup","context","addToggleMenuItem","text","type","setup"],"sourceRoot":""}