{"version":3,"file":"chunks/64715.f7b1a05a1b393e845e14.min.js","mappings":"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","sources":["webpack://@plone/mockup/./node_modules/tinymce/plugins/insertdatetime/plugin.js"],"sourcesContent":["/**\n * TinyMCE version 7.2.1 (2024-07-03)\n */\n\n(function () {\n    'use strict';\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    const option = name => editor => editor.options.get(name);\n    const register$2 = editor => {\n      const registerOption = editor.options.register;\n      registerOption('insertdatetime_dateformat', {\n        processor: 'string',\n        default: editor.translate('%Y-%m-%d')\n      });\n      registerOption('insertdatetime_timeformat', {\n        processor: 'string',\n        default: editor.translate('%H:%M:%S')\n      });\n      registerOption('insertdatetime_formats', {\n        processor: 'string[]',\n        default: [\n          '%H:%M:%S',\n          '%Y-%m-%d',\n          '%I:%M:%S %p',\n          '%D'\n        ]\n      });\n      registerOption('insertdatetime_element', {\n        processor: 'boolean',\n        default: false\n      });\n    };\n    const getDateFormat = option('insertdatetime_dateformat');\n    const getTimeFormat = option('insertdatetime_timeformat');\n    const getFormats = option('insertdatetime_formats');\n    const shouldInsertTimeElement = option('insertdatetime_element');\n    const getDefaultDateTime = editor => {\n      const formats = getFormats(editor);\n      return formats.length > 0 ? formats[0] : getTimeFormat(editor);\n    };\n\n    const daysShort = 'Sun Mon Tue Wed Thu Fri Sat Sun'.split(' ');\n    const daysLong = 'Sunday Monday Tuesday Wednesday Thursday Friday Saturday Sunday'.split(' ');\n    const monthsShort = 'Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec'.split(' ');\n    const monthsLong = 'January February March April May June July August September October November December'.split(' ');\n    const addZeros = (value, len) => {\n      value = '' + value;\n      if (value.length < len) {\n        for (let i = 0; i < len - value.length; i++) {\n          value = '0' + value;\n        }\n      }\n      return value;\n    };\n    const getDateTime = (editor, fmt, date = new Date()) => {\n      fmt = fmt.replace('%D', '%m/%d/%Y');\n      fmt = fmt.replace('%r', '%I:%M:%S %p');\n      fmt = fmt.replace('%Y', '' + date.getFullYear());\n      fmt = fmt.replace('%y', '' + date.getYear());\n      fmt = fmt.replace('%m', addZeros(date.getMonth() + 1, 2));\n      fmt = fmt.replace('%d', addZeros(date.getDate(), 2));\n      fmt = fmt.replace('%H', '' + addZeros(date.getHours(), 2));\n      fmt = fmt.replace('%M', '' + addZeros(date.getMinutes(), 2));\n      fmt = fmt.replace('%S', '' + addZeros(date.getSeconds(), 2));\n      fmt = fmt.replace('%I', '' + ((date.getHours() + 11) % 12 + 1));\n      fmt = fmt.replace('%p', '' + (date.getHours() < 12 ? 'AM' : 'PM'));\n      fmt = fmt.replace('%B', '' + editor.translate(monthsLong[date.getMonth()]));\n      fmt = fmt.replace('%b', '' + editor.translate(monthsShort[date.getMonth()]));\n      fmt = fmt.replace('%A', '' + editor.translate(daysLong[date.getDay()]));\n      fmt = fmt.replace('%a', '' + editor.translate(daysShort[date.getDay()]));\n      fmt = fmt.replace('%%', '%');\n      return fmt;\n    };\n    const updateElement = (editor, timeElm, computerTime, userTime) => {\n      const newTimeElm = editor.dom.create('time', { datetime: computerTime }, userTime);\n      editor.dom.replace(newTimeElm, timeElm);\n      editor.selection.select(newTimeElm, true);\n      editor.selection.collapse(false);\n    };\n    const insertDateTime = (editor, format) => {\n      if (shouldInsertTimeElement(editor)) {\n        const userTime = getDateTime(editor, format);\n        let computerTime;\n        if (/%[HMSIp]/.test(format)) {\n          computerTime = getDateTime(editor, '%Y-%m-%dT%H:%M');\n        } else {\n          computerTime = getDateTime(editor, '%Y-%m-%d');\n        }\n        const timeElm = editor.dom.getParent(editor.selection.getStart(), 'time');\n        if (timeElm) {\n          updateElement(editor, timeElm, computerTime, userTime);\n        } else {\n          editor.insertContent('<time datetime=\"' + computerTime + '\">' + userTime + '</time>');\n        }\n      } else {\n        editor.insertContent(getDateTime(editor, format));\n      }\n    };\n\n    const register$1 = editor => {\n      editor.addCommand('mceInsertDate', (_ui, value) => {\n        insertDateTime(editor, value !== null && value !== void 0 ? value : getDateFormat(editor));\n      });\n      editor.addCommand('mceInsertTime', (_ui, value) => {\n        insertDateTime(editor, value !== null && value !== void 0 ? value : getTimeFormat(editor));\n      });\n    };\n\n    const Cell = initial => {\n      let value = initial;\n      const get = () => {\n        return value;\n      };\n      const set = v => {\n        value = v;\n      };\n      return {\n        get,\n        set\n      };\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    const onSetupEditable = editor => api => {\n      const nodeChanged = () => {\n        api.setEnabled(editor.selection.isEditable());\n      };\n      editor.on('NodeChange', nodeChanged);\n      nodeChanged();\n      return () => {\n        editor.off('NodeChange', nodeChanged);\n      };\n    };\n    const register = editor => {\n      const formats = getFormats(editor);\n      const defaultFormat = Cell(getDefaultDateTime(editor));\n      const insertDateTime = format => editor.execCommand('mceInsertDate', false, format);\n      editor.ui.registry.addSplitButton('insertdatetime', {\n        icon: 'insert-time',\n        tooltip: 'Insert date/time',\n        select: value => value === defaultFormat.get(),\n        fetch: done => {\n          done(global.map(formats, format => ({\n            type: 'choiceitem',\n            text: getDateTime(editor, format),\n            value: format\n          })));\n        },\n        onAction: _api => {\n          insertDateTime(defaultFormat.get());\n        },\n        onItemAction: (_api, value) => {\n          defaultFormat.set(value);\n          insertDateTime(value);\n        },\n        onSetup: onSetupEditable(editor)\n      });\n      const makeMenuItemHandler = format => () => {\n        defaultFormat.set(format);\n        insertDateTime(format);\n      };\n      editor.ui.registry.addNestedMenuItem('insertdatetime', {\n        icon: 'insert-time',\n        text: 'Date/time',\n        getSubmenuItems: () => global.map(formats, format => ({\n          type: 'menuitem',\n          text: getDateTime(editor, format),\n          onAction: makeMenuItemHandler(format)\n        })),\n        onSetup: onSetupEditable(editor)\n      });\n    };\n\n    var Plugin = () => {\n      global$1.add('insertdatetime', editor => {\n        register$2(editor);\n        register$1(editor);\n        register(editor);\n      });\n    };\n\n    Plugin();\n\n})();\n"],"names":["global$1","tinymce","util","Tools","resolve","option","name","editor","options","get","getDateFormat","getTimeFormat","getFormats","shouldInsertTimeElement","daysShort","split","daysLong","monthsShort","monthsLong","addZeros","value","len","length","i","getDateTime","fmt","date","Date","replace","getFullYear","getYear","getMonth","getDate","getHours","getMinutes","getSeconds","translate","getDay","insertDateTime","format","userTime","computerTime","test","timeElm","dom","getParent","selection","getStart","newTimeElm","create","datetime","select","collapse","updateElement","insertContent","global","onSetupEditable","api","nodeChanged","setEnabled","isEditable","on","off","register","formats","defaultFormat","initial","set","v","Cell","getDefaultDateTime","execCommand","ui","registry","addSplitButton","icon","tooltip","fetch","done","map","type","text","onAction","_api","onItemAction","onSetup","makeMenuItemHandler","addNestedMenuItem","getSubmenuItems","add","registerOption","processor","default","register$2","addCommand","_ui","register$1"],"sourceRoot":""}