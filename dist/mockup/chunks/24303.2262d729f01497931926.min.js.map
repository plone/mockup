{"version":3,"file":"chunks/24303.2262d729f01497931926.min.js","mappings":"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","sources":["webpack://@plone/mockup/./node_modules/tinymce/plugins/directionality/plugin.js"],"sourcesContent":["/**\n * TinyMCE version 7.9.1 (2025-05-29)\n */\n\n(function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    /* eslint-disable @typescript-eslint/no-wrapper-object-types */\n    const hasProto = (v, constructor, predicate) => {\n        var _a;\n        if (predicate(v, constructor.prototype)) {\n            return true;\n        }\n        else {\n            // String-based fallback time\n            return ((_a = v.constructor) === null || _a === void 0 ? void 0 : _a.name) === constructor.name;\n        }\n    };\n    const typeOf = (x) => {\n        const t = typeof x;\n        if (x === null) {\n            return 'null';\n        }\n        else if (t === 'object' && Array.isArray(x)) {\n            return 'array';\n        }\n        else if (t === 'object' && hasProto(x, String, (o, proto) => proto.isPrototypeOf(o))) {\n            return 'string';\n        }\n        else {\n            return t;\n        }\n    };\n    const isType$1 = (type) => (value) => typeOf(value) === type;\n    const isSimpleType = (type) => (value) => typeof value === type;\n    const isString = isType$1('string');\n    const isBoolean = isSimpleType('boolean');\n    const isNullable = (a) => a === null || a === undefined;\n    const isNonNullable = (a) => !isNullable(a);\n    const isFunction = isSimpleType('function');\n    const isNumber = isSimpleType('number');\n\n    /** Compose two unary functions. Similar to compose, but avoids using Function.prototype.apply. */\n    const compose1 = (fbc, fab) => (a) => fbc(fab(a));\n    const constant = (value) => {\n        return () => {\n            return value;\n        };\n    };\n    const never = constant(false);\n\n    /**\n     * The `Optional` type represents a value (of any type) that potentially does\n     * not exist. Any `Optional<T>` can either be a `Some<T>` (in which case the\n     * value does exist) or a `None` (in which case the value does not exist). This\n     * module defines a whole lot of FP-inspired utility functions for dealing with\n     * `Optional` objects.\n     *\n     * Comparison with null or undefined:\n     * - We don't get fancy null coalescing operators with `Optional`\n     * - We do get fancy helper functions with `Optional`\n     * - `Optional` support nesting, and allow for the type to still be nullable (or\n     * another `Optional`)\n     * - There is no option to turn off strict-optional-checks like there is for\n     * strict-null-checks\n     */\n    class Optional {\n        // The internal representation has a `tag` and a `value`, but both are\n        // private: able to be console.logged, but not able to be accessed by code\n        constructor(tag, value) {\n            this.tag = tag;\n            this.value = value;\n        }\n        // --- Identities ---\n        /**\n         * Creates a new `Optional<T>` that **does** contain a value.\n         */\n        static some(value) {\n            return new Optional(true, value);\n        }\n        /**\n         * Create a new `Optional<T>` that **does not** contain a value. `T` can be\n         * any type because we don't actually have a `T`.\n         */\n        static none() {\n            return Optional.singletonNone;\n        }\n        /**\n         * Perform a transform on an `Optional` type. Regardless of whether this\n         * `Optional` contains a value or not, `fold` will return a value of type `U`.\n         * If this `Optional` does not contain a value, the `U` will be created by\n         * calling `onNone`. If this `Optional` does contain a value, the `U` will be\n         * created by calling `onSome`.\n         *\n         * For the FP enthusiasts in the room, this function:\n         * 1. Could be used to implement all of the functions below\n         * 2. Forms a catamorphism\n         */\n        fold(onNone, onSome) {\n            if (this.tag) {\n                return onSome(this.value);\n            }\n            else {\n                return onNone();\n            }\n        }\n        /**\n         * Determine if this `Optional` object contains a value.\n         */\n        isSome() {\n            return this.tag;\n        }\n        /**\n         * Determine if this `Optional` object **does not** contain a value.\n         */\n        isNone() {\n            return !this.tag;\n        }\n        // --- Functor (name stolen from Haskell / maths) ---\n        /**\n         * Perform a transform on an `Optional` object, **if** there is a value. If\n         * you provide a function to turn a T into a U, this is the function you use\n         * to turn an `Optional<T>` into an `Optional<U>`. If this **does** contain\n         * a value then the output will also contain a value (that value being the\n         * output of `mapper(this.value)`), and if this **does not** contain a value\n         * then neither will the output.\n         */\n        map(mapper) {\n            if (this.tag) {\n                return Optional.some(mapper(this.value));\n            }\n            else {\n                return Optional.none();\n            }\n        }\n        // --- Monad (name stolen from Haskell / maths) ---\n        /**\n         * Perform a transform on an `Optional` object, **if** there is a value.\n         * Unlike `map`, here the transform itself also returns an `Optional`.\n         */\n        bind(binder) {\n            if (this.tag) {\n                return binder(this.value);\n            }\n            else {\n                return Optional.none();\n            }\n        }\n        // --- Traversable (name stolen from Haskell / maths) ---\n        /**\n         * For a given predicate, this function finds out if there **exists** a value\n         * inside this `Optional` object that meets the predicate. In practice, this\n         * means that for `Optional`s that do not contain a value it returns false (as\n         * no predicate-meeting value exists).\n         */\n        exists(predicate) {\n            return this.tag && predicate(this.value);\n        }\n        /**\n         * For a given predicate, this function finds out if **all** the values inside\n         * this `Optional` object meet the predicate. In practice, this means that\n         * for `Optional`s that do not contain a value it returns true (as all 0\n         * objects do meet the predicate).\n         */\n        forall(predicate) {\n            return !this.tag || predicate(this.value);\n        }\n        filter(predicate) {\n            if (!this.tag || predicate(this.value)) {\n                return this;\n            }\n            else {\n                return Optional.none();\n            }\n        }\n        // --- Getters ---\n        /**\n         * Get the value out of the inside of the `Optional` object, using a default\n         * `replacement` value if the provided `Optional` object does not contain a\n         * value.\n         */\n        getOr(replacement) {\n            return this.tag ? this.value : replacement;\n        }\n        /**\n         * Get the value out of the inside of the `Optional` object, using a default\n         * `replacement` value if the provided `Optional` object does not contain a\n         * value.  Unlike `getOr`, in this method the `replacement` object is also\n         * `Optional` - meaning that this method will always return an `Optional`.\n         */\n        or(replacement) {\n            return this.tag ? this : replacement;\n        }\n        /**\n         * Get the value out of the inside of the `Optional` object, using a default\n         * `replacement` value if the provided `Optional` object does not contain a\n         * value. Unlike `getOr`, in this method the `replacement` value is\n         * \"thunked\" - that is to say that you don't pass a value to `getOrThunk`, you\n         * pass a function which (if called) will **return** the `value` you want to\n         * use.\n         */\n        getOrThunk(thunk) {\n            return this.tag ? this.value : thunk();\n        }\n        /**\n         * Get the value out of the inside of the `Optional` object, using a default\n         * `replacement` value if the provided Optional object does not contain a\n         * value.\n         *\n         * Unlike `or`, in this method the `replacement` value is \"thunked\" - that is\n         * to say that you don't pass a value to `orThunk`, you pass a function which\n         * (if called) will **return** the `value` you want to use.\n         *\n         * Unlike `getOrThunk`, in this method the `replacement` value is also\n         * `Optional`, meaning that this method will always return an `Optional`.\n         */\n        orThunk(thunk) {\n            return this.tag ? this : thunk();\n        }\n        /**\n         * Get the value out of the inside of the `Optional` object, throwing an\n         * exception if the provided `Optional` object does not contain a value.\n         *\n         * WARNING:\n         * You should only be using this function if you know that the `Optional`\n         * object **is not** empty (otherwise you're throwing exceptions in production\n         * code, which is bad).\n         *\n         * In tests this is more acceptable.\n         *\n         * Prefer other methods to this, such as `.each`.\n         */\n        getOrDie(message) {\n            if (!this.tag) {\n                throw new Error(message !== null && message !== void 0 ? message : 'Called getOrDie on None');\n            }\n            else {\n                return this.value;\n            }\n        }\n        // --- Interop with null and undefined ---\n        /**\n         * Creates an `Optional` value from a nullable (or undefined-able) input.\n         * Null, or undefined, is converted to `None`, and anything else is converted\n         * to `Some`.\n         */\n        static from(value) {\n            return isNonNullable(value) ? Optional.some(value) : Optional.none();\n        }\n        /**\n         * Converts an `Optional` to a nullable type, by getting the value if it\n         * exists, or returning `null` if it does not.\n         */\n        getOrNull() {\n            return this.tag ? this.value : null;\n        }\n        /**\n         * Converts an `Optional` to an undefined-able type, by getting the value if\n         * it exists, or returning `undefined` if it does not.\n         */\n        getOrUndefined() {\n            return this.value;\n        }\n        // --- Utilities ---\n        /**\n         * If the `Optional` contains a value, perform an action on that value.\n         * Unlike the rest of the methods on this type, `.each` has side-effects. If\n         * you want to transform an `Optional<T>` **into** something, then this is not\n         * the method for you. If you want to use an `Optional<T>` to **do**\n         * something, then this is the method for you - provided you're okay with not\n         * doing anything in the case where the `Optional` doesn't have a value inside\n         * it. If you're not sure whether your use-case fits into transforming\n         * **into** something or **doing** something, check whether it has a return\n         * value. If it does, you should be performing a transform.\n         */\n        each(worker) {\n            if (this.tag) {\n                worker(this.value);\n            }\n        }\n        /**\n         * Turn the `Optional` object into an array that contains all of the values\n         * stored inside the `Optional`. In practice, this means the output will have\n         * either 0 or 1 elements.\n         */\n        toArray() {\n            return this.tag ? [this.value] : [];\n        }\n        /**\n         * Turn the `Optional` object into a string for debugging or printing. Not\n         * recommended for production code, but good for debugging. Also note that\n         * these days an `Optional` object can be logged to the console directly, and\n         * its inner value (if it exists) will be visible.\n         */\n        toString() {\n            return this.tag ? `some(${this.value})` : 'none()';\n        }\n    }\n    // Sneaky optimisation: every instance of Optional.none is identical, so just\n    // reuse the same object\n    Optional.singletonNone = new Optional(false);\n\n    /* eslint-disable @typescript-eslint/unbound-method */\n    const nativeSlice = Array.prototype.slice;\n    const map = (xs, f) => {\n        // pre-allocating array size when it's guaranteed to be known\n        // http://jsperf.com/push-allocated-vs-dynamic/22\n        const len = xs.length;\n        const r = new Array(len);\n        for (let i = 0; i < len; i++) {\n            const x = xs[i];\n            r[i] = f(x, i);\n        }\n        return r;\n    };\n    // Unwound implementing other functions in terms of each.\n    // The code size is roughly the same, and it should allow for better optimisation.\n    // const each = function<T, U>(xs: T[], f: (x: T, i?: number, xs?: T[]) => void): void {\n    const each = (xs, f) => {\n        for (let i = 0, len = xs.length; i < len; i++) {\n            const x = xs[i];\n            f(x, i);\n        }\n    };\n    const filter = (xs, pred) => {\n        const r = [];\n        for (let i = 0, len = xs.length; i < len; i++) {\n            const x = xs[i];\n            if (pred(x, i)) {\n                r.push(x);\n            }\n        }\n        return r;\n    };\n    isFunction(Array.from) ? Array.from : (x) => nativeSlice.call(x);\n\n    const fromHtml = (html, scope) => {\n        const doc = scope || document;\n        const div = doc.createElement('div');\n        div.innerHTML = html;\n        if (!div.hasChildNodes() || div.childNodes.length > 1) {\n            const message = 'HTML does not have a single root node';\n            // eslint-disable-next-line no-console\n            console.error(message, html);\n            throw new Error(message);\n        }\n        return fromDom(div.childNodes[0]);\n    };\n    const fromTag = (tag, scope) => {\n        const doc = scope || document;\n        const node = doc.createElement(tag);\n        return fromDom(node);\n    };\n    const fromText = (text, scope) => {\n        const doc = scope || document;\n        const node = doc.createTextNode(text);\n        return fromDom(node);\n    };\n    const fromDom = (node) => {\n        // TODO: Consider removing this check, but left atm for safety\n        if (node === null || node === undefined) {\n            throw new Error('Node cannot be null or undefined');\n        }\n        return {\n            dom: node\n        };\n    };\n    const fromPoint = (docElm, x, y) => Optional.from(docElm.dom.elementFromPoint(x, y)).map(fromDom);\n    // tslint:disable-next-line:variable-name\n    const SugarElement = {\n        fromHtml,\n        fromTag,\n        fromText,\n        fromDom,\n        fromPoint\n    };\n\n    const DOCUMENT_FRAGMENT = 11;\n    const ELEMENT = 1;\n    const TEXT = 3;\n\n    const is = (element, selector) => {\n        const dom = element.dom;\n        if (dom.nodeType !== ELEMENT) {\n            return false;\n        }\n        else {\n            const elem = dom;\n            if (elem.matches !== undefined) {\n                return elem.matches(selector);\n            }\n            else if (elem.msMatchesSelector !== undefined) {\n                return elem.msMatchesSelector(selector);\n            }\n            else if (elem.webkitMatchesSelector !== undefined) {\n                return elem.webkitMatchesSelector(selector);\n            }\n            else if (elem.mozMatchesSelector !== undefined) {\n                // cast to any as mozMatchesSelector doesn't exist in TS DOM lib\n                return elem.mozMatchesSelector(selector);\n            }\n            else {\n                throw new Error('Browser lacks native selectors');\n            } // unfortunately we can't throw this on startup :(\n        }\n    };\n\n    const name = (element) => {\n        const r = element.dom.nodeName;\n        return r.toLowerCase();\n    };\n    const type = (element) => element.dom.nodeType;\n    const isType = (t) => (element) => type(element) === t;\n    const isElement = isType(ELEMENT);\n    const isText = isType(TEXT);\n    const isDocumentFragment = isType(DOCUMENT_FRAGMENT);\n    const isTag = (tag) => (e) => isElement(e) && name(e) === tag;\n\n    const parent = (element) => Optional.from(element.dom.parentNode).map(SugarElement.fromDom);\n    const children$2 = (element) => map(element.dom.childNodes, SugarElement.fromDom);\n\n    /**\n     * Is the element a ShadowRoot?\n     *\n     * Note: this is insufficient to test if any element is a shadow root, but it is sufficient to differentiate between\n     * a Document and a ShadowRoot.\n     */\n    const isShadowRoot = (dos) => isDocumentFragment(dos) && isNonNullable(dos.dom.host);\n    const getRootNode = (e) => SugarElement.fromDom(e.dom.getRootNode());\n    /** If this element is in a ShadowRoot, return it. */\n    const getShadowRoot = (e) => {\n        const r = getRootNode(e);\n        return isShadowRoot(r) ? Optional.some(r) : Optional.none();\n    };\n    /** Return the host of a ShadowRoot.\n     *\n     * This function will throw if Shadow DOM is unsupported in the browser, or if the host is null.\n     * If you actually have a ShadowRoot, this shouldn't happen.\n     */\n    const getShadowHost = (e) => SugarElement.fromDom(e.dom.host);\n\n    const rawSet = (dom, key, value) => {\n        /*\n         * JQuery coerced everything to a string, and silently did nothing on text node/null/undefined.\n         *\n         * We fail on those invalid cases, only allowing numbers and booleans.\n         */\n        if (isString(value) || isBoolean(value) || isNumber(value)) {\n            dom.setAttribute(key, value + '');\n        }\n        else {\n            // eslint-disable-next-line no-console\n            console.error('Invalid call to Attribute.set. Key ', key, ':: Value ', value, ':: Element ', dom);\n            throw new Error('Attribute value was not simple');\n        }\n    };\n    const set = (element, key, value) => {\n        rawSet(element.dom, key, value);\n    };\n    const remove = (element, key) => {\n        element.dom.removeAttribute(key);\n    };\n\n    // some elements, such as mathml, don't have style attributes\n    // others, such as angular elements, have style attributes that aren't a CSSStyleDeclaration\n    const isSupported = (dom) => \n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    dom.style !== undefined && isFunction(dom.style.getPropertyValue);\n\n    // Node.contains() is very, very, very good performance\n    // http://jsperf.com/closest-vs-contains/5\n    const inBody = (element) => {\n        // Technically this is only required on IE, where contains() returns false for text nodes.\n        // But it's cheap enough to run everywhere and Sugar doesn't have platform detection (yet).\n        const dom = isText(element) ? element.dom.parentNode : element.dom;\n        // use ownerDocument.body to ensure this works inside iframes.\n        // Normally contains is bad because an element \"contains\" itself, but here we want that.\n        if (dom === undefined || dom === null || dom.ownerDocument === null) {\n            return false;\n        }\n        const doc = dom.ownerDocument;\n        return getShadowRoot(SugarElement.fromDom(dom)).fold(() => doc.body.contains(dom), compose1(inBody, getShadowHost));\n    };\n\n    /*\n     * NOTE: For certain properties, this returns the \"used value\" which is subtly different to the \"computed value\" (despite calling getComputedStyle).\n     * Blame CSS 2.0.\n     *\n     * https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\n     */\n    const get = (element, property) => {\n        const dom = element.dom;\n        /*\n         * IE9 and above per\n         * https://developer.mozilla.org/en/docs/Web/API/window.getComputedStyle\n         *\n         * Not in numerosity, because it doesn't memoize and looking this up dynamically in performance critical code would be horrendous.\n         *\n         * JQuery has some magic here for IE popups, but we don't really need that.\n         * It also uses element.ownerDocument.defaultView to handle iframes but that hasn't been required since FF 3.6.\n         */\n        const styles = window.getComputedStyle(dom);\n        const r = styles.getPropertyValue(property);\n        // jquery-ism: If r is an empty string, check that the element is not in a document. If it isn't, return the raw value.\n        // Turns out we do this a lot.\n        return (r === '' && !inBody(element)) ? getUnsafeProperty(dom, property) : r;\n    };\n    // removed: support for dom().style[property] where prop is camel case instead of normal property name\n    // empty string is what the browsers (IE11 and Chrome) return when the propertyValue doesn't exists.\n    const getUnsafeProperty = (dom, property) => isSupported(dom) ? dom.style.getPropertyValue(property) : '';\n\n    const getDirection = (element) => get(element, 'direction') === 'rtl' ? 'rtl' : 'ltr';\n\n    const ancestor$1 = (scope, predicate, isRoot) => {\n        let element = scope.dom;\n        const stop = isFunction(isRoot) ? isRoot : never;\n        while (element.parentNode) {\n            element = element.parentNode;\n            const el = SugarElement.fromDom(element);\n            if (predicate(el)) {\n                return Optional.some(el);\n            }\n            else if (stop(el)) {\n                break;\n            }\n        }\n        return Optional.none();\n    };\n\n    const ancestor = (scope, selector, isRoot) => ancestor$1(scope, (e) => is(e, selector), isRoot);\n\n    const children$1 = (scope, predicate) => filter(children$2(scope), predicate);\n\n    const children = (scope, selector) => \n    // It may surprise you to learn this is exactly what JQuery does\n    // TODO: Avoid all the wrapping and unwrapping\n    children$1(scope, (e) => is(e, selector));\n\n    const getParentElement = (element) => parent(element).filter(isElement);\n    // if the block is a list item, we need to get the parent of the list itself\n    const getNormalizedBlock = (element, isListItem) => {\n        const normalizedElement = isListItem ? ancestor(element, 'ol,ul') : Optional.some(element);\n        return normalizedElement.getOr(element);\n    };\n    const isListItem = isTag('li');\n    const setDirOnElements = (dom, blocks, dir) => {\n        each(blocks, (block) => {\n            const blockElement = SugarElement.fromDom(block);\n            const isBlockElementListItem = isListItem(blockElement);\n            const normalizedBlock = getNormalizedBlock(blockElement, isBlockElementListItem);\n            const normalizedBlockParent = getParentElement(normalizedBlock);\n            normalizedBlockParent.each((parent) => {\n                // TINY-9314: Remove any inline direction style to ensure that it is only set when necessary and that\n                // the dir attribute is favored\n                dom.setStyle(normalizedBlock.dom, 'direction', null);\n                const parentDirection = getDirection(parent);\n                if (parentDirection === dir) {\n                    remove(normalizedBlock, 'dir');\n                }\n                else {\n                    set(normalizedBlock, 'dir', dir);\n                }\n                // TINY-9314: Set an inline direction style if computed css direction is still not as desired. This can\n                // happen when the direction style is derived from a stylesheet.\n                if (getDirection(normalizedBlock) !== dir) {\n                    dom.setStyle(normalizedBlock.dom, 'direction', dir);\n                }\n                // Remove dir attr and direction style from list children\n                if (isBlockElementListItem) {\n                    const listItems = children(normalizedBlock, 'li[dir],li[style]');\n                    each(listItems, (listItem) => {\n                        remove(listItem, 'dir');\n                        dom.setStyle(listItem.dom, 'direction', null);\n                    });\n                }\n            });\n        });\n    };\n    const setDir = (editor, dir) => {\n        if (editor.selection.isEditable()) {\n            setDirOnElements(editor.dom, editor.selection.getSelectedBlocks(), dir);\n            editor.nodeChanged();\n        }\n    };\n\n    const register$1 = (editor) => {\n        editor.addCommand('mceDirectionLTR', () => {\n            setDir(editor, 'ltr');\n        });\n        editor.addCommand('mceDirectionRTL', () => {\n            setDir(editor, 'rtl');\n        });\n    };\n\n    const getNodeChangeHandler = (editor, dir) => (api) => {\n        const nodeChangeHandler = (e) => {\n            const element = SugarElement.fromDom(e.element);\n            api.setActive(getDirection(element) === dir);\n            api.setEnabled(editor.selection.isEditable());\n        };\n        editor.on('NodeChange', nodeChangeHandler);\n        api.setEnabled(editor.selection.isEditable());\n        return () => editor.off('NodeChange', nodeChangeHandler);\n    };\n    const register = (editor) => {\n        editor.ui.registry.addToggleButton('ltr', {\n            tooltip: 'Left to right',\n            icon: 'ltr',\n            onAction: () => editor.execCommand('mceDirectionLTR'),\n            onSetup: getNodeChangeHandler(editor, 'ltr')\n        });\n        editor.ui.registry.addToggleButton('rtl', {\n            tooltip: 'Right to left',\n            icon: 'rtl',\n            onAction: () => editor.execCommand('mceDirectionRTL'),\n            onSetup: getNodeChangeHandler(editor, 'rtl')\n        });\n    };\n\n    var Plugin = () => {\n        global.add('directionality', (editor) => {\n            register$1(editor);\n            register(editor);\n        });\n    };\n\n    Plugin();\n    /** *****\n     * DO NOT EXPORT ANYTHING\n     *\n     * IF YOU DO ROLLUP WILL LEAVE A GLOBAL ON THE PAGE\n     *******/\n\n})();\n"],"names":["global","tinymce","util","Tools","resolve","isSimpleType","type","value","isString","x","t","Array","isArray","o","v","proto","constructor","String","prototype","isPrototypeOf","_a","name","typeOf","isType$1","isBoolean","isNonNullable","a","isNullable","isFunction","isNumber","never","Optional","tag","this","some","none","singletonNone","fold","onNone","onSome","isSome","isNone","map","mapper","bind","binder","exists","predicate","forall","filter","getOr","replacement","or","getOrThunk","thunk","orThunk","getOrDie","message","Error","from","getOrNull","getOrUndefined","each","worker","toArray","toString","slice","xs","f","i","len","length","fromDom","node","dom","SugarElement","fromHtml","html","scope","div","document","createElement","innerHTML","hasChildNodes","childNodes","console","error","fromTag","fromText","text","createTextNode","fromPoint","docElm","y","elementFromPoint","is","element","selector","nodeType","elem","undefined","matches","msMatchesSelector","webkitMatchesSelector","mozMatchesSelector","isType","isElement","isText","isDocumentFragment","children$2","r","getShadowRoot","e","getRootNode","dos","host","getShadowHost","set","key","setAttribute","rawSet","remove","removeAttribute","inBody","parentNode","ownerDocument","doc","body","contains","fbc","fab","getUnsafeProperty","property","style","getPropertyValue","isSupported","getDirection","window","getComputedStyle","get","ancestor","isRoot","stop","el","ancestor$1","children","pred","push","children$1","getParentElement","parent","isListItem","nodeName","toLowerCase","setDirOnElements","blocks","dir","block","blockElement","isBlockElementListItem","normalizedBlock","getNormalizedBlock","setStyle","listItems","listItem","setDir","editor","selection","isEditable","getSelectedBlocks","nodeChanged","getNodeChangeHandler","api","nodeChangeHandler","setActive","setEnabled","on","off","add","addCommand","register$1","ui","registry","addToggleButton","tooltip","icon","onAction","execCommand","onSetup","register"],"sourceRoot":""}