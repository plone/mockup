{"version":3,"file":"chunks/79914.e5ed1dac2854a01b5f7a.min.js","mappings":"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","sources":["webpack://@plone/mockup/./node_modules/tinymce/plugins/autolink/plugin.js"],"sourcesContent":["/**\n * TinyMCE version 7.9.1 (2025-05-29)\n */\n\n(function () {\n    'use strict';\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    /* eslint-disable @typescript-eslint/no-wrapper-object-types */\n    const hasProto = (v, constructor, predicate) => {\n        var _a;\n        if (predicate(v, constructor.prototype)) {\n            return true;\n        }\n        else {\n            // String-based fallback time\n            return ((_a = v.constructor) === null || _a === void 0 ? void 0 : _a.name) === constructor.name;\n        }\n    };\n    const typeOf = (x) => {\n        const t = typeof x;\n        if (x === null) {\n            return 'null';\n        }\n        else if (t === 'object' && Array.isArray(x)) {\n            return 'array';\n        }\n        else if (t === 'object' && hasProto(x, String, (o, proto) => proto.isPrototypeOf(o))) {\n            return 'string';\n        }\n        else {\n            return t;\n        }\n    };\n    const isType = (type) => (value) => typeOf(value) === type;\n    const eq = (t) => (a) => t === a;\n    const isString = isType('string');\n    const isUndefined = eq(undefined);\n    const isNullable = (a) => a === null || a === undefined;\n    const isNonNullable = (a) => !isNullable(a);\n\n    const not = (f) => (t) => !f(t);\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const hasOwnProperty = Object.hasOwnProperty;\n    const has = (obj, key) => hasOwnProperty.call(obj, key);\n\n    const checkRange = (str, substr, start) => substr === '' || str.length >= substr.length && str.substr(start, start + substr.length) === substr;\n    const contains = (str, substr, start = 0, end) => {\n        const idx = str.indexOf(substr, start);\n        if (idx !== -1) {\n            return isUndefined(end) ? true : idx + substr.length <= end;\n        }\n        else {\n            return false;\n        }\n    };\n    /** Does 'str' start with 'prefix'?\n     *  Note: all strings start with the empty string.\n     *        More formally, for all strings x, startsWith(x, \"\").\n     *        This is so that for all strings x and y, startsWith(y + x, y)\n     */\n    const startsWith = (str, prefix) => {\n        return checkRange(str, prefix, 0);\n    };\n\n    const zeroWidth = '\\uFEFF';\n    const isZwsp = (char) => char === zeroWidth;\n    const removeZwsp = (s) => s.replace(/\\uFEFF/g, '');\n\n    /*\n      The RegEx parses the following components (https://www.rfc-editor.org/rfc/rfc3986.txt):\n\n        scheme:[//[user:password@]host[:port]][/]path[?query][#fragment]\n\n              foo://example.com:8042/over/there?name=ferret#nose\n              \\_/   \\______________/\\_________/ \\_________/ \\__/\n              |           |            |            |        |\n            scheme     authority       path        query   fragment\n\n      Originally from:\n        http://blog.mattheworiordan.com/post/13174566389/url-regular-expression-for-links-with-or-without-the\n\n      Modified to:\n      - include port numbers\n      - allow full stops in email addresses\n      - allow [-.~*+=!&;:'%@?^${}(),\\/\\w] after the #\n      - allow [-.~*+=!&;:'%@?^${}(),\\/\\w] after the ?\n      - move allow -_.~*+=!&;:'%@?^${}() in email usernames to the first @ match (TBIO-4809)\n      - enforce domains to be [A-Za-z0-9-]+(?:\\.[A-Za-z0-9-]+)* so they can't end in a period (TBIO-4809)\n      - removed a bunch of escaping, made every group non-capturing (during TBIO-4809)\n      - colons are only valid when followed directly by // or some text and then @ (TBIO-4867)\n      - only include the fragment '#' if it has 1 or more trailing matches\n      - only include the query '?' if it has 1 or more trailing matches\n      - allow commas in URL path\n      - exclude trailing comma and period in URL path\n      - allow up to 15 character schemes including all valid characters from the spec https://url.spec.whatwg.org/#url-scheme-string (TINY-5074)\n      - changed instances of 0-9 to be \\d (TINY-5074)\n      - reduced duplication (TINY-5074)\n      - allow [*!;:'@$] in the path segment as they are valid characters per the spec: https://url.spec.whatwg.org/#url-path-segment-string (TINY-8069)\n\n    (?:\n      (?:\n        [A-Za-z][A-Za-z\\d.+-]{0,14}:\\/\\/(?:[-.~*+=!&;:'%@?^${}(),\\w]+@)?\n        | www\\.\n        | [-;:&=+$,.\\w]+@\n      )\n      [A-Za-z\\d-]+\n      (?:\\.[A-Za-z\\d-]+)*\n    )\n    (?::\\d+)?\n    (?:\n      \\/\n      (?:\n         [-.~*+=!;:'%@$(),\\/\\w]*[-~*+=%@$()\\/\\w]\n       )?\n    )?\n    (?:\n      \\?\n      (?:\n        [-.~*+=!&;:'%@?^${}(),\\/\\w]+\n      )\n    )?\n    (?:\n      #\n      (?:\n        [-.~*+=!&;:'%@?^${}(),\\/\\w]+\n      )\n    )?\n    */\n    const link = () => \n    // eslint-disable-next-line max-len\n    /(?:[A-Za-z][A-Za-z\\d.+-]{0,14}:\\/\\/(?:[-.~*+=!&;:'%@?^${}(),\\w]+@)?|www\\.|[-;:&=+$,.\\w]+@)[A-Za-z\\d-]+(?:\\.[A-Za-z\\d-]+)*(?::\\d+)?(?:\\/(?:[-.~*+=!;:'%@$(),\\/\\w]*[-~*+=%@$()\\/\\w])?)?(?:\\?(?:[-.~*+=!&;:'%@?^${}(),\\/\\w]+))?(?:#(?:[-.~*+=!&;:'%@?^${}(),\\/\\w]+))?/g;\n\n    const option = (name) => (editor) => editor.options.get(name);\n    const register = (editor) => {\n        const registerOption = editor.options.register;\n        registerOption('autolink_pattern', {\n            processor: 'regexp',\n            // Use the Polaris link detection, however for autolink we need to make it be an exact match\n            default: new RegExp('^' + link().source + '$', 'i')\n        });\n        registerOption('link_default_target', {\n            processor: 'string'\n        });\n        registerOption('link_default_protocol', {\n            processor: 'string',\n            default: 'https'\n        });\n    };\n    const getAutoLinkPattern = option('autolink_pattern');\n    const getDefaultLinkTarget = option('link_default_target');\n    const getDefaultLinkProtocol = option('link_default_protocol');\n    const allowUnsafeLinkTarget = option('allow_unsafe_link_target');\n\n    var global = tinymce.util.Tools.resolve('tinymce.dom.TextSeeker');\n\n    const isTextNode = (node) => node.nodeType === 3;\n    const isElement = (node) => node.nodeType === 1;\n    const isBracketOrSpace = (char) => /^[(\\[{ \\u00a0]$/.test(char);\n    // Note: This is similar to the Polaris protocol detection, except it also handles `mailto` and any length scheme\n    const hasProtocol = (url) => /^([A-Za-z][A-Za-z\\d.+-]*:\\/\\/)|mailto:/.test(url);\n    // A limited list of punctuation characters that might be used after a link\n    const isPunctuation = (char) => /[?!,.;:]/.test(char);\n    const findChar = (text, index, predicate) => {\n        for (let i = index - 1; i >= 0; i--) {\n            const char = text.charAt(i);\n            if (!isZwsp(char) && predicate(char)) {\n                return i;\n            }\n        }\n        return -1;\n    };\n    const freefallRtl = (container, offset) => {\n        let tempNode = container;\n        let tempOffset = offset;\n        while (isElement(tempNode) && tempNode.childNodes[tempOffset]) {\n            tempNode = tempNode.childNodes[tempOffset];\n            tempOffset = isTextNode(tempNode) ? tempNode.data.length : tempNode.childNodes.length;\n        }\n        return { container: tempNode, offset: tempOffset };\n    };\n\n    const parseCurrentLine = (editor, offset) => {\n        var _a;\n        const voidElements = editor.schema.getVoidElements();\n        const autoLinkPattern = getAutoLinkPattern(editor);\n        const { dom, selection } = editor;\n        // Never create a link when we are inside a link\n        if (dom.getParent(selection.getNode(), 'a[href]') !== null || editor.mode.isReadOnly()) {\n            return null;\n        }\n        const rng = selection.getRng();\n        const textSeeker = global(dom, (node) => {\n            return dom.isBlock(node) || has(voidElements, node.nodeName.toLowerCase()) || dom.getContentEditable(node) === 'false' || dom.getParent(node, 'a[href]') !== null;\n        });\n        // Descend down the end container to find the text node\n        const { container: endContainer, offset: endOffset } = freefallRtl(rng.endContainer, rng.endOffset);\n        // Find the root container to use when walking\n        const root = (_a = dom.getParent(endContainer, dom.isBlock)) !== null && _a !== void 0 ? _a : dom.getRoot();\n        // Move the selection backwards to the start of the potential URL to account for the pressed character\n        // while also excluding the last full stop from a word like \"www.site.com.\"\n        const endSpot = textSeeker.backwards(endContainer, endOffset + offset, (node, offset) => {\n            const text = node.data;\n            const idx = findChar(text, offset, not(isBracketOrSpace));\n            // Move forward one so the offset is after the found character unless the found char is a punctuation char\n            return idx === -1 || isPunctuation(text[idx]) ? idx : idx + 1;\n        }, root);\n        if (!endSpot) {\n            return null;\n        }\n        // Walk backwards until we find a boundary or a bracket/space\n        let lastTextNode = endSpot.container;\n        const startSpot = textSeeker.backwards(endSpot.container, endSpot.offset, (node, offset) => {\n            lastTextNode = node;\n            const idx = findChar(node.data, offset, isBracketOrSpace);\n            // Move forward one so that the offset is after the bracket/space\n            return idx === -1 ? idx : idx + 1;\n        }, root);\n        const newRng = dom.createRng();\n        if (!startSpot) {\n            newRng.setStart(lastTextNode, 0);\n        }\n        else {\n            newRng.setStart(startSpot.container, startSpot.offset);\n        }\n        newRng.setEnd(endSpot.container, endSpot.offset);\n        const rngText = removeZwsp(newRng.toString());\n        const matches = rngText.match(autoLinkPattern);\n        if (matches) {\n            let url = matches[0];\n            if (startsWith(url, 'www.')) {\n                const protocol = getDefaultLinkProtocol(editor);\n                url = protocol + '://' + url;\n            }\n            else if (contains(url, '@') && !hasProtocol(url)) {\n                url = 'mailto:' + url;\n            }\n            return { rng: newRng, url };\n        }\n        else {\n            return null;\n        }\n    };\n    const convertToLink = (editor, result) => {\n        const { dom, selection } = editor;\n        const { rng, url } = result;\n        const bookmark = selection.getBookmark();\n        selection.setRng(rng);\n        // Needs to be a native createlink command since this is executed in a keypress event handler\n        // so the pending character that is to be inserted needs to be inserted after the link. That will not\n        // happen if we use the formatter create link version. Since we're using the native command\n        // then we also need to ensure the exec command events are fired for backwards compatibility.\n        const command = 'createlink';\n        const args = { command, ui: false, value: url };\n        const beforeExecEvent = editor.dispatch('BeforeExecCommand', args);\n        if (!beforeExecEvent.isDefaultPrevented()) {\n            editor.getDoc().execCommand(command, false, url);\n            editor.dispatch('ExecCommand', args);\n            const defaultLinkTarget = getDefaultLinkTarget(editor);\n            if (isString(defaultLinkTarget)) {\n                const anchor = selection.getNode();\n                dom.setAttrib(anchor, 'target', defaultLinkTarget);\n                // Ensure noopener is added for blank targets to prevent window opener attacks\n                if (defaultLinkTarget === '_blank' && !allowUnsafeLinkTarget(editor)) {\n                    dom.setAttrib(anchor, 'rel', 'noopener');\n                }\n            }\n        }\n        selection.moveToBookmark(bookmark);\n        editor.nodeChanged();\n    };\n    const handleSpacebar = (editor) => {\n        const result = parseCurrentLine(editor, -1);\n        if (isNonNullable(result)) {\n            convertToLink(editor, result);\n        }\n    };\n    const handleBracket = handleSpacebar;\n    const handleEnter = (editor) => {\n        const result = parseCurrentLine(editor, 0);\n        if (isNonNullable(result)) {\n            convertToLink(editor, result);\n        }\n    };\n    const setup = (editor) => {\n        editor.on('keydown', (e) => {\n            if (e.keyCode === 13 && !e.isDefaultPrevented()) {\n                handleEnter(editor);\n            }\n        });\n        editor.on('keyup', (e) => {\n            if (e.keyCode === 32) {\n                handleSpacebar(editor);\n                // One of the closing bracket keys: ), ] or }\n            }\n            else if (e.keyCode === 48 && e.shiftKey || e.keyCode === 221) {\n                handleBracket(editor);\n            }\n        });\n    };\n\n    var Plugin = () => {\n        global$1.add('autolink', (editor) => {\n            register(editor);\n            setup(editor);\n        });\n    };\n\n    Plugin();\n    /** *****\n     * DO NOT EXPORT ANYTHING\n     *\n     * IF YOU DO ROLLUP WILL LEAVE A GLOBAL ON THE PAGE\n     *******/\n\n})();\n"],"names":["global$1","tinymce","util","Tools","resolve","isString","type","value","x","t","Array","isArray","o","v","constructor","String","prototype","isPrototypeOf","_a","name","typeOf","isUndefined","undefined","a","isNonNullable","isNullable","hasOwnProperty","Object","isZwsp","char","option","editor","options","get","getAutoLinkPattern","getDefaultLinkTarget","getDefaultLinkProtocol","allowUnsafeLinkTarget","global","isTextNode","node","nodeType","isElement","isBracketOrSpace","test","findChar","text","index","predicate","i","charAt","parseCurrentLine","offset","voidElements","schema","getVoidElements","autoLinkPattern","dom","selection","getParent","getNode","mode","isReadOnly","rng","getRng","textSeeker","isBlock","obj","key","nodeName","toLowerCase","call","getContentEditable","container","endContainer","endOffset","tempNode","tempOffset","childNodes","data","length","freefallRtl","root","getRoot","endSpot","backwards","idx","f","lastTextNode","startSpot","newRng","createRng","setStart","setEnd","matches","toString","replace","match","url","str","substr","start","checkRange","end","indexOf","contains","hasProtocol","convertToLink","result","bookmark","getBookmark","setRng","command","args","ui","dispatch","isDefaultPrevented","getDoc","execCommand","defaultLinkTarget","anchor","setAttrib","moveToBookmark","nodeChanged","handleSpacebar","handleBracket","setup","on","e","keyCode","handleEnter","shiftKey","add","registerOption","register","processor","default","RegExp","source"],"sourceRoot":""}