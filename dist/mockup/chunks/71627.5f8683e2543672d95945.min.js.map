{"version":3,"file":"chunks/71627.5f8683e2543672d95945.min.js","mappings":"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","sources":["webpack://@plone/mockup/./node_modules/tinymce/plugins/advlist/index.js","webpack://@plone/mockup/./node_modules/tinymce/plugins/advlist/plugin.js"],"sourcesContent":["// Exports the \"advlist\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/advlist')\n//   ES2015:\n//     import 'tinymce/plugins/advlist'\nrequire('./plugin.js');","/**\n * TinyMCE version 7.2.1 (2024-07-03)\n */\n\n(function () {\n    'use strict';\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    const applyListFormat = (editor, listName, styleValue) => {\n      const cmd = listName === 'UL' ? 'InsertUnorderedList' : 'InsertOrderedList';\n      editor.execCommand(cmd, false, styleValue === false ? null : { 'list-style-type': styleValue });\n    };\n\n    const register$2 = editor => {\n      editor.addCommand('ApplyUnorderedListStyle', (ui, value) => {\n        applyListFormat(editor, 'UL', value['list-style-type']);\n      });\n      editor.addCommand('ApplyOrderedListStyle', (ui, value) => {\n        applyListFormat(editor, 'OL', value['list-style-type']);\n      });\n    };\n\n    const option = name => editor => editor.options.get(name);\n    const register$1 = editor => {\n      const registerOption = editor.options.register;\n      registerOption('advlist_number_styles', {\n        processor: 'string[]',\n        default: 'default,lower-alpha,lower-greek,lower-roman,upper-alpha,upper-roman'.split(',')\n      });\n      registerOption('advlist_bullet_styles', {\n        processor: 'string[]',\n        default: 'default,circle,square'.split(',')\n      });\n    };\n    const getNumberStyles = option('advlist_number_styles');\n    const getBulletStyles = option('advlist_bullet_styles');\n\n    const isNullable = a => a === null || a === undefined;\n    const isNonNullable = a => !isNullable(a);\n\n    var global = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    class Optional {\n      constructor(tag, value) {\n        this.tag = tag;\n        this.value = value;\n      }\n      static some(value) {\n        return new Optional(true, value);\n      }\n      static none() {\n        return Optional.singletonNone;\n      }\n      fold(onNone, onSome) {\n        if (this.tag) {\n          return onSome(this.value);\n        } else {\n          return onNone();\n        }\n      }\n      isSome() {\n        return this.tag;\n      }\n      isNone() {\n        return !this.tag;\n      }\n      map(mapper) {\n        if (this.tag) {\n          return Optional.some(mapper(this.value));\n        } else {\n          return Optional.none();\n        }\n      }\n      bind(binder) {\n        if (this.tag) {\n          return binder(this.value);\n        } else {\n          return Optional.none();\n        }\n      }\n      exists(predicate) {\n        return this.tag && predicate(this.value);\n      }\n      forall(predicate) {\n        return !this.tag || predicate(this.value);\n      }\n      filter(predicate) {\n        if (!this.tag || predicate(this.value)) {\n          return this;\n        } else {\n          return Optional.none();\n        }\n      }\n      getOr(replacement) {\n        return this.tag ? this.value : replacement;\n      }\n      or(replacement) {\n        return this.tag ? this : replacement;\n      }\n      getOrThunk(thunk) {\n        return this.tag ? this.value : thunk();\n      }\n      orThunk(thunk) {\n        return this.tag ? this : thunk();\n      }\n      getOrDie(message) {\n        if (!this.tag) {\n          throw new Error(message !== null && message !== void 0 ? message : 'Called getOrDie on None');\n        } else {\n          return this.value;\n        }\n      }\n      static from(value) {\n        return isNonNullable(value) ? Optional.some(value) : Optional.none();\n      }\n      getOrNull() {\n        return this.tag ? this.value : null;\n      }\n      getOrUndefined() {\n        return this.value;\n      }\n      each(worker) {\n        if (this.tag) {\n          worker(this.value);\n        }\n      }\n      toArray() {\n        return this.tag ? [this.value] : [];\n      }\n      toString() {\n        return this.tag ? `some(${ this.value })` : 'none()';\n      }\n    }\n    Optional.singletonNone = new Optional(false);\n\n    const findUntil = (xs, pred, until) => {\n      for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        if (pred(x, i)) {\n          return Optional.some(x);\n        } else if (until(x, i)) {\n          break;\n        }\n      }\n      return Optional.none();\n    };\n\n    const isCustomList = list => /\\btox\\-/.test(list.className);\n    const isChildOfBody = (editor, elm) => {\n      return editor.dom.isChildOf(elm, editor.getBody());\n    };\n    const matchNodeNames = regex => node => isNonNullable(node) && regex.test(node.nodeName);\n    const isListNode = matchNodeNames(/^(OL|UL|DL)$/);\n    const isTableCellNode = matchNodeNames(/^(TH|TD)$/);\n    const inList = (editor, parents, nodeName) => findUntil(parents, parent => isListNode(parent) && !isCustomList(parent), isTableCellNode).exists(list => list.nodeName === nodeName && isChildOfBody(editor, list));\n    const getSelectedStyleType = editor => {\n      const listElm = editor.dom.getParent(editor.selection.getNode(), 'ol,ul');\n      const style = editor.dom.getStyle(listElm, 'listStyleType');\n      return Optional.from(style);\n    };\n    const isWithinNonEditable = (editor, element) => element !== null && !editor.dom.isEditable(element);\n    const isWithinNonEditableList = (editor, element) => {\n      const parentList = editor.dom.getParent(element, 'ol,ul,dl');\n      return isWithinNonEditable(editor, parentList) && editor.selection.isEditable();\n    };\n    const setNodeChangeHandler = (editor, nodeChangeHandler) => {\n      const initialNode = editor.selection.getNode();\n      nodeChangeHandler({\n        parents: editor.dom.getParents(initialNode),\n        element: initialNode\n      });\n      editor.on('NodeChange', nodeChangeHandler);\n      return () => editor.off('NodeChange', nodeChangeHandler);\n    };\n\n    const styleValueToText = styleValue => {\n      return styleValue.replace(/\\-/g, ' ').replace(/\\b\\w/g, chr => {\n        return chr.toUpperCase();\n      });\n    };\n    const normalizeStyleValue = styleValue => isNullable(styleValue) || styleValue === 'default' ? '' : styleValue;\n    const makeSetupHandler = (editor, nodeName) => api => {\n      const updateButtonState = (editor, parents) => {\n        const element = editor.selection.getStart(true);\n        api.setActive(inList(editor, parents, nodeName));\n        api.setEnabled(!isWithinNonEditableList(editor, element) && editor.selection.isEditable());\n      };\n      const nodeChangeHandler = e => updateButtonState(editor, e.parents);\n      return setNodeChangeHandler(editor, nodeChangeHandler);\n    };\n    const addSplitButton = (editor, id, tooltip, cmd, nodeName, styles) => {\n      editor.ui.registry.addSplitButton(id, {\n        tooltip,\n        icon: nodeName === 'OL' ? 'ordered-list' : 'unordered-list',\n        presets: 'listpreview',\n        columns: 3,\n        fetch: callback => {\n          const items = global.map(styles, styleValue => {\n            const iconStyle = nodeName === 'OL' ? 'num' : 'bull';\n            const iconName = styleValue === 'disc' || styleValue === 'decimal' ? 'default' : styleValue;\n            const itemValue = normalizeStyleValue(styleValue);\n            const displayText = styleValueToText(styleValue);\n            return {\n              type: 'choiceitem',\n              value: itemValue,\n              icon: 'list-' + iconStyle + '-' + iconName,\n              text: displayText\n            };\n          });\n          callback(items);\n        },\n        onAction: () => editor.execCommand(cmd),\n        onItemAction: (_splitButtonApi, value) => {\n          applyListFormat(editor, nodeName, value);\n        },\n        select: value => {\n          const listStyleType = getSelectedStyleType(editor);\n          return listStyleType.map(listStyle => value === listStyle).getOr(false);\n        },\n        onSetup: makeSetupHandler(editor, nodeName)\n      });\n    };\n    const addButton = (editor, id, tooltip, cmd, nodeName, styleValue) => {\n      editor.ui.registry.addToggleButton(id, {\n        active: false,\n        tooltip,\n        icon: nodeName === 'OL' ? 'ordered-list' : 'unordered-list',\n        onSetup: makeSetupHandler(editor, nodeName),\n        onAction: () => editor.queryCommandState(cmd) || styleValue === '' ? editor.execCommand(cmd) : applyListFormat(editor, nodeName, styleValue)\n      });\n    };\n    const addControl = (editor, id, tooltip, cmd, nodeName, styles) => {\n      if (styles.length > 1) {\n        addSplitButton(editor, id, tooltip, cmd, nodeName, styles);\n      } else {\n        addButton(editor, id, tooltip, cmd, nodeName, normalizeStyleValue(styles[0]));\n      }\n    };\n    const register = editor => {\n      addControl(editor, 'numlist', 'Numbered list', 'InsertOrderedList', 'OL', getNumberStyles(editor));\n      addControl(editor, 'bullist', 'Bullet list', 'InsertUnorderedList', 'UL', getBulletStyles(editor));\n    };\n\n    var Plugin = () => {\n      global$1.add('advlist', editor => {\n        if (editor.hasPlugin('lists')) {\n          register$1(editor);\n          register(editor);\n          register$2(editor);\n        } else {\n          console.error('Please use the Lists plugin together with the List Styles plugin.');\n        }\n      });\n    };\n\n    Plugin();\n\n})();\n"],"names":["global$1","tinymce","util","Tools","resolve","applyListFormat","editor","listName","styleValue","cmd","execCommand","option","name","options","get","getNumberStyles","getBulletStyles","isNullable","a","isNonNullable","global","Optional","constructor","tag","value","this","some","none","singletonNone","fold","onNone","onSome","isSome","isNone","map","mapper","bind","binder","exists","predicate","forall","filter","getOr","replacement","or","getOrThunk","thunk","orThunk","getOrDie","message","Error","from","getOrNull","getOrUndefined","each","worker","toArray","toString","matchNodeNames","regex","node","test","nodeName","isListNode","isTableCellNode","inList","parents","xs","pred","until","i","len","length","x","findUntil","parent","className","list","elm","dom","isChildOf","getBody","isChildOfBody","normalizeStyleValue","makeSetupHandler","api","nodeChangeHandler","initialNode","selection","getNode","getParents","element","on","off","setNodeChangeHandler","e","getStart","setActive","setEnabled","parentList","getParent","isEditable","isWithinNonEditable","isWithinNonEditableList","updateButtonState","addSplitButton","id","tooltip","styles","ui","registry","icon","presets","columns","fetch","callback","iconStyle","iconName","itemValue","displayText","replace","chr","toUpperCase","styleValueToText","type","text","onAction","onItemAction","_splitButtonApi","select","listStyleType","listElm","style","getStyle","getSelectedStyleType","listStyle","onSetup","addControl","addToggleButton","active","queryCommandState","addButton","add","hasPlugin","registerOption","register","processor","default","split","register$1","addCommand","register$2","console","error"],"sourceRoot":""}