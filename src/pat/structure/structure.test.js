import $ from "jquery";
import sinon from "sinon";
import registry from "@patternslib/patternslib/src/core/registry";
import utils from "@patternslib/patternslib/src/core/utils";
import Cookies from "js-cookie";
import logging from "@patternslib/patternslib/src/core/logging";
import mockup_utils from "../../core/utils";
import AppView from "./js/views/app";
import "./structure";

logging.setLevel(20);

$.fx.off = true;

var structureUrlChangedPath = "";
var dummyWindow = {};
var stub_history = {
    pushState: function (data, title, url) {
        stub_history.pushed = {
            data: data,
            title: title,
            url: url,
        };
    },
};
dummyWindow.history = stub_history;

function getQueryVariable(url, variable) {
    var query = url.split("?")[1];
    if (query === undefined) {
        return null;
    }
    var vars = query.split("&");
    for (var i = 0; i < vars.length; i += 1) {
        var pair = vars[i].split("=");
        if (decodeURIComponent(pair[0]) === variable) {
            return decodeURIComponent(pair[1]);
        }
    }
    return null;
}

var extraDataJsonItem = null;

const mockFetch =
    (json = {}) =>
    () =>
        Promise.resolve({
            json: () => Promise.resolve(json),
        });

/* ==========================
    TEST: AppView constructor internal attribute/object correctness
========================== */
describe("AppView internals correctness", function () {
    beforeEach(function () {
        this.server = sinon.fakeServer.create();
        this.server.autoRespond = true;
        this.server.autoRespondAfter = 0;

        this.server.respondWith("GET", /data.json/, function (xhr) {
            xhr.respond(200, { "Content-Type": "application/json" }, JSON.stringify({}));
        });
    });

    afterEach(function () {
        this.server.restore();
        document.body.innerHTML = "";
    });

    it("AppView collection queryHelper attribute", function () {
        /*
        Since the test and dummy data provided later directly provides
        that without actually consuming the query parameters that are
        generated by the QueryHelper instance internal to this pattern,
        it should be tested here.

        This is to ensure that if its construction is later changed
        again it should at least trigger some failure and ensure that
        the "fixed" version will continue to generate the correct
        query parameters..
        */

        var app = new AppView({
            // dummy pattern, extracted/referenced by QueryHelper
            pattern: {
                browsing: true,
                basePath: "/",
            },
            // the pattern accepts this as `attributes` but backbone doesn't
            // accept this as a valid parameter, it must be renamed to be
            // reused.  The default ResultCollection implementation will
            // then pass this back again as the `attributes` parameter to
            // construct the internal QueryHelper instance that it owns.
            queryHelperAttributes: ["foo", "bar"],

            buttons: [{ title: "Cut", url: "/cut" }],
            activeColumns: [],
            availableColumns: [],
            indexOptionsUrl: "",
            setDefaultPageUrl: "",
            collectionUrl: "http://localhost:9876/vocab",
            collectionConstructor: "mockup-patterns-structure-url/js/collections/result",
        });

        expect(app.collection.queryHelper.options.attributes).toEqual(["foo", "bar"]);

        expect(JSON.parse(app.collection.queryParser())).toEqual({
            criteria: [
                {
                    i: "path",
                    o: "plone.app.querystring.operation.string.path",
                    v: "/::1",
                },
            ],
            sort_on: "getObjPositionInParent",
            sort_order: "ascending",
        });
    });
});

/* ==========================
TEST: Structure
========================== */
describe("Structure", function () {
    beforeEach(async function () {
        // clear cookie setting
        Cookies.remove("__cp");
        Cookies.remove("_fc_pageSize");
        Cookies.remove("_fc_activeColumns");
        Cookies.remove("_fc_activeColumnsCustom");

        this.server = sinon.fakeServer.create();
        this.server.autoRespond = true;
        this.server.autoRespondAfter = 0;

        // stub window.confirm
        global.confirm = () => true;

        this.server.respondWith("GET", /data.json/, function (xhr) {
            var batch = JSON.parse(getQueryVariable(xhr.url, "batch"));
            var query = JSON.parse(getQueryVariable(xhr.url, "query"));
            var path = query.criteria[0].v.split(":")[0];
            if (path === "/") {
                path = "";
            }
            let start = 0;
            let end = 15;
            if (batch) {
                start = (batch.page - 1) * batch.size;
                end = start + batch.size;
            }
            const items = [];

            let date_1 = new Date();
            date_1 = new Date(date_1.setDate(date_1.getDate() - 2)).toISOString();
            let date_2 = new Date();
            date_2 = new Date(date_2.setDate(date_2.getDate() + 2)).toISOString();

            items.push({
                UID: "123sdfasdf" + path + "Folder",
                getURL: "http://localhost:9876" + path + "/folder",
                path: path + "/folder",
                portal_type: "Folder",
                Description: "folder",
                Title: "Folder",
                review_state: "published",
                is_folderish: true,
                Subject: [],
                id: "folder",
                ExpirationDate: date_1,
            });
            for (var i = start; i < end; i = i + 1) {
                items.push({
                    UID: "123sdfasdf" + path + i,
                    getURL: "http://localhost:9876" + path + "/item" + i,
                    path: path + "/item" + i,
                    portal_type: "Document",
                    Description: "document",
                    Title: "Document " + i,
                    review_state: "published",
                    is_folderish: false,
                    Subject: [],
                    id: "item" + i,
                    ExpirationDate: date_2,
                });
            }

            if (extraDataJsonItem) {
                items.push(extraDataJsonItem);
            }

            xhr.respond(
                200,
                { "Content-Type": "application/json" },
                JSON.stringify({
                    total: 100,
                    results: items,
                })
            );
        });
        this.server.respondWith("POST", "/rearrange", function (xhr) {
            xhr.respond(
                200,
                { "Content-Type": "application/json" },
                JSON.stringify({
                    status: "success",
                    msg: "rearranged",
                })
            );
        });
        this.server.respondWith("POST", "/moveitem", function (xhr) {
            xhr.respond(
                200,
                { "Content-Type": "application/json" },
                JSON.stringify({
                    status: "success",
                    msg: "moved " + xhr.requestBody,
                })
            );
        });
        this.server.respondWith("GET", /contextInfo/, function (xhr) {
            var data = {
                addButtons: [
                    {
                        id: "document",
                        title: "Document",
                        url: "/adddocument",
                    },
                    {
                        id: "folder",
                        title: "Folder",
                    },
                ],
            };
            if (xhr.url.indexOf("folder") !== -1) {
                data.object = {
                    UID: "123sdfasdfFolder",
                    getURL: "http://localhost:9876/folder",
                    path: "/folder",
                    portal_type: "Folder",
                    Description: "folder",
                    Title: "Folder",
                    review_state: "published",
                    is_folderish: true,
                    Subject: [],
                    id: "folder",
                };
            }
            xhr.respond(
                200,
                { "Content-Type": "application/json" },
                JSON.stringify(data)
            );
        });

        sinon.stub(window, "history").value(stub_history);
        sinon.stub(mockup_utils, "getWindow").callsFake(function () {
            return dummyWindow;
        });

        var structure = {
            vocabularyUrl: "http://localhost:9876/data.json",
            uploadUrl: "/upload",
            moveUrl: "/moveitem",
            contextInfoUrl: "{path}/contextInfo",
            setDefaultPageUrl: "http://localhost:9876/setDefaultPage",
            defaultPageTypes: ["Document", "Event", "News Item", "Collection"],
            buttons: [
                {
                    "tooltip": "Cut",
                    "id": "cut",
                    "icon": "plone-cut",
                    "url": "http://localhost:9876/cut"
                },
                {
                    "tooltip": "Copy",
                    "id": "copy",
                    "icon": "plone-copy",
                    "url": "http://localhost:9876/copy"
                },
                {
                    "tooltip": "Paste",
                    "id": "paste",
                    "icon": "plone-paste",
                    "url": "http://localhost:9876/paste"
                },
            ],
            urlStructure: {
                base: "http://localhost:9876",
                appended: "/folder_contents",
            },
        };

        this.$el = $('<div class="pat-structure"></div>')
            .attr("data-pat-structure", JSON.stringify(structure))
            .appendTo("body");
        this.el = this.$el[0];

        $("body")
            .off("structure-url-changed")
            .on("structure-url-changed", function (e, path) {
                structureUrlChangedPath = path;
            });
    });

    afterEach(function () {
        // XXX QueryHelper behaves like a singleton as it pins self
        // reference to the singleton instance of Utils within the
        // requirejs framework, so its variables such as currentPath are
        // persisted.  Reset that here like so:
        // utils.QueryHelper({}).currentPath = "/";
        extraDataJsonItem = null;
        this.server.restore();
        sinon.restore();
        document.body.innerHTML = "";
        structureUrlChangedPath = "";
        delete global.confirm;
    });

    it("initialize", async function () {
        registry.scan(this.el);
        await utils.timeout(200);

        // moveUrl provided, can get to this via order-support.
        expect(this.$el.find("table").length).toEqual(1);
    });

    it("select item populates selection well", async function () {
        registry.scan(this.el);
        await utils.timeout(200);

        var cb = this.$el.find(".itemRow td.selection input").eq(0);
        cb[0].checked = true;
        cb.trigger("change");
        await utils.timeout(100);
        expect(this.$el.find("#btn-selected-items").html()).toContain("1");
        var selectedItems = $(".popover-content .selected-item", this.$el);
        expect($(selectedItems[0]).text()).toContain("Folder");
    });

    it("test selection well label", async function () {
        extraDataJsonItem = {
            UID: 'XSS" data-xss="bobby',
            getURL: "http://localhost:9876/xss",
            path: "/xss",
            portal_type: "Folder",
            Description: "XSS test item",
            Title: "<script>alert('XSS');window.foo=1;</script>",
            review_state: "published",
            is_folderish: true,
            Subject: [],
            id: "xss",
        };
        registry.scan(this.$el);
        await utils.timeout(100);
        // it's overloaded, pattern doesn't actually enforce batch limits.
        var cb = this.$el.find(".itemRow td.selection input").eq(16);
        cb[0].checked = true;
        cb.trigger("change");
        await utils.timeout(100);
        expect(this.$el.find("#btn-selected-items").html()).toContain("1");

        // XSS happened.
        expect(window.foo).not.toEqual(1);
        expect(
            $(".popover-content .selected-item a", this.$el).eq(0).data().xss
        ).not.toEqual("bobby");
        var selectedItems = $(".popover-content .selected-item", this.$el);
        expect($(selectedItems[0]).text()).toContain(
            "<script>alert('XSS');window.foo=1;</script>"
        );
    });

    it("remove item from selection well", async function () {
        registry.scan(this.$el);
        await utils.timeout(100);
        var $item1 = this.$el.find(".itemRow td.selection input").eq(0);
        $item1[0].checked = true;
        $item1.trigger("change");
        this.$el
            .find(".items.popover-content a.remove")
            .trigger("click")
            .trigger("change");
        expect(this.$el.find("#btn-selected-items").html()).toContain("0");
    });

    it("remove all from selection well", async function () {
        registry.scan(this.$el);
        await utils.timeout(100);
        var $item1 = this.$el.find(".itemRow td.selection input").eq(0);
        $item1[0].checked = true;
        $item1.trigger("change");
        await utils.timeout(100);
        var $item2 = this.$el.find(".itemRow td.selection input").eq(1);
        $item2[0].checked = true;
        $item2.trigger("change");
        await utils.timeout(100);
        expect(this.$el.find("#btn-selected-items").html()).toContain("2");
        this.$el.find(".popover.selected-items a.remove-all").trigger("click");
        await utils.timeout(100);
        expect(this.$el.find("#btn-selected-items").html()).toContain("0");
    });

    it("paging", async function () {
        registry.scan(this.$el);
        await utils.timeout(100);
        // click next page
        var page1Btn = this.$el.find(".pagination li.active a");
        page1Btn.parent().next().find("a").trigger("click");
        await utils.timeout(100);
        expect(page1Btn.html()).not.toContain(
            this.$el.find(".pagination li.active a").eq("0").html()
        );
        expect(this.$el.find(".pagination li.active a").eq("0").html()).toContain("2");
    });

    it("per page", async function () {
        registry.scan(this.$el);
        await utils.timeout(100);
        this.$el.find(".serverhowmany15 a").trigger("click");
        await utils.timeout(100);
        expect(this.$el.find(".itemRow").length).toEqual(16);
        this.$el.find(".serverhowmany30 a").trigger("click");
        await utils.timeout(100);
        expect(this.$el.find(".itemRow").length).toEqual(31);
    });

    it("test paging does not apply overflow hidden to parent", async function () {
        /*
         * very odd here, overflow hidden is getting applied by something after
         * the table of results is re-rendered with new data
         */
        registry.scan(this.$el);
        await utils.timeout(100);
        // click next page
        var page1Btn = this.$el.find(".pagination li.active a");
        page1Btn.parent().next().find("a").trigger("click");
        await utils.timeout(100);
        expect(this.$el.css("overflow")).not.toEqual("hidden");
    });

    it("test rearrange button", async function () {
        /* test not working in firefox */
        registry.scan(this.$el);
        await utils.timeout(100);
        var $popover = this.$el.find(".popover.rearrange");
        this.$el.find("#btn-structure-rearrange").trigger("click");
        await utils.timeout(100);
        expect($popover.hasClass("active")).toEqual(true);
        $popover.find("button").trigger("click");
        await utils.timeout(100);
        expect($popover.hasClass("active")).toEqual(false);
        expect(this.$el.find(".fc-status").html()).toContain("rearrange");
        expect(this.$el.find(".fc-status").hasClass("alert-success"));
    });

    it("test select all", async function () {
        registry.scan(this.$el);
        await utils.timeout(200);
        var $item = this.$el.find("table th .select-all");
        $item[0].checked = true;
        $item.trigger("change");
        await utils.timeout(200);
        expect(this.$el.find("#btn-selected-items").html()).toContain("16");
        expect($("table tbody .selection input:checked", this.$el).length).toEqual(16);
    });

    it("test unselect all", async function () {
        registry.scan(this.$el);
        await utils.timeout(200);

        var $item = this.$el.find("table th .select-all");
        $item[0].checked = true;
        $item.trigger("change");
        await utils.timeout(200);
        expect(this.$el.find("#btn-selected-items").html()).toContain("16");
        expect($("table tbody .selection input:checked", this.$el).length).toEqual(16);

        $item[0].checked = false;
        $item.trigger("change");
        await utils.timeout(200);
        expect(this.$el.find("#btn-selected-items").html()).toContain("0");
        expect($("table tbody .selection input:checked", this.$el).length).toEqual(0);
    });

    it("test expired shows", async function () {
        registry.scan(this.$el);
        await utils.timeout(100);

        var $content_row = this.$el.find("table tbody tr").eq(0);
        expect($content_row.find("td").eq(1).text().trim()).toContain("Expired");
    });

    it("test displayed content", async function () {
        registry.scan(this.$el);
        await utils.timeout(200);

        var $content_row = this.$el.find("table tbody tr").eq(0);
        expect($content_row.find("td").length).toEqual(6);
        expect($content_row.find("td").eq(1).text().trim()).toContain("Folder");
        expect($content_row.find("td").eq(2).text().trim()).toEqual("");
        expect($content_row.find("td").eq(3).text().trim()).toEqual("");
        expect($content_row.find("td").eq(4).text().trim()).toEqual("published");
        expect($content_row.find("a.openItem").attr("href")).toEqual(
            "http://localhost:9876/folder"
        );

        var $content_row1 = this.$el.find("table tbody tr").eq(1);
        expect($content_row1.find("td").eq(1).text().trim()).toEqual("Document 0");
        expect($content_row1.find("a.openItem").attr("href")).toEqual(
            "http://localhost:9876/item0"
        );
    });

    it("test select displayed columns", async function () {
        registry.scan(this.$el);
        await utils.timeout(100);
        var $row = this.$el.find("table thead tr").eq(0);
        expect($row.find("th").length).toEqual(6);
        expect($row.find("th").eq(1).text().trim()).toEqual("Title");
        expect($row.find("th").eq(2).text().trim()).toEqual("Last modified");
        expect($row.find("th").eq(3).text().trim()).toEqual("Published");
        expect($row.find("th").eq(4).text().trim()).toEqual("Review state");
        expect($row.find("th").eq(5).text().trim()).toEqual("Actions");

        expect(Cookies.get("_fc_activeColumns")).toBe(undefined);

        this.$el.find("#btn-attribute-columns").trigger("click");
        await utils.timeout(100);

        var $checkbox = this.$el.find('.attribute-columns input[value="getObjSize"]');
        $checkbox[0].checked = true;
        $checkbox.trigger("change");
        await utils.timeout(100);

        var $popover = this.$el.find(".popover.attribute-columns");
        expect($popover.find("button").text().trim()).toEqual("Save");
        $popover.find("button").trigger("click");
        await utils.timeout(100);

        $row = this.$el.find("table thead tr").eq(0);
        expect($row.find("th").length).toEqual(7);
        expect($row.find("th").eq(5).text().trim()).toEqual("Object Size");
        expect($row.find("th").eq(6).text().trim()).toEqual("Actions");
        expect(JSON.parse(Cookies.get("_fc_activeColumns")).value).toEqual([
            "ModificationDate",
            "EffectiveDate",
            "review_state",
            "getObjSize",
        ]);

        $checkbox[0].checked = false;
        $checkbox.trigger("change");
        $popover.find("button").trigger("click");
        await utils.timeout(100);

        $row = this.$el.find("table thead tr").eq(0);
        expect($row.find("th").length).toEqual(6);
        expect(JSON.parse(Cookies.get("_fc_activeColumns")).value).toEqual([
            "ModificationDate",
            "EffectiveDate",
            "review_state",
        ]);
    });

    it("test main buttons count", async function () {
        registry.scan(this.$el);
        await utils.timeout(100);
        var buttons = this.$el.find("#btngroup-mainbuttons a");
        expect(buttons.length).toEqual(8);
    });

    it("test itemRow default actionmenu folder", async function () {
        registry.scan(this.$el);
        await utils.timeout(200);
        // folder
        var folder = this.$el.find(".itemRow").eq(0);
        expect(folder.data().id).toEqual("folder");
        expect($(".actionmenu a.action", folder).length).toEqual(7);
        // no pasting (see next test
        expect($(".actionmenu a.pasteItem", folder).length).toEqual(0);
        // no set default page
        expect($(".actionmenu a.set-default-page", folder).length).toEqual(0);
        // can select all
        expect($(".actionmenu a.selectAll", folder).text().trim()).toEqual(
            "Select all contained items"
        );
    });

    it("test itemRow default actionmenu item", async function () {
        global.fetch = jest.fn().mockImplementation(
            mockFetch({
                status: "success",
                msg: "defaulted",
            }));

        registry.scan(this.$el);
        await utils.timeout(200);

        var item = this.$el.find(".itemRow").eq(10);
        expect(item.data().id).toEqual("item9");
        expect($(".actionmenu a.action", item).length).toEqual(7);
        // cannot select all
        expect($("a.selectAll", item).length).toEqual(0);
        // can set default page
        expect($("a.set-default-page", item).length).toEqual(1);
        expect($("a.set-default-page", item).text().trim()).toEqual(
            "Set as default page"
        );
        $("a.set-default-page", item).trigger("click");
        await utils.timeout(100);
        expect(this.$el.find(".fc-status").html()).toContain("defaulted");

        global.fetch.mockClear();
        delete global.fetch;
    });

    it("test itemRow actionmenu paste click", async function () {
        global.fetch = jest.fn().mockImplementation(
            mockFetch({
                status: "success",
                msg: "pasted",
            }));

            // item pending to be pasted
        Cookies.set("__cp", "dummy");
        await utils.timeout(100);
        registry.scan(this.$el);
        await utils.timeout(200);
        // top item
        var item0 = this.$el.find(".itemRow").eq(0);
        expect(item0.data().id).toEqual("folder");
        expect($(".actionmenu a.action", item0).length).toEqual(8);
        expect($("a.pasteItem", item0).text().trim()).toEqual("Paste");
        $("a.pasteItem", item0).trigger("click");
        await utils.timeout(100);
        expect(this.$el.find(".fc-status").html()).toContain('Pasted into "Folder"');

        global.fetch.mockClear();
        delete global.fetch;
    });

    it("test itemRow actionmenu move-top click", async function () {
        registry.scan(this.$el);
        await utils.timeout(200);
        // top item
        var item0 = this.$el.find(".itemRow").eq(0);
        expect(item0.data().id).toEqual("folder");
        var item10 = this.$el.find(".itemRow").eq(10);
        expect(item10.data().id).toEqual("item9");

        expect($(".actionmenu a.move-top", item10).text().trim()).toEqual(
            "Move to top of folder"
        );
        $(".actionmenu a.move-top", item10).trigger("click");
        await utils.timeout(100);

        expect(this.$el.find(".fc-status").html()).toContain("moved");
        expect(this.$el.find(".fc-status").html()).toContain("delta=top");
        expect(this.$el.find(".fc-status").html()).toContain("id=item9");
        // No items actually moved, this is to be implemented server-side.
    });

    it.skip("test itemRow actionmenu selectAll click", async function () {
        registry.scan(this.$el);
        await utils.timeout(200);

        var folder = this.$el.find(".itemRow").eq(0);
        $(".actionmenu a.selectAll", folder).trigger("click");
        await utils.timeout(200);
        expect($("table tbody .selection input:checked", this.$el).length).toEqual(0);
        // all items in the folder be populated within the selection well.
        expect(this.$el.find("#btn-selected-items").html()).toContain("101");
    });

    it("test navigate to item", async function () {
        registry.scan(this.$el);
        await utils.timeout(200);
        var item = this.$el.find(".itemRow").eq(10);
        expect(item.data().id).toEqual("item9");
        expect($(".title a.manage", item).attr("href")).toEqual(
            "http://localhost:9876/item9"
        );
        expect($(".actionmenu a.openItem", item).attr("href")).toEqual(
            "http://localhost:9876/item9"
        );
        expect($(".actionmenu a.editItem", item).attr("href")).toEqual(
            "http://localhost:9876/item9/edit"
        );
    });

    it("test navigate to folder push states", async function () {
        registry.scan(this.$el);
        await utils.timeout(200);
        var item = this.$el.find(".itemRow").eq(0);
        expect(item.data().id).toEqual("folder");
        $(".title a.manage", item).trigger("click");
        await utils.timeout(100);
        expect(window.history.pushed.url).toEqual(
            "http://localhost:9876/folder/folder_contents"
        );
        expect(structureUrlChangedPath).toEqual("/folder");

        $(".fc-breadcrumbs a", this.$el).eq(0).trigger("click");
        await utils.timeout(100);
        expect(window.history.pushed.url).toEqual(
            "http://localhost:9876/folder_contents"
        );
        expect(structureUrlChangedPath).toEqual("");
    });

    it("test navigate to folder pop states", async function () {
        registry.scan(this.$el);
        await utils.timeout(100);
        // Need to inject this to the mocked window location attribute the
        // code will check against.  This url is set before the trigger.
        dummyWindow.location = {
            href: "http://localhost:9876/folder/folder/folder_contents",
        };
        // then trigger off the real window.
        $(window).trigger("popstate");
        await utils.timeout(100);
        expect(structureUrlChangedPath).toEqual("/folder/folder");
    });

    it("text drag and drop ordering", async function() {
        registry.scan(this.$el);
        await utils.timeout(100);

        // check for "order-support" wrapper class
        // this would have prevented issue https://github.com/plone/mockup/pull/1371
        expect(this.$el.find(".order-support").length).toEqual(1)

        // XXX: actually simulate mousedown/move/up somehow
    });
});
