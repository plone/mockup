{"version":3,"file":"chunks/11203.8fb6f670979a1d20cc7a.min.js","mappings":"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","sources":["webpack://@plone/mockup/./node_modules/tinymce/plugins/emoticons/index.js","webpack://@plone/mockup/./node_modules/tinymce/plugins/emoticons/plugin.js"],"sourcesContent":["// Exports the \"emoticons\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/emoticons')\n//   ES2015:\n//     import 'tinymce/plugins/emoticons'\nrequire('./plugin.js');","/**\n * TinyMCE version 7.9.1 (2025-05-29)\n */\n\n(function () {\n    'use strict';\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    /* eslint-disable @typescript-eslint/no-wrapper-object-types */\n    const isSimpleType = (type) => (value) => typeof value === type;\n    const eq = (t) => (a) => t === a;\n    const isNull = eq(null);\n    const isUndefined = eq(undefined);\n    const isNullable = (a) => a === null || a === undefined;\n    const isNonNullable = (a) => !isNullable(a);\n    const isFunction = isSimpleType('function');\n\n    const noop = () => { };\n    const constant = (value) => {\n        return () => {\n            return value;\n        };\n    };\n    const never = constant(false);\n\n    /**\n     * The `Optional` type represents a value (of any type) that potentially does\n     * not exist. Any `Optional<T>` can either be a `Some<T>` (in which case the\n     * value does exist) or a `None` (in which case the value does not exist). This\n     * module defines a whole lot of FP-inspired utility functions for dealing with\n     * `Optional` objects.\n     *\n     * Comparison with null or undefined:\n     * - We don't get fancy null coalescing operators with `Optional`\n     * - We do get fancy helper functions with `Optional`\n     * - `Optional` support nesting, and allow for the type to still be nullable (or\n     * another `Optional`)\n     * - There is no option to turn off strict-optional-checks like there is for\n     * strict-null-checks\n     */\n    class Optional {\n        // The internal representation has a `tag` and a `value`, but both are\n        // private: able to be console.logged, but not able to be accessed by code\n        constructor(tag, value) {\n            this.tag = tag;\n            this.value = value;\n        }\n        // --- Identities ---\n        /**\n         * Creates a new `Optional<T>` that **does** contain a value.\n         */\n        static some(value) {\n            return new Optional(true, value);\n        }\n        /**\n         * Create a new `Optional<T>` that **does not** contain a value. `T` can be\n         * any type because we don't actually have a `T`.\n         */\n        static none() {\n            return Optional.singletonNone;\n        }\n        /**\n         * Perform a transform on an `Optional` type. Regardless of whether this\n         * `Optional` contains a value or not, `fold` will return a value of type `U`.\n         * If this `Optional` does not contain a value, the `U` will be created by\n         * calling `onNone`. If this `Optional` does contain a value, the `U` will be\n         * created by calling `onSome`.\n         *\n         * For the FP enthusiasts in the room, this function:\n         * 1. Could be used to implement all of the functions below\n         * 2. Forms a catamorphism\n         */\n        fold(onNone, onSome) {\n            if (this.tag) {\n                return onSome(this.value);\n            }\n            else {\n                return onNone();\n            }\n        }\n        /**\n         * Determine if this `Optional` object contains a value.\n         */\n        isSome() {\n            return this.tag;\n        }\n        /**\n         * Determine if this `Optional` object **does not** contain a value.\n         */\n        isNone() {\n            return !this.tag;\n        }\n        // --- Functor (name stolen from Haskell / maths) ---\n        /**\n         * Perform a transform on an `Optional` object, **if** there is a value. If\n         * you provide a function to turn a T into a U, this is the function you use\n         * to turn an `Optional<T>` into an `Optional<U>`. If this **does** contain\n         * a value then the output will also contain a value (that value being the\n         * output of `mapper(this.value)`), and if this **does not** contain a value\n         * then neither will the output.\n         */\n        map(mapper) {\n            if (this.tag) {\n                return Optional.some(mapper(this.value));\n            }\n            else {\n                return Optional.none();\n            }\n        }\n        // --- Monad (name stolen from Haskell / maths) ---\n        /**\n         * Perform a transform on an `Optional` object, **if** there is a value.\n         * Unlike `map`, here the transform itself also returns an `Optional`.\n         */\n        bind(binder) {\n            if (this.tag) {\n                return binder(this.value);\n            }\n            else {\n                return Optional.none();\n            }\n        }\n        // --- Traversable (name stolen from Haskell / maths) ---\n        /**\n         * For a given predicate, this function finds out if there **exists** a value\n         * inside this `Optional` object that meets the predicate. In practice, this\n         * means that for `Optional`s that do not contain a value it returns false (as\n         * no predicate-meeting value exists).\n         */\n        exists(predicate) {\n            return this.tag && predicate(this.value);\n        }\n        /**\n         * For a given predicate, this function finds out if **all** the values inside\n         * this `Optional` object meet the predicate. In practice, this means that\n         * for `Optional`s that do not contain a value it returns true (as all 0\n         * objects do meet the predicate).\n         */\n        forall(predicate) {\n            return !this.tag || predicate(this.value);\n        }\n        filter(predicate) {\n            if (!this.tag || predicate(this.value)) {\n                return this;\n            }\n            else {\n                return Optional.none();\n            }\n        }\n        // --- Getters ---\n        /**\n         * Get the value out of the inside of the `Optional` object, using a default\n         * `replacement` value if the provided `Optional` object does not contain a\n         * value.\n         */\n        getOr(replacement) {\n            return this.tag ? this.value : replacement;\n        }\n        /**\n         * Get the value out of the inside of the `Optional` object, using a default\n         * `replacement` value if the provided `Optional` object does not contain a\n         * value.  Unlike `getOr`, in this method the `replacement` object is also\n         * `Optional` - meaning that this method will always return an `Optional`.\n         */\n        or(replacement) {\n            return this.tag ? this : replacement;\n        }\n        /**\n         * Get the value out of the inside of the `Optional` object, using a default\n         * `replacement` value if the provided `Optional` object does not contain a\n         * value. Unlike `getOr`, in this method the `replacement` value is\n         * \"thunked\" - that is to say that you don't pass a value to `getOrThunk`, you\n         * pass a function which (if called) will **return** the `value` you want to\n         * use.\n         */\n        getOrThunk(thunk) {\n            return this.tag ? this.value : thunk();\n        }\n        /**\n         * Get the value out of the inside of the `Optional` object, using a default\n         * `replacement` value if the provided Optional object does not contain a\n         * value.\n         *\n         * Unlike `or`, in this method the `replacement` value is \"thunked\" - that is\n         * to say that you don't pass a value to `orThunk`, you pass a function which\n         * (if called) will **return** the `value` you want to use.\n         *\n         * Unlike `getOrThunk`, in this method the `replacement` value is also\n         * `Optional`, meaning that this method will always return an `Optional`.\n         */\n        orThunk(thunk) {\n            return this.tag ? this : thunk();\n        }\n        /**\n         * Get the value out of the inside of the `Optional` object, throwing an\n         * exception if the provided `Optional` object does not contain a value.\n         *\n         * WARNING:\n         * You should only be using this function if you know that the `Optional`\n         * object **is not** empty (otherwise you're throwing exceptions in production\n         * code, which is bad).\n         *\n         * In tests this is more acceptable.\n         *\n         * Prefer other methods to this, such as `.each`.\n         */\n        getOrDie(message) {\n            if (!this.tag) {\n                throw new Error(message !== null && message !== void 0 ? message : 'Called getOrDie on None');\n            }\n            else {\n                return this.value;\n            }\n        }\n        // --- Interop with null and undefined ---\n        /**\n         * Creates an `Optional` value from a nullable (or undefined-able) input.\n         * Null, or undefined, is converted to `None`, and anything else is converted\n         * to `Some`.\n         */\n        static from(value) {\n            return isNonNullable(value) ? Optional.some(value) : Optional.none();\n        }\n        /**\n         * Converts an `Optional` to a nullable type, by getting the value if it\n         * exists, or returning `null` if it does not.\n         */\n        getOrNull() {\n            return this.tag ? this.value : null;\n        }\n        /**\n         * Converts an `Optional` to an undefined-able type, by getting the value if\n         * it exists, or returning `undefined` if it does not.\n         */\n        getOrUndefined() {\n            return this.value;\n        }\n        // --- Utilities ---\n        /**\n         * If the `Optional` contains a value, perform an action on that value.\n         * Unlike the rest of the methods on this type, `.each` has side-effects. If\n         * you want to transform an `Optional<T>` **into** something, then this is not\n         * the method for you. If you want to use an `Optional<T>` to **do**\n         * something, then this is the method for you - provided you're okay with not\n         * doing anything in the case where the `Optional` doesn't have a value inside\n         * it. If you're not sure whether your use-case fits into transforming\n         * **into** something or **doing** something, check whether it has a return\n         * value. If it does, you should be performing a transform.\n         */\n        each(worker) {\n            if (this.tag) {\n                worker(this.value);\n            }\n        }\n        /**\n         * Turn the `Optional` object into an array that contains all of the values\n         * stored inside the `Optional`. In practice, this means the output will have\n         * either 0 or 1 elements.\n         */\n        toArray() {\n            return this.tag ? [this.value] : [];\n        }\n        /**\n         * Turn the `Optional` object into a string for debugging or printing. Not\n         * recommended for production code, but good for debugging. Also note that\n         * these days an `Optional` object can be logged to the console directly, and\n         * its inner value (if it exists) will be visible.\n         */\n        toString() {\n            return this.tag ? `some(${this.value})` : 'none()';\n        }\n    }\n    // Sneaky optimisation: every instance of Optional.none is identical, so just\n    // reuse the same object\n    Optional.singletonNone = new Optional(false);\n\n    /* eslint-disable @typescript-eslint/unbound-method */\n    const nativeSlice = Array.prototype.slice;\n    const exists = (xs, pred) => {\n        for (let i = 0, len = xs.length; i < len; i++) {\n            const x = xs[i];\n            if (pred(x, i)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    const map$1 = (xs, f) => {\n        // pre-allocating array size when it's guaranteed to be known\n        // http://jsperf.com/push-allocated-vs-dynamic/22\n        const len = xs.length;\n        const r = new Array(len);\n        for (let i = 0; i < len; i++) {\n            const x = xs[i];\n            r[i] = f(x, i);\n        }\n        return r;\n    };\n    // Unwound implementing other functions in terms of each.\n    // The code size is roughly the same, and it should allow for better optimisation.\n    // const each = function<T, U>(xs: T[], f: (x: T, i?: number, xs?: T[]) => void): void {\n    const each$1 = (xs, f) => {\n        for (let i = 0, len = xs.length; i < len; i++) {\n            const x = xs[i];\n            f(x, i);\n        }\n    };\n    isFunction(Array.from) ? Array.from : (x) => nativeSlice.call(x);\n\n    // There are many variations of Object iteration that are faster than the 'for-in' style:\n    // http://jsperf.com/object-keys-iteration/107\n    //\n    // Use the native keys if it is available (IE9+), otherwise fall back to manually filtering\n    const keys = Object.keys;\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const hasOwnProperty = Object.hasOwnProperty;\n    const each = (obj, f) => {\n        const props = keys(obj);\n        for (let k = 0, len = props.length; k < len; k++) {\n            const i = props[k];\n            const x = obj[i];\n            f(x, i);\n        }\n    };\n    const map = (obj, f) => {\n        return tupleMap(obj, (x, i) => ({\n            k: i,\n            v: f(x, i)\n        }));\n    };\n    const tupleMap = (obj, f) => {\n        const r = {};\n        each(obj, (x, i) => {\n            const tuple = f(x, i);\n            r[tuple.k] = tuple.v;\n        });\n        return r;\n    };\n    const has = (obj, key) => hasOwnProperty.call(obj, key);\n\n    const Cell = (initial) => {\n        let value = initial;\n        const get = () => {\n            return value;\n        };\n        const set = (v) => {\n            value = v;\n        };\n        return {\n            get,\n            set\n        };\n    };\n\n    const shallow = (old, nu) => {\n        return nu;\n    };\n    const baseMerge = (merger) => {\n        return (...objects) => {\n            if (objects.length === 0) {\n                throw new Error(`Can't merge zero objects`);\n            }\n            const ret = {};\n            for (let j = 0; j < objects.length; j++) {\n                const curObject = objects[j];\n                for (const key in curObject) {\n                    if (has(curObject, key)) {\n                        ret[key] = merger(ret[key], curObject[key]);\n                    }\n                }\n            }\n            return ret;\n        };\n    };\n    const merge = baseMerge(shallow);\n\n    const singleton = (doRevoke) => {\n        const subject = Cell(Optional.none());\n        const revoke = () => subject.get().each(doRevoke);\n        const clear = () => {\n            revoke();\n            subject.set(Optional.none());\n        };\n        const isSet = () => subject.get().isSome();\n        const get = () => subject.get();\n        const set = (s) => {\n            revoke();\n            subject.set(Optional.some(s));\n        };\n        return {\n            clear,\n            isSet,\n            get,\n            set\n        };\n    };\n    const value = () => {\n        const subject = singleton(noop);\n        const on = (f) => subject.get().each(f);\n        return {\n            ...subject,\n            on\n        };\n    };\n\n    const checkRange = (str, substr, start) => substr === '' || str.length >= substr.length && str.substr(start, start + substr.length) === substr;\n    const contains = (str, substr, start = 0, end) => {\n        const idx = str.indexOf(substr, start);\n        if (idx !== -1) {\n            return isUndefined(end) ? true : idx + substr.length <= end;\n        }\n        else {\n            return false;\n        }\n    };\n    /** Does 'str' start with 'prefix'?\n     *  Note: all strings start with the empty string.\n     *        More formally, for all strings x, startsWith(x, \"\").\n     *        This is so that for all strings x and y, startsWith(y + x, y)\n     */\n    const startsWith = (str, prefix) => {\n        return checkRange(str, prefix, 0);\n    };\n\n    // Run a function fn after rate ms. If another invocation occurs\n    // during the time it is waiting, reschedule the function again\n    // with the new arguments.\n    const last = (fn, rate) => {\n        let timer = null;\n        const cancel = () => {\n            if (!isNull(timer)) {\n                clearTimeout(timer);\n                timer = null;\n            }\n        };\n        const throttle = (...args) => {\n            cancel();\n            timer = setTimeout(() => {\n                timer = null;\n                fn.apply(null, args);\n            }, rate);\n        };\n        return {\n            cancel,\n            throttle\n        };\n    };\n\n    const insertEmoticon = (editor, ch) => {\n        editor.insertContent(ch);\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.Resource');\n\n    const DEFAULT_ID = 'tinymce.plugins.emoticons';\n    const option = (name) => (editor) => editor.options.get(name);\n    const register$2 = (editor, pluginUrl) => {\n        const registerOption = editor.options.register;\n        registerOption('emoticons_database', {\n            processor: 'string',\n            default: 'emojis'\n        });\n        registerOption('emoticons_database_url', {\n            processor: 'string',\n            default: `${pluginUrl}/js/${getEmojiDatabase(editor)}${editor.suffix}.js`\n        });\n        registerOption('emoticons_database_id', {\n            processor: 'string',\n            default: DEFAULT_ID\n        });\n        registerOption('emoticons_append', {\n            processor: 'object',\n            default: {}\n        });\n        registerOption('emoticons_images_url', {\n            processor: 'string',\n            default: 'https://cdnjs.cloudflare.com/ajax/libs/twemoji/15.1.0/72x72/'\n        });\n    };\n    const getEmojiDatabase = option('emoticons_database');\n    const getEmojiDatabaseUrl = option('emoticons_database_url');\n    const getEmojiDatabaseId = option('emoticons_database_id');\n    const getAppendedEmoji = option('emoticons_append');\n    const getEmojiImageUrl = option('emoticons_images_url');\n\n    const ALL_CATEGORY = 'All';\n    const categoryNameMap = {\n        symbols: 'Symbols',\n        people: 'People',\n        animals_and_nature: 'Animals and Nature',\n        food_and_drink: 'Food and Drink',\n        activity: 'Activity',\n        travel_and_places: 'Travel and Places',\n        objects: 'Objects',\n        flags: 'Flags',\n        user: 'User Defined'\n    };\n    const translateCategory = (categories, name) => has(categories, name) ? categories[name] : name;\n    const getUserDefinedEmoji = (editor) => {\n        const userDefinedEmoticons = getAppendedEmoji(editor);\n        return map(userDefinedEmoticons, (value) => \n        // Set some sane defaults for the custom emoji entry\n        ({ keywords: [], category: 'user', ...value }));\n    };\n    // TODO: Consider how to share this loading across different editors\n    const initDatabase = (editor, databaseUrl, databaseId) => {\n        const categories = value();\n        const all = value();\n        const emojiImagesUrl = getEmojiImageUrl(editor);\n        const getEmoji = (lib) => {\n            // Note: This is a little hacky, but the database doesn't provide a way for us to tell what sort of database is being used\n            if (startsWith(lib.char, '<img')) {\n                return lib.char.replace(/src=\"([^\"]+)\"/, (match, url) => `src=\"${emojiImagesUrl}${url}\"`);\n            }\n            else {\n                return lib.char;\n            }\n        };\n        const processEmojis = (emojis) => {\n            const cats = {};\n            const everything = [];\n            each(emojis, (lib, title) => {\n                const entry = {\n                    // Omitting fitzpatrick_scale\n                    title,\n                    keywords: lib.keywords,\n                    char: getEmoji(lib),\n                    category: translateCategory(categoryNameMap, lib.category)\n                };\n                const current = cats[entry.category] !== undefined ? cats[entry.category] : [];\n                cats[entry.category] = current.concat([entry]);\n                everything.push(entry);\n            });\n            categories.set(cats);\n            all.set(everything);\n        };\n        editor.on('init', () => {\n            global.load(databaseId, databaseUrl).then((emojis) => {\n                const userEmojis = getUserDefinedEmoji(editor);\n                processEmojis(merge(emojis, userEmojis));\n            }, (err) => {\n                // eslint-disable-next-line no-console\n                console.log(`Failed to load emojis: ${err}`);\n                categories.set({});\n                all.set([]);\n            });\n        });\n        const listCategory = (category) => {\n            if (category === ALL_CATEGORY) {\n                return listAll();\n            }\n            return categories.get().bind((cats) => Optional.from(cats[category])).getOr([]);\n        };\n        const listAll = () => all.get().getOr([]);\n        const listCategories = () => \n        // TODO: Category key order should be adjusted to match the standard\n        [ALL_CATEGORY].concat(keys(categories.get().getOr({})));\n        const waitForLoad = () => {\n            if (hasLoaded()) {\n                return Promise.resolve(true);\n            }\n            else {\n                return new Promise((resolve, reject) => {\n                    let numRetries = 15;\n                    const interval = setInterval(() => {\n                        if (hasLoaded()) {\n                            clearInterval(interval);\n                            resolve(true);\n                        }\n                        else {\n                            numRetries--;\n                            if (numRetries < 0) {\n                                // eslint-disable-next-line no-console\n                                console.log('Could not load emojis from url: ' + databaseUrl);\n                                clearInterval(interval);\n                                reject(false);\n                            }\n                        }\n                    }, 100);\n                });\n            }\n        };\n        const hasLoaded = () => categories.isSet() && all.isSet();\n        return {\n            listCategories,\n            hasLoaded,\n            waitForLoad,\n            listAll,\n            listCategory\n        };\n    };\n\n    const emojiMatches = (emoji, lowerCasePattern) => contains(emoji.title.toLowerCase(), lowerCasePattern) ||\n        exists(emoji.keywords, (k) => contains(k.toLowerCase(), lowerCasePattern));\n    const emojisFrom = (list, pattern, maxResults) => {\n        const matches = [];\n        const lowerCasePattern = pattern.toLowerCase();\n        const reachedLimit = maxResults.fold(() => never, (max) => (size) => size >= max);\n        for (let i = 0; i < list.length; i++) {\n            // TODO: more intelligent search by showing title matches at the top, keyword matches after that (use two arrays and concat at the end)\n            if (pattern.length === 0 || emojiMatches(list[i], lowerCasePattern)) {\n                matches.push({\n                    value: list[i].char,\n                    text: list[i].title,\n                    icon: list[i].char\n                });\n                if (reachedLimit(matches.length)) {\n                    break;\n                }\n            }\n        }\n        return matches;\n    };\n\n    const patternName = 'pattern';\n    const open = (editor, database) => {\n        const initialState = {\n            pattern: '',\n            results: emojisFrom(database.listAll(), '', Optional.some(300))\n        };\n        const currentTab = Cell(ALL_CATEGORY);\n        const scan = (dialogApi) => {\n            const dialogData = dialogApi.getData();\n            const category = currentTab.get();\n            const candidates = database.listCategory(category);\n            const results = emojisFrom(candidates, dialogData[patternName], category === ALL_CATEGORY ? Optional.some(300) : Optional.none());\n            dialogApi.setData({\n                results\n            });\n        };\n        const updateFilter = last((dialogApi) => {\n            scan(dialogApi);\n        }, 200);\n        const searchField = {\n            label: 'Search',\n            type: 'input',\n            name: patternName\n        };\n        const resultsField = {\n            type: 'collection',\n            name: 'results'\n            // TODO TINY-3229 implement collection columns properly\n            // columns: 'auto'\n        };\n        const getInitialState = () => {\n            const body = {\n                type: 'tabpanel',\n                // All tabs have the same fields.\n                tabs: map$1(database.listCategories(), (cat) => ({\n                    title: cat,\n                    name: cat,\n                    items: [searchField, resultsField]\n                }))\n            };\n            return {\n                title: 'Emojis',\n                size: 'normal',\n                body,\n                initialData: initialState,\n                onTabChange: (dialogApi, details) => {\n                    currentTab.set(details.newTabName);\n                    updateFilter.throttle(dialogApi);\n                },\n                onChange: updateFilter.throttle,\n                onAction: (dialogApi, actionData) => {\n                    if (actionData.name === 'results') {\n                        insertEmoticon(editor, actionData.value);\n                        dialogApi.close();\n                    }\n                },\n                buttons: [\n                    {\n                        type: 'cancel',\n                        text: 'Close',\n                        primary: true\n                    }\n                ]\n            };\n        };\n        const dialogApi = editor.windowManager.open(getInitialState());\n        dialogApi.focus(patternName);\n        if (!database.hasLoaded()) {\n            dialogApi.block('Loading emojis...');\n            database.waitForLoad().then(() => {\n                dialogApi.redial(getInitialState());\n                updateFilter.throttle(dialogApi);\n                dialogApi.focus(patternName);\n                dialogApi.unblock();\n            }).catch((_err) => {\n                dialogApi.redial({\n                    title: 'Emojis',\n                    body: {\n                        type: 'panel',\n                        items: [\n                            {\n                                type: 'alertbanner',\n                                level: 'error',\n                                icon: 'warning',\n                                text: 'Could not load emojis'\n                            }\n                        ]\n                    },\n                    buttons: [\n                        {\n                            type: 'cancel',\n                            text: 'Close',\n                            primary: true\n                        }\n                    ],\n                    initialData: {\n                        pattern: '',\n                        results: []\n                    }\n                });\n                dialogApi.focus(patternName);\n                dialogApi.unblock();\n            });\n        }\n    };\n\n    const register$1 = (editor, database) => {\n        editor.addCommand('mceEmoticons', () => open(editor, database));\n    };\n\n    const setup = (editor) => {\n        editor.on('PreInit', () => {\n            editor.parser.addAttributeFilter('data-emoticon', (nodes) => {\n                each$1(nodes, (node) => {\n                    node.attr('data-mce-resize', 'false');\n                    node.attr('data-mce-placeholder', '1');\n                });\n            });\n        });\n    };\n\n    const init = (editor, database) => {\n        editor.ui.registry.addAutocompleter('emoticons', {\n            trigger: ':',\n            columns: 'auto',\n            minChars: 2,\n            fetch: (pattern, maxResults) => database.waitForLoad().then(() => {\n                const candidates = database.listAll();\n                return emojisFrom(candidates, pattern, Optional.some(maxResults));\n            }),\n            onAction: (autocompleteApi, rng, value) => {\n                editor.selection.setRng(rng);\n                editor.insertContent(value);\n                autocompleteApi.hide();\n            }\n        });\n    };\n\n    const onSetupEditable = (editor) => (api) => {\n        const nodeChanged = () => {\n            api.setEnabled(editor.selection.isEditable());\n        };\n        editor.on('NodeChange', nodeChanged);\n        nodeChanged();\n        return () => {\n            editor.off('NodeChange', nodeChanged);\n        };\n    };\n    const register = (editor) => {\n        const onAction = () => editor.execCommand('mceEmoticons');\n        editor.ui.registry.addButton('emoticons', {\n            tooltip: 'Emojis',\n            icon: 'emoji',\n            onAction,\n            onSetup: onSetupEditable(editor)\n        });\n        editor.ui.registry.addMenuItem('emoticons', {\n            text: 'Emojis...',\n            icon: 'emoji',\n            onAction,\n            onSetup: onSetupEditable(editor)\n        });\n    };\n\n    /**\n     * This class contains all core logic for the emoticons plugin.\n     *\n     * @class tinymce.emoticons.Plugin\n     * @private\n     */\n    var Plugin = () => {\n        global$1.add('emoticons', (editor, pluginUrl) => {\n            register$2(editor, pluginUrl);\n            const databaseUrl = getEmojiDatabaseUrl(editor);\n            const databaseId = getEmojiDatabaseId(editor);\n            const database = initDatabase(editor, databaseUrl, databaseId);\n            register$1(editor, database);\n            register(editor);\n            init(editor, database);\n            setup(editor);\n            return {\n                getAllEmojis: () => database.waitForLoad().then(() => database.listAll())\n            };\n        });\n    };\n\n    Plugin();\n    /** *****\n     * DO NOT EXPORT ANYTHING\n     *\n     * IF YOU DO ROLLUP WILL LEAVE A GLOBAL ON THE PAGE\n     *******/\n\n})();\n"],"names":["global$1","tinymce","util","Tools","resolve","eq","t","a","isNull","isUndefined","undefined","isFunction","type","value","noop","never","constant","Optional","constructor","tag","this","some","none","singletonNone","fold","onNone","onSome","isSome","isNone","map","mapper","bind","binder","exists","predicate","forall","filter","getOr","replacement","or","getOrThunk","thunk","orThunk","getOrDie","message","Error","from","isNullable","getOrNull","getOrUndefined","each","worker","toArray","toString","Array","prototype","slice","map$1","xs","f","len","length","r","i","x","keys","Object","hasOwnProperty","obj","props","k","tupleMap","tuple","v","has","key","call","Cell","initial","get","set","merge","merger","old","nu","objects","ret","j","curObject","subject","doRevoke","revoke","clear","isSet","s","singleton","on","contains","str","substr","start","end","idx","indexOf","global","option","name","editor","options","getEmojiDatabase","getEmojiDatabaseUrl","getEmojiDatabaseId","getAppendedEmoji","getEmojiImageUrl","ALL_CATEGORY","categoryNameMap","symbols","people","animals_and_nature","food_and_drink","activity","travel_and_places","flags","user","translateCategory","categories","getUserDefinedEmoji","userDefinedEmoticons","keywords","category","initDatabase","databaseUrl","databaseId","all","emojiImagesUrl","getEmoji","lib","checkRange","char","replace","match","url","load","then","emojis","userEmojis","cats","everything","title","entry","current","concat","push","processEmojis","err","console","log","listAll","hasLoaded","listCategories","waitForLoad","Promise","reject","numRetries","interval","setInterval","clearInterval","listCategory","emojiMatches","emoji","lowerCasePattern","toLowerCase","pred","emojisFrom","list","pattern","maxResults","matches","reachedLimit","max","size","text","icon","patternName","open","database","initialState","results","currentTab","updateFilter","fn","rate","timer","cancel","clearTimeout","throttle","args","setTimeout","apply","last","dialogApi","dialogData","getData","candidates","setData","scan","searchField","label","resultsField","getInitialState","body","tabs","cat","items","initialData","onTabChange","details","newTabName","onChange","onAction","actionData","ch","insertContent","insertEmoticon","close","buttons","primary","windowManager","focus","block","redial","unblock","catch","_err","level","onSetupEditable","api","nodeChanged","setEnabled","selection","isEditable","off","add","pluginUrl","registerOption","register","processor","default","suffix","register$2","addCommand","register$1","execCommand","ui","registry","addButton","tooltip","onSetup","addMenuItem","addAutocompleter","trigger","columns","minChars","fetch","autocompleteApi","rng","setRng","hide","init","parser","addAttributeFilter","nodes","each$1","node","attr","setup","getAllEmojis"],"sourceRoot":""}