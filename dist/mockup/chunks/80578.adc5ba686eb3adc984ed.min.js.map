{"version":3,"file":"chunks/80578.adc5ba686eb3adc984ed.min.js","mappings":"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","sources":["webpack://@plone/mockup/./node_modules/tinymce/plugins/importcss/plugin.js","webpack://@plone/mockup/./node_modules/tinymce/plugins/importcss/index.js"],"sourcesContent":["/**\n * TinyMCE version 7.9.1 (2025-05-29)\n */\n\n(function () {\n    'use strict';\n\n    var global$4 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    /* eslint-disable @typescript-eslint/no-wrapper-object-types */\n    const hasProto = (v, constructor, predicate) => {\n        var _a;\n        if (predicate(v, constructor.prototype)) {\n            return true;\n        }\n        else {\n            // String-based fallback time\n            return ((_a = v.constructor) === null || _a === void 0 ? void 0 : _a.name) === constructor.name;\n        }\n    };\n    const typeOf = (x) => {\n        const t = typeof x;\n        if (x === null) {\n            return 'null';\n        }\n        else if (t === 'object' && Array.isArray(x)) {\n            return 'array';\n        }\n        else if (t === 'object' && hasProto(x, String, (o, proto) => proto.isPrototypeOf(o))) {\n            return 'string';\n        }\n        else {\n            return t;\n        }\n    };\n    const isType = (type) => (value) => typeOf(value) === type;\n    const isSimpleType = (type) => (value) => typeof value === type;\n    const isString = isType('string');\n    const isObject = isType('object');\n    const isArray = isType('array');\n    const isFunction = isSimpleType('function');\n\n    /* eslint-disable @typescript-eslint/unbound-method */\n    const nativeSlice = Array.prototype.slice;\n    const nativePush = Array.prototype.push;\n    const map = (xs, f) => {\n        // pre-allocating array size when it's guaranteed to be known\n        // http://jsperf.com/push-allocated-vs-dynamic/22\n        const len = xs.length;\n        const r = new Array(len);\n        for (let i = 0; i < len; i++) {\n            const x = xs[i];\n            r[i] = f(x, i);\n        }\n        return r;\n    };\n    const flatten = (xs) => {\n        // Note, this is possible because push supports multiple arguments:\n        // http://jsperf.com/concat-push/6\n        // Note that in the past, concat() would silently work (very slowly) for array-like objects.\n        // With this change it will throw an error.\n        const r = [];\n        for (let i = 0, len = xs.length; i < len; ++i) {\n            // Ensure that each value is an array itself\n            if (!isArray(xs[i])) {\n                throw new Error('Arr.flatten item ' + i + ' was not an array, input: ' + xs);\n            }\n            nativePush.apply(r, xs[i]);\n        }\n        return r;\n    };\n    const bind = (xs, f) => flatten(map(xs, f));\n    isFunction(Array.from) ? Array.from : (x) => nativeSlice.call(x);\n\n    var global$3 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.EditorManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.Env');\n\n    var global = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    const option = (name) => (editor) => editor.options.get(name);\n    const register = (editor) => {\n        const registerOption = editor.options.register;\n        const filterProcessor = (value) => isString(value) || isFunction(value) || isObject(value);\n        registerOption('importcss_merge_classes', {\n            processor: 'boolean',\n            default: true\n        });\n        registerOption('importcss_exclusive', {\n            processor: 'boolean',\n            default: true\n        });\n        registerOption('importcss_selector_converter', {\n            processor: 'function'\n        });\n        registerOption('importcss_selector_filter', {\n            processor: filterProcessor\n        });\n        registerOption('importcss_file_filter', {\n            processor: filterProcessor\n        });\n        registerOption('importcss_groups', {\n            processor: 'object[]'\n        });\n        registerOption('importcss_append', {\n            processor: 'boolean',\n            default: false\n        });\n    };\n    const shouldMergeClasses = option('importcss_merge_classes');\n    const shouldImportExclusive = option('importcss_exclusive');\n    const getSelectorConverter = option('importcss_selector_converter');\n    const getSelectorFilter = option('importcss_selector_filter');\n    const getCssGroups = option('importcss_groups');\n    const shouldAppend = option('importcss_append');\n    const getFileFilter = option('importcss_file_filter');\n    const getSkin = option('skin');\n    const getSkinUrl = option('skin_url');\n\n    const generate = () => {\n        const ungroupedOrder = [];\n        const groupOrder = [];\n        const groups = {};\n        const addItemToGroup = (groupTitle, itemInfo) => {\n            if (groups[groupTitle]) {\n                groups[groupTitle].push(itemInfo);\n            }\n            else {\n                groupOrder.push(groupTitle);\n                groups[groupTitle] = [itemInfo];\n            }\n        };\n        const addItem = (itemInfo) => {\n            ungroupedOrder.push(itemInfo);\n        };\n        const toFormats = () => {\n            const groupItems = bind(groupOrder, (g) => {\n                const items = groups[g];\n                return items.length === 0 ? [] : [{\n                        title: g,\n                        items\n                    }];\n            });\n            return groupItems.concat(ungroupedOrder);\n        };\n        return {\n            addItemToGroup,\n            addItem,\n            toFormats\n        };\n    };\n\n    const internalEditorStyle = /^\\.(?:ephox|tiny-pageembed|mce)(?:[.-]+\\w+)+$/;\n    const removeCacheSuffix = (url) => {\n        const cacheSuffix = global$1.cacheSuffix;\n        if (isString(url)) {\n            url = url.replace('?' + cacheSuffix, '').replace('&' + cacheSuffix, '');\n        }\n        return url;\n    };\n    const isSkinContentCss = (editor, href) => {\n        const skin = getSkin(editor);\n        if (skin) {\n            const skinUrlBase = getSkinUrl(editor);\n            const skinUrl = skinUrlBase ? editor.documentBaseURI.toAbsolute(skinUrlBase) : global$2.baseURL + '/skins/ui/' + skin;\n            const contentSkinUrlPart = global$2.baseURL + '/skins/content/';\n            const suffix = editor.editorManager.suffix;\n            return href === skinUrl + '/content' + (editor.inline ? '.inline' : '') + `${suffix}.css` || href.indexOf(contentSkinUrlPart) !== -1;\n        }\n        return false;\n    };\n    const compileFilter = (filter) => {\n        if (isString(filter)) {\n            return (value) => {\n                return value.indexOf(filter) !== -1;\n            };\n        }\n        else if (filter instanceof RegExp) {\n            return (value) => {\n                return filter.test(value);\n            };\n        }\n        return filter;\n    };\n    const isCssImportRule = (rule) => rule.styleSheet;\n    const isCssPageRule = (rule) => rule.selectorText;\n    const getSelectors = (editor, doc, fileFilter) => {\n        const selectors = [];\n        const contentCSSUrls = {};\n        const append = (styleSheet, imported) => {\n            let href = styleSheet.href;\n            let rules;\n            href = removeCacheSuffix(href);\n            if (!href || fileFilter && !fileFilter(href, imported) || isSkinContentCss(editor, href)) {\n                return;\n            }\n            // TODO: Is this still need as TypeScript/MDN says imports doesn't exist?\n            global.each(styleSheet.imports, (styleSheet) => {\n                append(styleSheet, true);\n            });\n            try {\n                rules = styleSheet.cssRules || styleSheet.rules;\n            }\n            catch (_a) {\n                // Firefox fails on rules to remote domain for example:\n                // @import url(//fonts.googleapis.com/css?family=Pathway+Gothic+One);\n            }\n            global.each(rules, (cssRule) => {\n                if (isCssImportRule(cssRule) && cssRule.styleSheet) {\n                    append(cssRule.styleSheet, true);\n                }\n                else if (isCssPageRule(cssRule)) {\n                    global.each(cssRule.selectorText.split(','), (selector) => {\n                        selectors.push(global.trim(selector));\n                    });\n                }\n            });\n        };\n        global.each(editor.contentCSS, (url) => {\n            contentCSSUrls[url] = true;\n        });\n        if (!fileFilter) {\n            fileFilter = (href, imported) => {\n                return imported || contentCSSUrls[href];\n            };\n        }\n        try {\n            global.each(doc.styleSheets, (styleSheet) => {\n                append(styleSheet);\n            });\n        }\n        catch (_a) {\n            // Ignore\n        }\n        return selectors;\n    };\n    const defaultConvertSelectorToFormat = (editor, selectorText) => {\n        let format = {};\n        // Parse simple element.class1, .class1\n        const selector = /^(?:([a-z0-9\\-_]+))?(\\.[a-z0-9_\\-\\.]+)$/i.exec(selectorText);\n        if (!selector) {\n            return;\n        }\n        const elementName = selector[1];\n        const classes = selector[2].substr(1).split('.').join(' ');\n        const inlineSelectorElements = global.makeMap('a,img');\n        // element.class - Produce block formats\n        if (selector[1]) {\n            format = {\n                title: selectorText\n            };\n            if (editor.schema.getTextBlockElements()[elementName]) {\n                // Text block format ex: h1.class1\n                format.block = elementName;\n            }\n            else if (editor.schema.getBlockElements()[elementName] || inlineSelectorElements[elementName.toLowerCase()]) {\n                // Block elements such as table.class and special inline elements such as a.class or img.class\n                format.selector = elementName;\n            }\n            else {\n                // Inline format strong.class1\n                format.inline = elementName;\n            }\n        }\n        else if (selector[2]) {\n            // .class - Produce inline span with classes\n            format = {\n                inline: 'span',\n                title: selectorText.substr(1),\n                classes\n            };\n        }\n        // Append to or override class attribute\n        if (shouldMergeClasses(editor)) {\n            format.classes = classes;\n        }\n        else {\n            format.attributes = { class: classes };\n        }\n        return format;\n    };\n    const getGroupsBySelector = (groups, selector) => {\n        return global.grep(groups, (group) => {\n            return !group.filter || group.filter(selector);\n        });\n    };\n    const compileUserDefinedGroups = (groups) => {\n        return global.map(groups, (group) => {\n            return global.extend({}, group, {\n                original: group,\n                selectors: {},\n                filter: compileFilter(group.filter)\n            });\n        });\n    };\n    const isExclusiveMode = (editor, group) => {\n        // Exclusive mode can only be disabled when there are groups allowing the same style to be present in multiple groups\n        return group === null || shouldImportExclusive(editor);\n    };\n    const isUniqueSelector = (editor, selector, group, globallyUniqueSelectors) => {\n        return !(isExclusiveMode(editor, group) ? selector in globallyUniqueSelectors : selector in group.selectors);\n    };\n    const markUniqueSelector = (editor, selector, group, globallyUniqueSelectors) => {\n        if (isExclusiveMode(editor, group)) {\n            globallyUniqueSelectors[selector] = true;\n        }\n        else {\n            group.selectors[selector] = true;\n        }\n    };\n    const convertSelectorToFormat = (editor, plugin, selector, group) => {\n        let selectorConverter;\n        const converter = getSelectorConverter(editor);\n        if (group && group.selector_converter) {\n            selectorConverter = group.selector_converter;\n        }\n        else if (converter) {\n            selectorConverter = converter;\n        }\n        else {\n            selectorConverter = () => {\n                return defaultConvertSelectorToFormat(editor, selector);\n            };\n        }\n        return selectorConverter.call(plugin, selector, group);\n    };\n    const setup = (editor) => {\n        editor.on('init', () => {\n            const model = generate();\n            const globallyUniqueSelectors = {};\n            const selectorFilter = compileFilter(getSelectorFilter(editor));\n            const groups = compileUserDefinedGroups(getCssGroups(editor));\n            const processSelector = (selector, group) => {\n                if (isUniqueSelector(editor, selector, group, globallyUniqueSelectors)) {\n                    markUniqueSelector(editor, selector, group, globallyUniqueSelectors);\n                    const format = convertSelectorToFormat(editor, editor.plugins.importcss, selector, group);\n                    if (format) {\n                        const formatName = format.name || global$3.DOM.uniqueId();\n                        editor.formatter.register(formatName, format);\n                        return {\n                            title: format.title,\n                            format: formatName\n                        };\n                    }\n                }\n                return null;\n            };\n            global.each(getSelectors(editor, editor.getDoc(), compileFilter(getFileFilter(editor))), (selector) => {\n                if (!internalEditorStyle.test(selector)) {\n                    if (!selectorFilter || selectorFilter(selector)) {\n                        const selectorGroups = getGroupsBySelector(groups, selector);\n                        if (selectorGroups.length > 0) {\n                            global.each(selectorGroups, (group) => {\n                                const menuItem = processSelector(selector, group);\n                                if (menuItem) {\n                                    model.addItemToGroup(group.title, menuItem);\n                                }\n                            });\n                        }\n                        else {\n                            const menuItem = processSelector(selector, null);\n                            if (menuItem) {\n                                model.addItem(menuItem);\n                            }\n                        }\n                    }\n                }\n            });\n            const items = model.toFormats();\n            editor.dispatch('addStyleModifications', {\n                items,\n                replace: !shouldAppend(editor)\n            });\n        });\n    };\n\n    const get = (editor) => {\n        const convertSelectorToFormat = (selectorText) => {\n            return defaultConvertSelectorToFormat(editor, selectorText);\n        };\n        return {\n            convertSelectorToFormat\n        };\n    };\n\n    var Plugin = () => {\n        global$4.add('importcss', (editor) => {\n            register(editor);\n            setup(editor);\n            return get(editor);\n        });\n    };\n\n    Plugin();\n    /** *****\n     * DO NOT EXPORT ANYTHING\n     *\n     * IF YOU DO ROLLUP WILL LEAVE A GLOBAL ON THE PAGE\n     *******/\n\n})();\n","// Exports the \"importcss\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/importcss')\n//   ES2015:\n//     import 'tinymce/plugins/importcss'\nrequire('./plugin.js');"],"names":["global$4","tinymce","util","Tools","resolve","isType","type","value","x","t","Array","isArray","o","v","proto","constructor","String","prototype","isPrototypeOf","_a","name","typeOf","isString","isObject","isFunction","slice","nativePush","push","bind","xs","f","r","i","len","length","Error","apply","flatten","map","from","global$3","global$2","global$1","global","option","editor","options","get","shouldMergeClasses","shouldImportExclusive","getSelectorConverter","getSelectorFilter","getCssGroups","shouldAppend","getFileFilter","getSkin","getSkinUrl","internalEditorStyle","compileFilter","filter","indexOf","RegExp","test","getSelectors","doc","fileFilter","selectors","contentCSSUrls","append","styleSheet","imported","rules","href","url","cacheSuffix","replace","removeCacheSuffix","skin","skinUrlBase","skinUrl","documentBaseURI","toAbsolute","baseURL","contentSkinUrlPart","suffix","editorManager","inline","isSkinContentCss","each","imports","cssRules","cssRule","rule","selectorText","isCssPageRule","split","selector","trim","contentCSS","styleSheets","defaultConvertSelectorToFormat","format","exec","elementName","classes","substr","join","inlineSelectorElements","makeMap","title","schema","getTextBlockElements","block","getBlockElements","toLowerCase","attributes","class","isExclusiveMode","group","setup","on","model","ungroupedOrder","groupOrder","groups","addItemToGroup","groupTitle","itemInfo","addItem","toFormats","g","items","concat","generate","globallyUniqueSelectors","selectorFilter","extend","original","compileUserDefinedGroups","processSelector","isUniqueSelector","markUniqueSelector","plugin","selectorConverter","converter","selector_converter","call","convertSelectorToFormat","plugins","importcss","formatName","DOM","uniqueId","formatter","register","getDoc","selectorGroups","grep","getGroupsBySelector","menuItem","dispatch","add","registerOption","filterProcessor","processor","default"],"sourceRoot":""}