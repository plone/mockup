{"version":3,"file":"chunks/83683.5de4e4ea0016165c9512.min.js","mappings":"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","sources":["webpack://@plone/mockup/./node_modules/tinymce/plugins/anchor/index.js","webpack://@plone/mockup/./node_modules/tinymce/plugins/anchor/plugin.js"],"sourcesContent":["// Exports the \"anchor\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/anchor')\n//   ES2015:\n//     import 'tinymce/plugins/anchor'\nrequire('./plugin.js');","/**\n * TinyMCE version 7.2.1 (2024-07-03)\n */\n\n(function () {\n    'use strict';\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.dom.RangeUtils');\n\n    var global = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    const option = name => editor => editor.options.get(name);\n    const register$2 = editor => {\n      const registerOption = editor.options.register;\n      registerOption('allow_html_in_named_anchor', {\n        processor: 'boolean',\n        default: false\n      });\n    };\n    const allowHtmlInNamedAnchor = option('allow_html_in_named_anchor');\n\n    const namedAnchorSelector = 'a:not([href])';\n    const isEmptyString = str => !str;\n    const getIdFromAnchor = elm => {\n      const id = elm.getAttribute('id') || elm.getAttribute('name');\n      return id || '';\n    };\n    const isAnchor = elm => elm.nodeName.toLowerCase() === 'a';\n    const isNamedAnchor = elm => isAnchor(elm) && !elm.getAttribute('href') && getIdFromAnchor(elm) !== '';\n    const isEmptyNamedAnchor = elm => isNamedAnchor(elm) && !elm.firstChild;\n\n    const removeEmptyNamedAnchorsInSelection = editor => {\n      const dom = editor.dom;\n      global$1(dom).walk(editor.selection.getRng(), nodes => {\n        global.each(nodes, node => {\n          if (isEmptyNamedAnchor(node)) {\n            dom.remove(node, false);\n          }\n        });\n      });\n    };\n    const isValidId = id => /^[A-Za-z][A-Za-z0-9\\-:._]*$/.test(id);\n    const getNamedAnchor = editor => editor.dom.getParent(editor.selection.getStart(), namedAnchorSelector);\n    const getId = editor => {\n      const anchor = getNamedAnchor(editor);\n      if (anchor) {\n        return getIdFromAnchor(anchor);\n      } else {\n        return '';\n      }\n    };\n    const createAnchor = (editor, id) => {\n      editor.undoManager.transact(() => {\n        if (!allowHtmlInNamedAnchor(editor)) {\n          editor.selection.collapse(true);\n        }\n        if (editor.selection.isCollapsed()) {\n          editor.insertContent(editor.dom.createHTML('a', { id }));\n        } else {\n          removeEmptyNamedAnchorsInSelection(editor);\n          editor.formatter.remove('namedAnchor', undefined, undefined, true);\n          editor.formatter.apply('namedAnchor', { value: id });\n          editor.addVisual();\n        }\n      });\n    };\n    const updateAnchor = (editor, id, anchorElement) => {\n      anchorElement.removeAttribute('name');\n      anchorElement.id = id;\n      editor.addVisual();\n      editor.undoManager.add();\n    };\n    const insert = (editor, id) => {\n      const anchor = getNamedAnchor(editor);\n      if (anchor) {\n        updateAnchor(editor, id, anchor);\n      } else {\n        createAnchor(editor, id);\n      }\n      editor.focus();\n    };\n\n    const insertAnchor = (editor, newId) => {\n      if (!isValidId(newId)) {\n        editor.windowManager.alert('ID should start with a letter, followed only by letters, numbers, dashes, dots, colons or underscores.');\n        return false;\n      } else {\n        insert(editor, newId);\n        return true;\n      }\n    };\n    const open = editor => {\n      const currentId = getId(editor);\n      editor.windowManager.open({\n        title: 'Anchor',\n        size: 'normal',\n        body: {\n          type: 'panel',\n          items: [{\n              name: 'id',\n              type: 'input',\n              label: 'ID',\n              placeholder: 'example'\n            }]\n        },\n        buttons: [\n          {\n            type: 'cancel',\n            name: 'cancel',\n            text: 'Cancel'\n          },\n          {\n            type: 'submit',\n            name: 'save',\n            text: 'Save',\n            primary: true\n          }\n        ],\n        initialData: { id: currentId },\n        onSubmit: api => {\n          if (insertAnchor(editor, api.getData().id)) {\n            api.close();\n          }\n        }\n      });\n    };\n\n    const register$1 = editor => {\n      editor.addCommand('mceAnchor', () => {\n        open(editor);\n      });\n    };\n\n    const isNamedAnchorNode = node => isEmptyString(node.attr('href')) && !isEmptyString(node.attr('id') || node.attr('name'));\n    const isEmptyNamedAnchorNode = node => isNamedAnchorNode(node) && !node.firstChild;\n    const setContentEditable = state => nodes => {\n      for (let i = 0; i < nodes.length; i++) {\n        const node = nodes[i];\n        if (isEmptyNamedAnchorNode(node)) {\n          node.attr('contenteditable', state);\n        }\n      }\n    };\n    const setup = editor => {\n      editor.on('PreInit', () => {\n        editor.parser.addNodeFilter('a', setContentEditable('false'));\n        editor.serializer.addNodeFilter('a', setContentEditable(null));\n      });\n    };\n\n    const registerFormats = editor => {\n      editor.formatter.register('namedAnchor', {\n        inline: 'a',\n        selector: namedAnchorSelector,\n        remove: 'all',\n        split: true,\n        deep: true,\n        attributes: { id: '%value' },\n        onmatch: (node, _fmt, _itemName) => {\n          return isNamedAnchor(node);\n        }\n      });\n    };\n\n    const onSetupEditable = editor => api => {\n      const nodeChanged = () => {\n        api.setEnabled(editor.selection.isEditable());\n      };\n      editor.on('NodeChange', nodeChanged);\n      nodeChanged();\n      return () => {\n        editor.off('NodeChange', nodeChanged);\n      };\n    };\n    const register = editor => {\n      const onAction = () => editor.execCommand('mceAnchor');\n      editor.ui.registry.addToggleButton('anchor', {\n        icon: 'bookmark',\n        tooltip: 'Anchor',\n        onAction,\n        onSetup: buttonApi => {\n          const unbindSelectorChanged = editor.selection.selectorChangedWithUnbind('a:not([href])', buttonApi.setActive).unbind;\n          const unbindEditableChanged = onSetupEditable(editor)(buttonApi);\n          return () => {\n            unbindSelectorChanged();\n            unbindEditableChanged();\n          };\n        }\n      });\n      editor.ui.registry.addMenuItem('anchor', {\n        icon: 'bookmark',\n        text: 'Anchor...',\n        onAction,\n        onSetup: onSetupEditable(editor)\n      });\n    };\n\n    var Plugin = () => {\n      global$2.add('anchor', editor => {\n        register$2(editor);\n        setup(editor);\n        register$1(editor);\n        register(editor);\n        editor.on('PreInit', () => {\n          registerFormats(editor);\n        });\n      });\n    };\n\n    Plugin();\n\n})();\n"],"names":["global$2","tinymce","util","Tools","resolve","global$1","global","allowHtmlInNamedAnchor","name","editor","options","get","namedAnchorSelector","isEmptyString","str","getIdFromAnchor","elm","getAttribute","isNamedAnchor","nodeName","toLowerCase","isAnchor","removeEmptyNamedAnchorsInSelection","dom","walk","selection","getRng","nodes","each","node","firstChild","remove","getNamedAnchor","getParent","getStart","insert","id","anchor","anchorElement","removeAttribute","addVisual","undoManager","add","updateAnchor","transact","collapse","isCollapsed","insertContent","createHTML","formatter","undefined","apply","value","createAnchor","focus","open","currentId","getId","windowManager","title","size","body","type","items","label","placeholder","buttons","text","primary","initialData","onSubmit","api","newId","test","alert","insertAnchor","getData","close","isEmptyNamedAnchorNode","attr","isNamedAnchorNode","setContentEditable","state","i","length","onSetupEditable","nodeChanged","setEnabled","isEditable","on","off","registerOption","register","processor","default","register$2","parser","addNodeFilter","serializer","setup","addCommand","register$1","onAction","execCommand","ui","registry","addToggleButton","icon","tooltip","onSetup","buttonApi","unbindSelectorChanged","selectorChangedWithUnbind","setActive","unbind","unbindEditableChanged","addMenuItem","inline","selector","split","deep","attributes","onmatch","_fmt","_itemName","registerFormats"],"sourceRoot":""}