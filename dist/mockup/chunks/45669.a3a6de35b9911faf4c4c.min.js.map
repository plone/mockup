{"version":3,"file":"chunks/45669.a3a6de35b9911faf4c4c.min.js","mappings":"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","sources":["webpack://@plone/mockup/./node_modules/tinymce/plugins/autoresize/index.js","webpack://@plone/mockup/./node_modules/tinymce/plugins/autoresize/plugin.js"],"sourcesContent":["// Exports the \"autoresize\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/autoresize')\n//   ES2015:\n//     import 'tinymce/plugins/autoresize'\nrequire('./plugin.js');","/**\n * TinyMCE version 7.9.1 (2025-05-29)\n */\n\n(function () {\n    'use strict';\n\n    const Cell = (initial) => {\n        let value = initial;\n        const get = () => {\n            return value;\n        };\n        const set = (v) => {\n            value = v;\n        };\n        return {\n            get,\n            set\n        };\n    };\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global = tinymce.util.Tools.resolve('tinymce.Env');\n\n    const fireResizeEditor = (editor) => editor.dispatch('ResizeEditor');\n\n    const option = (name) => (editor) => editor.options.get(name);\n    const register$1 = (editor) => {\n        const registerOption = editor.options.register;\n        registerOption('autoresize_overflow_padding', {\n            processor: 'number',\n            default: 1\n        });\n        registerOption('autoresize_bottom_margin', {\n            processor: 'number',\n            default: 50\n        });\n    };\n    const getMinHeight = option('min_height');\n    const getMaxHeight = option('max_height');\n    const getAutoResizeOverflowPadding = option('autoresize_overflow_padding');\n    const getAutoResizeBottomMargin = option('autoresize_bottom_margin');\n\n    /**\n     * This class contains all core logic for the autoresize plugin.\n     *\n     * @class tinymce.autoresize.Plugin\n     * @private\n     */\n    const isFullscreen = (editor) => editor.plugins.fullscreen && editor.plugins.fullscreen.isFullscreen();\n    const toggleScrolling = (editor, state) => {\n        const body = editor.getBody();\n        if (body) {\n            body.style.overflowY = state ? '' : 'hidden';\n            if (!state) {\n                body.scrollTop = 0;\n            }\n        }\n    };\n    const parseCssValueToInt = (dom, elm, name, computed) => {\n        var _a;\n        const value = parseInt((_a = dom.getStyle(elm, name, computed)) !== null && _a !== void 0 ? _a : '', 10);\n        // The value maybe be an empty string, so in that case treat it as being 0\n        return isNaN(value) ? 0 : value;\n    };\n    const shouldScrollIntoView = (trigger) => {\n        // Only scroll the selection into view when we're inserting content. Any other\n        // triggers the selection should already be in view and resizing would only\n        // extend the content area.\n        if ((trigger === null || trigger === void 0 ? void 0 : trigger.type.toLowerCase()) === 'setcontent') {\n            const setContentEvent = trigger;\n            return setContentEvent.selection === true || setContentEvent.paste === true;\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * This method gets executed each time the editor needs to resize.\n     */\n    const resize = (editor, oldSize, trigger, getExtraMarginBottom) => {\n        var _a;\n        const dom = editor.dom;\n        const doc = editor.getDoc();\n        if (!doc) {\n            return;\n        }\n        if (isFullscreen(editor)) {\n            toggleScrolling(editor, true);\n            return;\n        }\n        const docEle = doc.documentElement;\n        const resizeBottomMargin = getExtraMarginBottom ? getExtraMarginBottom() : getAutoResizeOverflowPadding(editor);\n        const minHeight = (_a = getMinHeight(editor)) !== null && _a !== void 0 ? _a : editor.getElement().offsetHeight;\n        let resizeHeight = minHeight;\n        // Calculate outer height of the doc element using CSS styles\n        const marginTop = parseCssValueToInt(dom, docEle, 'margin-top', true);\n        const marginBottom = parseCssValueToInt(dom, docEle, 'margin-bottom', true);\n        let contentHeight = docEle.offsetHeight + marginTop + marginBottom + resizeBottomMargin;\n        // Make sure we have a valid height\n        if (contentHeight < 0) {\n            contentHeight = 0;\n        }\n        // Determine the size of the chroming (menubar, toolbar, etc...)\n        const containerHeight = editor.getContainer().offsetHeight;\n        const contentAreaHeight = editor.getContentAreaContainer().offsetHeight;\n        const chromeHeight = containerHeight - contentAreaHeight;\n        // Don't make it smaller than the minimum height\n        if (contentHeight + chromeHeight > minHeight) {\n            resizeHeight = contentHeight + chromeHeight;\n        }\n        // If a maximum height has been defined don't exceed this height\n        const maxHeight = getMaxHeight(editor);\n        if (maxHeight && resizeHeight > maxHeight) {\n            resizeHeight = maxHeight;\n            toggleScrolling(editor, true);\n        }\n        else {\n            toggleScrolling(editor, false);\n        }\n        const old = oldSize.get();\n        if (old.set) {\n            editor.dom.setStyles(editor.getDoc().documentElement, { 'min-height': 0 });\n            editor.dom.setStyles(editor.getBody(), { 'min-height': 'inherit' });\n        }\n        // Resize content element\n        if (resizeHeight !== old.totalHeight && (contentHeight - resizeBottomMargin !== old.contentHeight || !old.set)) {\n            const deltaSize = (resizeHeight - old.totalHeight);\n            dom.setStyle(editor.getContainer(), 'height', resizeHeight + 'px');\n            oldSize.set({\n                totalHeight: resizeHeight,\n                contentHeight,\n                set: true,\n            });\n            fireResizeEditor(editor);\n            // iPadOS has an issue where it won't rerender the body when the iframe is resized\n            // however if we reset the scroll position then it re-renders correctly\n            if (global.browser.isSafari() && (global.os.isMacOS() || global.os.isiOS())) {\n                const win = editor.getWin();\n                win.scrollTo(win.pageXOffset, win.pageYOffset);\n            }\n            // Ensure the selection is in view, as it's potentially out of view after inserting content into the editor\n            if (editor.hasFocus() && shouldScrollIntoView(trigger)) {\n                editor.selection.scrollIntoView();\n            }\n            // WebKit doesn't decrease the size of the body element until the iframe gets resized\n            // So we need to continue to resize the iframe down until the size gets fixed\n            if ((global.browser.isSafari() || global.browser.isChromium()) && deltaSize < 0) {\n                resize(editor, oldSize, trigger, getExtraMarginBottom);\n            }\n        }\n    };\n    const setup = (editor, oldSize) => {\n        const getExtraMarginBottom = () => getAutoResizeBottomMargin(editor);\n        editor.on('init', (e) => {\n            const overflowPadding = getAutoResizeOverflowPadding(editor);\n            const dom = editor.dom;\n            // Disable height 100% on the root document element otherwise we'll end up resizing indefinitely\n            dom.setStyles(editor.getDoc().documentElement, {\n                height: 'auto'\n            });\n            if (global.browser.isEdge() || global.browser.isIE()) {\n                dom.setStyles(editor.getBody(), {\n                    'paddingLeft': overflowPadding,\n                    'paddingRight': overflowPadding,\n                    // IE & Edge have a min height of 150px by default on the body, so override that\n                    'min-height': 0\n                });\n            }\n            else {\n                dom.setStyles(editor.getBody(), {\n                    paddingLeft: overflowPadding,\n                    paddingRight: overflowPadding\n                });\n            }\n            resize(editor, oldSize, e, getExtraMarginBottom);\n        });\n        editor.on('NodeChange SetContent keyup FullscreenStateChanged ResizeContent', (e) => {\n            resize(editor, oldSize, e, getExtraMarginBottom);\n        });\n    };\n\n    const register = (editor, oldSize) => {\n        editor.addCommand('mceAutoResize', () => {\n            resize(editor, oldSize);\n        });\n    };\n\n    /**\n     * This class contains all core logic for the autoresize plugin.\n     *\n     * @class tinymce.autoresize.Plugin\n     * @private\n     */\n    var Plugin = () => {\n        global$1.add('autoresize', (editor) => {\n            register$1(editor);\n            // If autoresize is enabled, disable resize if the user hasn't explicitly enabled it\n            // TINY-8288: This currently does nothing because of a bug in the theme\n            if (!editor.options.isSet('resize')) {\n                editor.options.set('resize', false);\n            }\n            if (!editor.inline) {\n                const oldSize = Cell({\n                    totalHeight: 0,\n                    contentHeight: 0,\n                    set: false,\n                });\n                register(editor, oldSize);\n                setup(editor, oldSize);\n            }\n        });\n    };\n\n    Plugin();\n    /** *****\n     * DO NOT EXPORT ANYTHING\n     *\n     * IF YOU DO ROLLUP WILL LEAVE A GLOBAL ON THE PAGE\n     *******/\n\n})();\n"],"names":["global$1","tinymce","util","Tools","resolve","global","option","name","editor","options","get","getMinHeight","getMaxHeight","getAutoResizeOverflowPadding","getAutoResizeBottomMargin","toggleScrolling","state","body","getBody","style","overflowY","scrollTop","parseCssValueToInt","dom","elm","computed","_a","value","parseInt","getStyle","isNaN","resize","oldSize","trigger","getExtraMarginBottom","doc","getDoc","plugins","fullscreen","isFullscreen","docEle","documentElement","resizeBottomMargin","minHeight","getElement","offsetHeight","resizeHeight","marginTop","marginBottom","contentHeight","chromeHeight","getContainer","getContentAreaContainer","maxHeight","old","set","setStyles","totalHeight","deltaSize","setStyle","dispatch","fireResizeEditor","browser","isSafari","os","isMacOS","isiOS","win","getWin","scrollTo","pageXOffset","pageYOffset","hasFocus","type","toLowerCase","setContentEvent","selection","paste","shouldScrollIntoView","scrollIntoView","isChromium","add","registerOption","register","processor","default","register$1","isSet","inline","initial","v","Cell","addCommand","on","e","overflowPadding","height","isEdge","isIE","paddingLeft","paddingRight","setup"],"sourceRoot":""}