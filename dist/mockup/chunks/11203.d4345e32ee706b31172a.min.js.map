{"version":3,"file":"chunks/11203.d4345e32ee706b31172a.min.js","mappings":"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","sources":["webpack://@plone/mockup/./node_modules/tinymce/plugins/emoticons/index.js","webpack://@plone/mockup/./node_modules/tinymce/plugins/emoticons/plugin.js"],"sourcesContent":["// Exports the \"emoticons\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/emoticons')\n//   ES2015:\n//     import 'tinymce/plugins/emoticons'\nrequire('./plugin.js');","/**\n * TinyMCE version 7.2.1 (2024-07-03)\n */\n\n(function () {\n    'use strict';\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    const eq = t => a => t === a;\n    const isNull = eq(null);\n    const isUndefined = eq(undefined);\n    const isNullable = a => a === null || a === undefined;\n    const isNonNullable = a => !isNullable(a);\n\n    const noop = () => {\n    };\n    const constant = value => {\n      return () => {\n        return value;\n      };\n    };\n    const never = constant(false);\n\n    class Optional {\n      constructor(tag, value) {\n        this.tag = tag;\n        this.value = value;\n      }\n      static some(value) {\n        return new Optional(true, value);\n      }\n      static none() {\n        return Optional.singletonNone;\n      }\n      fold(onNone, onSome) {\n        if (this.tag) {\n          return onSome(this.value);\n        } else {\n          return onNone();\n        }\n      }\n      isSome() {\n        return this.tag;\n      }\n      isNone() {\n        return !this.tag;\n      }\n      map(mapper) {\n        if (this.tag) {\n          return Optional.some(mapper(this.value));\n        } else {\n          return Optional.none();\n        }\n      }\n      bind(binder) {\n        if (this.tag) {\n          return binder(this.value);\n        } else {\n          return Optional.none();\n        }\n      }\n      exists(predicate) {\n        return this.tag && predicate(this.value);\n      }\n      forall(predicate) {\n        return !this.tag || predicate(this.value);\n      }\n      filter(predicate) {\n        if (!this.tag || predicate(this.value)) {\n          return this;\n        } else {\n          return Optional.none();\n        }\n      }\n      getOr(replacement) {\n        return this.tag ? this.value : replacement;\n      }\n      or(replacement) {\n        return this.tag ? this : replacement;\n      }\n      getOrThunk(thunk) {\n        return this.tag ? this.value : thunk();\n      }\n      orThunk(thunk) {\n        return this.tag ? this : thunk();\n      }\n      getOrDie(message) {\n        if (!this.tag) {\n          throw new Error(message !== null && message !== void 0 ? message : 'Called getOrDie on None');\n        } else {\n          return this.value;\n        }\n      }\n      static from(value) {\n        return isNonNullable(value) ? Optional.some(value) : Optional.none();\n      }\n      getOrNull() {\n        return this.tag ? this.value : null;\n      }\n      getOrUndefined() {\n        return this.value;\n      }\n      each(worker) {\n        if (this.tag) {\n          worker(this.value);\n        }\n      }\n      toArray() {\n        return this.tag ? [this.value] : [];\n      }\n      toString() {\n        return this.tag ? `some(${ this.value })` : 'none()';\n      }\n    }\n    Optional.singletonNone = new Optional(false);\n\n    const exists = (xs, pred) => {\n      for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        if (pred(x, i)) {\n          return true;\n        }\n      }\n      return false;\n    };\n    const map$1 = (xs, f) => {\n      const len = xs.length;\n      const r = new Array(len);\n      for (let i = 0; i < len; i++) {\n        const x = xs[i];\n        r[i] = f(x, i);\n      }\n      return r;\n    };\n    const each$1 = (xs, f) => {\n      for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        f(x, i);\n      }\n    };\n\n    const Cell = initial => {\n      let value = initial;\n      const get = () => {\n        return value;\n      };\n      const set = v => {\n        value = v;\n      };\n      return {\n        get,\n        set\n      };\n    };\n\n    const last = (fn, rate) => {\n      let timer = null;\n      const cancel = () => {\n        if (!isNull(timer)) {\n          clearTimeout(timer);\n          timer = null;\n        }\n      };\n      const throttle = (...args) => {\n        cancel();\n        timer = setTimeout(() => {\n          timer = null;\n          fn.apply(null, args);\n        }, rate);\n      };\n      return {\n        cancel,\n        throttle\n      };\n    };\n\n    const insertEmoticon = (editor, ch) => {\n      editor.insertContent(ch);\n    };\n\n    const keys = Object.keys;\n    const hasOwnProperty = Object.hasOwnProperty;\n    const each = (obj, f) => {\n      const props = keys(obj);\n      for (let k = 0, len = props.length; k < len; k++) {\n        const i = props[k];\n        const x = obj[i];\n        f(x, i);\n      }\n    };\n    const map = (obj, f) => {\n      return tupleMap(obj, (x, i) => ({\n        k: i,\n        v: f(x, i)\n      }));\n    };\n    const tupleMap = (obj, f) => {\n      const r = {};\n      each(obj, (x, i) => {\n        const tuple = f(x, i);\n        r[tuple.k] = tuple.v;\n      });\n      return r;\n    };\n    const has = (obj, key) => hasOwnProperty.call(obj, key);\n\n    const shallow = (old, nu) => {\n      return nu;\n    };\n    const baseMerge = merger => {\n      return (...objects) => {\n        if (objects.length === 0) {\n          throw new Error(`Can't merge zero objects`);\n        }\n        const ret = {};\n        for (let j = 0; j < objects.length; j++) {\n          const curObject = objects[j];\n          for (const key in curObject) {\n            if (has(curObject, key)) {\n              ret[key] = merger(ret[key], curObject[key]);\n            }\n          }\n        }\n        return ret;\n      };\n    };\n    const merge = baseMerge(shallow);\n\n    const singleton = doRevoke => {\n      const subject = Cell(Optional.none());\n      const revoke = () => subject.get().each(doRevoke);\n      const clear = () => {\n        revoke();\n        subject.set(Optional.none());\n      };\n      const isSet = () => subject.get().isSome();\n      const get = () => subject.get();\n      const set = s => {\n        revoke();\n        subject.set(Optional.some(s));\n      };\n      return {\n        clear,\n        isSet,\n        get,\n        set\n      };\n    };\n    const value = () => {\n      const subject = singleton(noop);\n      const on = f => subject.get().each(f);\n      return {\n        ...subject,\n        on\n      };\n    };\n\n    const checkRange = (str, substr, start) => substr === '' || str.length >= substr.length && str.substr(start, start + substr.length) === substr;\n    const contains = (str, substr, start = 0, end) => {\n      const idx = str.indexOf(substr, start);\n      if (idx !== -1) {\n        return isUndefined(end) ? true : idx + substr.length <= end;\n      } else {\n        return false;\n      }\n    };\n    const startsWith = (str, prefix) => {\n      return checkRange(str, prefix, 0);\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.Resource');\n\n    const DEFAULT_ID = 'tinymce.plugins.emoticons';\n    const option = name => editor => editor.options.get(name);\n    const register$2 = (editor, pluginUrl) => {\n      const registerOption = editor.options.register;\n      registerOption('emoticons_database', {\n        processor: 'string',\n        default: 'emojis'\n      });\n      registerOption('emoticons_database_url', {\n        processor: 'string',\n        default: `${ pluginUrl }/js/${ getEmojiDatabase(editor) }${ editor.suffix }.js`\n      });\n      registerOption('emoticons_database_id', {\n        processor: 'string',\n        default: DEFAULT_ID\n      });\n      registerOption('emoticons_append', {\n        processor: 'object',\n        default: {}\n      });\n      registerOption('emoticons_images_url', {\n        processor: 'string',\n        default: 'https://cdnjs.cloudflare.com/ajax/libs/twemoji/15.1.0/72x72/'\n      });\n    };\n    const getEmojiDatabase = option('emoticons_database');\n    const getEmojiDatabaseUrl = option('emoticons_database_url');\n    const getEmojiDatabaseId = option('emoticons_database_id');\n    const getAppendedEmoji = option('emoticons_append');\n    const getEmojiImageUrl = option('emoticons_images_url');\n\n    const ALL_CATEGORY = 'All';\n    const categoryNameMap = {\n      symbols: 'Symbols',\n      people: 'People',\n      animals_and_nature: 'Animals and Nature',\n      food_and_drink: 'Food and Drink',\n      activity: 'Activity',\n      travel_and_places: 'Travel and Places',\n      objects: 'Objects',\n      flags: 'Flags',\n      user: 'User Defined'\n    };\n    const translateCategory = (categories, name) => has(categories, name) ? categories[name] : name;\n    const getUserDefinedEmoji = editor => {\n      const userDefinedEmoticons = getAppendedEmoji(editor);\n      return map(userDefinedEmoticons, value => ({\n        keywords: [],\n        category: 'user',\n        ...value\n      }));\n    };\n    const initDatabase = (editor, databaseUrl, databaseId) => {\n      const categories = value();\n      const all = value();\n      const emojiImagesUrl = getEmojiImageUrl(editor);\n      const getEmoji = lib => {\n        if (startsWith(lib.char, '<img')) {\n          return lib.char.replace(/src=\"([^\"]+)\"/, (match, url) => `src=\"${ emojiImagesUrl }${ url }\"`);\n        } else {\n          return lib.char;\n        }\n      };\n      const processEmojis = emojis => {\n        const cats = {};\n        const everything = [];\n        each(emojis, (lib, title) => {\n          const entry = {\n            title,\n            keywords: lib.keywords,\n            char: getEmoji(lib),\n            category: translateCategory(categoryNameMap, lib.category)\n          };\n          const current = cats[entry.category] !== undefined ? cats[entry.category] : [];\n          cats[entry.category] = current.concat([entry]);\n          everything.push(entry);\n        });\n        categories.set(cats);\n        all.set(everything);\n      };\n      editor.on('init', () => {\n        global.load(databaseId, databaseUrl).then(emojis => {\n          const userEmojis = getUserDefinedEmoji(editor);\n          processEmojis(merge(emojis, userEmojis));\n        }, err => {\n          console.log(`Failed to load emojis: ${ err }`);\n          categories.set({});\n          all.set([]);\n        });\n      });\n      const listCategory = category => {\n        if (category === ALL_CATEGORY) {\n          return listAll();\n        }\n        return categories.get().bind(cats => Optional.from(cats[category])).getOr([]);\n      };\n      const listAll = () => all.get().getOr([]);\n      const listCategories = () => [ALL_CATEGORY].concat(keys(categories.get().getOr({})));\n      const waitForLoad = () => {\n        if (hasLoaded()) {\n          return Promise.resolve(true);\n        } else {\n          return new Promise((resolve, reject) => {\n            let numRetries = 15;\n            const interval = setInterval(() => {\n              if (hasLoaded()) {\n                clearInterval(interval);\n                resolve(true);\n              } else {\n                numRetries--;\n                if (numRetries < 0) {\n                  console.log('Could not load emojis from url: ' + databaseUrl);\n                  clearInterval(interval);\n                  reject(false);\n                }\n              }\n            }, 100);\n          });\n        }\n      };\n      const hasLoaded = () => categories.isSet() && all.isSet();\n      return {\n        listCategories,\n        hasLoaded,\n        waitForLoad,\n        listAll,\n        listCategory\n      };\n    };\n\n    const emojiMatches = (emoji, lowerCasePattern) => contains(emoji.title.toLowerCase(), lowerCasePattern) || exists(emoji.keywords, k => contains(k.toLowerCase(), lowerCasePattern));\n    const emojisFrom = (list, pattern, maxResults) => {\n      const matches = [];\n      const lowerCasePattern = pattern.toLowerCase();\n      const reachedLimit = maxResults.fold(() => never, max => size => size >= max);\n      for (let i = 0; i < list.length; i++) {\n        if (pattern.length === 0 || emojiMatches(list[i], lowerCasePattern)) {\n          matches.push({\n            value: list[i].char,\n            text: list[i].title,\n            icon: list[i].char\n          });\n          if (reachedLimit(matches.length)) {\n            break;\n          }\n        }\n      }\n      return matches;\n    };\n\n    const patternName = 'pattern';\n    const open = (editor, database) => {\n      const initialState = {\n        pattern: '',\n        results: emojisFrom(database.listAll(), '', Optional.some(300))\n      };\n      const currentTab = Cell(ALL_CATEGORY);\n      const scan = dialogApi => {\n        const dialogData = dialogApi.getData();\n        const category = currentTab.get();\n        const candidates = database.listCategory(category);\n        const results = emojisFrom(candidates, dialogData[patternName], category === ALL_CATEGORY ? Optional.some(300) : Optional.none());\n        dialogApi.setData({ results });\n      };\n      const updateFilter = last(dialogApi => {\n        scan(dialogApi);\n      }, 200);\n      const searchField = {\n        label: 'Search',\n        type: 'input',\n        name: patternName\n      };\n      const resultsField = {\n        type: 'collection',\n        name: 'results'\n      };\n      const getInitialState = () => {\n        const body = {\n          type: 'tabpanel',\n          tabs: map$1(database.listCategories(), cat => ({\n            title: cat,\n            name: cat,\n            items: [\n              searchField,\n              resultsField\n            ]\n          }))\n        };\n        return {\n          title: 'Emojis',\n          size: 'normal',\n          body,\n          initialData: initialState,\n          onTabChange: (dialogApi, details) => {\n            currentTab.set(details.newTabName);\n            updateFilter.throttle(dialogApi);\n          },\n          onChange: updateFilter.throttle,\n          onAction: (dialogApi, actionData) => {\n            if (actionData.name === 'results') {\n              insertEmoticon(editor, actionData.value);\n              dialogApi.close();\n            }\n          },\n          buttons: [{\n              type: 'cancel',\n              text: 'Close',\n              primary: true\n            }]\n        };\n      };\n      const dialogApi = editor.windowManager.open(getInitialState());\n      dialogApi.focus(patternName);\n      if (!database.hasLoaded()) {\n        dialogApi.block('Loading emojis...');\n        database.waitForLoad().then(() => {\n          dialogApi.redial(getInitialState());\n          updateFilter.throttle(dialogApi);\n          dialogApi.focus(patternName);\n          dialogApi.unblock();\n        }).catch(_err => {\n          dialogApi.redial({\n            title: 'Emojis',\n            body: {\n              type: 'panel',\n              items: [{\n                  type: 'alertbanner',\n                  level: 'error',\n                  icon: 'warning',\n                  text: 'Could not load emojis'\n                }]\n            },\n            buttons: [{\n                type: 'cancel',\n                text: 'Close',\n                primary: true\n              }],\n            initialData: {\n              pattern: '',\n              results: []\n            }\n          });\n          dialogApi.focus(patternName);\n          dialogApi.unblock();\n        });\n      }\n    };\n\n    const register$1 = (editor, database) => {\n      editor.addCommand('mceEmoticons', () => open(editor, database));\n    };\n\n    const setup = editor => {\n      editor.on('PreInit', () => {\n        editor.parser.addAttributeFilter('data-emoticon', nodes => {\n          each$1(nodes, node => {\n            node.attr('data-mce-resize', 'false');\n            node.attr('data-mce-placeholder', '1');\n          });\n        });\n      });\n    };\n\n    const init = (editor, database) => {\n      editor.ui.registry.addAutocompleter('emoticons', {\n        trigger: ':',\n        columns: 'auto',\n        minChars: 2,\n        fetch: (pattern, maxResults) => database.waitForLoad().then(() => {\n          const candidates = database.listAll();\n          return emojisFrom(candidates, pattern, Optional.some(maxResults));\n        }),\n        onAction: (autocompleteApi, rng, value) => {\n          editor.selection.setRng(rng);\n          editor.insertContent(value);\n          autocompleteApi.hide();\n        }\n      });\n    };\n\n    const onSetupEditable = editor => api => {\n      const nodeChanged = () => {\n        api.setEnabled(editor.selection.isEditable());\n      };\n      editor.on('NodeChange', nodeChanged);\n      nodeChanged();\n      return () => {\n        editor.off('NodeChange', nodeChanged);\n      };\n    };\n    const register = editor => {\n      const onAction = () => editor.execCommand('mceEmoticons');\n      editor.ui.registry.addButton('emoticons', {\n        tooltip: 'Emojis',\n        icon: 'emoji',\n        onAction,\n        onSetup: onSetupEditable(editor)\n      });\n      editor.ui.registry.addMenuItem('emoticons', {\n        text: 'Emojis...',\n        icon: 'emoji',\n        onAction,\n        onSetup: onSetupEditable(editor)\n      });\n    };\n\n    var Plugin = () => {\n      global$1.add('emoticons', (editor, pluginUrl) => {\n        register$2(editor, pluginUrl);\n        const databaseUrl = getEmojiDatabaseUrl(editor);\n        const databaseId = getEmojiDatabaseId(editor);\n        const database = initDatabase(editor, databaseUrl, databaseId);\n        register$1(editor, database);\n        register(editor);\n        init(editor, database);\n        setup(editor);\n        return { getAllEmojis: () => database.waitForLoad().then(() => database.listAll()) };\n      });\n    };\n\n    Plugin();\n\n})();\n"],"names":["global$1","tinymce","util","Tools","resolve","eq","t","a","isNull","isUndefined","undefined","noop","never","value","constant","Optional","constructor","tag","this","some","none","singletonNone","fold","onNone","onSome","isSome","isNone","map","mapper","bind","binder","exists","predicate","forall","filter","getOr","replacement","or","getOrThunk","thunk","orThunk","getOrDie","message","Error","from","isNullable","getOrNull","getOrUndefined","each","worker","toArray","toString","map$1","xs","f","len","length","r","Array","i","x","Cell","initial","get","set","v","keys","Object","hasOwnProperty","obj","props","k","tupleMap","tuple","has","key","call","merge","merger","old","nu","objects","ret","j","curObject","subject","doRevoke","revoke","clear","isSet","s","singleton","on","contains","str","substr","start","end","idx","indexOf","global","option","name","editor","options","getEmojiDatabase","getEmojiDatabaseUrl","getEmojiDatabaseId","getAppendedEmoji","getEmojiImageUrl","ALL_CATEGORY","categoryNameMap","symbols","people","animals_and_nature","food_and_drink","activity","travel_and_places","flags","user","translateCategory","categories","getUserDefinedEmoji","userDefinedEmoticons","keywords","category","initDatabase","databaseUrl","databaseId","all","emojiImagesUrl","getEmoji","lib","checkRange","char","replace","match","url","load","then","emojis","userEmojis","cats","everything","title","entry","current","concat","push","processEmojis","err","console","log","listAll","hasLoaded","listCategories","waitForLoad","Promise","reject","numRetries","interval","setInterval","clearInterval","listCategory","emojiMatches","emoji","lowerCasePattern","toLowerCase","pred","emojisFrom","list","pattern","maxResults","matches","reachedLimit","max","size","text","icon","patternName","open","database","initialState","results","currentTab","updateFilter","fn","rate","timer","cancel","clearTimeout","throttle","args","setTimeout","apply","last","dialogApi","dialogData","getData","candidates","setData","scan","searchField","label","type","resultsField","getInitialState","body","tabs","cat","items","initialData","onTabChange","details","newTabName","onChange","onAction","actionData","ch","insertContent","insertEmoticon","close","buttons","primary","windowManager","focus","block","redial","unblock","catch","_err","level","onSetupEditable","api","nodeChanged","setEnabled","selection","isEditable","off","add","pluginUrl","registerOption","register","processor","default","suffix","register$2","addCommand","register$1","execCommand","ui","registry","addButton","tooltip","onSetup","addMenuItem","addAutocompleter","trigger","columns","minChars","fetch","autocompleteApi","rng","setRng","hide","init","parser","addAttributeFilter","nodes","each$1","node","attr","setup","getAllEmojis"],"sourceRoot":""}