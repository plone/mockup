{"version":3,"file":"chunks/52236.215bc70072c95f487143.min.js","mappings":"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","sources":["webpack://@plone/mockup/./node_modules/tinymce/plugins/accordion/index.js","webpack://@plone/mockup/./node_modules/tinymce/plugins/accordion/plugin.js"],"sourcesContent":["// Exports the \"accordion\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/accordion')\n//   ES2015:\n//     import 'tinymce/plugins/accordion'\nrequire('./plugin.js');","/**\n * TinyMCE version 7.7.0 (TBD)\n */\n\n(function () {\n    'use strict';\n\n    var global$4 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    const random = () => window.crypto.getRandomValues(new Uint32Array(1))[0] / 4294967295;\n\n    let unique = 0;\n    const generate = prefix => {\n      const date = new Date();\n      const time = date.getTime();\n      const random$1 = Math.floor(random() * 1000000000);\n      unique++;\n      return prefix + '_' + random$1 + unique + String(time);\n    };\n\n    const hasProto = (v, constructor, predicate) => {\n      var _a;\n      if (predicate(v, constructor.prototype)) {\n        return true;\n      } else {\n        return ((_a = v.constructor) === null || _a === void 0 ? void 0 : _a.name) === constructor.name;\n      }\n    };\n    const typeOf = x => {\n      const t = typeof x;\n      if (x === null) {\n        return 'null';\n      } else if (t === 'object' && Array.isArray(x)) {\n        return 'array';\n      } else if (t === 'object' && hasProto(x, String, (o, proto) => proto.isPrototypeOf(o))) {\n        return 'string';\n      } else {\n        return t;\n      }\n    };\n    const isType$1 = type => value => typeOf(value) === type;\n    const isSimpleType = type => value => typeof value === type;\n    const isString = isType$1('string');\n    const isBoolean = isSimpleType('boolean');\n    const isNullable = a => a === null || a === undefined;\n    const isNonNullable = a => !isNullable(a);\n    const isFunction = isSimpleType('function');\n    const isNumber = isSimpleType('number');\n\n    const compose1 = (fbc, fab) => a => fbc(fab(a));\n    const constant = value => {\n      return () => {\n        return value;\n      };\n    };\n    const tripleEquals = (a, b) => {\n      return a === b;\n    };\n    const never = constant(false);\n\n    class Optional {\n      constructor(tag, value) {\n        this.tag = tag;\n        this.value = value;\n      }\n      static some(value) {\n        return new Optional(true, value);\n      }\n      static none() {\n        return Optional.singletonNone;\n      }\n      fold(onNone, onSome) {\n        if (this.tag) {\n          return onSome(this.value);\n        } else {\n          return onNone();\n        }\n      }\n      isSome() {\n        return this.tag;\n      }\n      isNone() {\n        return !this.tag;\n      }\n      map(mapper) {\n        if (this.tag) {\n          return Optional.some(mapper(this.value));\n        } else {\n          return Optional.none();\n        }\n      }\n      bind(binder) {\n        if (this.tag) {\n          return binder(this.value);\n        } else {\n          return Optional.none();\n        }\n      }\n      exists(predicate) {\n        return this.tag && predicate(this.value);\n      }\n      forall(predicate) {\n        return !this.tag || predicate(this.value);\n      }\n      filter(predicate) {\n        if (!this.tag || predicate(this.value)) {\n          return this;\n        } else {\n          return Optional.none();\n        }\n      }\n      getOr(replacement) {\n        return this.tag ? this.value : replacement;\n      }\n      or(replacement) {\n        return this.tag ? this : replacement;\n      }\n      getOrThunk(thunk) {\n        return this.tag ? this.value : thunk();\n      }\n      orThunk(thunk) {\n        return this.tag ? this : thunk();\n      }\n      getOrDie(message) {\n        if (!this.tag) {\n          throw new Error(message !== null && message !== void 0 ? message : 'Called getOrDie on None');\n        } else {\n          return this.value;\n        }\n      }\n      static from(value) {\n        return isNonNullable(value) ? Optional.some(value) : Optional.none();\n      }\n      getOrNull() {\n        return this.tag ? this.value : null;\n      }\n      getOrUndefined() {\n        return this.value;\n      }\n      each(worker) {\n        if (this.tag) {\n          worker(this.value);\n        }\n      }\n      toArray() {\n        return this.tag ? [this.value] : [];\n      }\n      toString() {\n        return this.tag ? `some(${ this.value })` : 'none()';\n      }\n    }\n    Optional.singletonNone = new Optional(false);\n\n    const nativeIndexOf = Array.prototype.indexOf;\n    const rawIndexOf = (ts, t) => nativeIndexOf.call(ts, t);\n    const contains = (xs, x) => rawIndexOf(xs, x) > -1;\n    const map = (xs, f) => {\n      const len = xs.length;\n      const r = new Array(len);\n      for (let i = 0; i < len; i++) {\n        const x = xs[i];\n        r[i] = f(x, i);\n      }\n      return r;\n    };\n    const each$1 = (xs, f) => {\n      for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        f(x, i);\n      }\n    };\n    const filter = (xs, pred) => {\n      const r = [];\n      for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        if (pred(x, i)) {\n          r.push(x);\n        }\n      }\n      return r;\n    };\n    const foldl = (xs, f, acc) => {\n      each$1(xs, (x, i) => {\n        acc = f(acc, x, i);\n      });\n      return acc;\n    };\n\n    const keys = Object.keys;\n    const each = (obj, f) => {\n      const props = keys(obj);\n      for (let k = 0, len = props.length; k < len; k++) {\n        const i = props[k];\n        const x = obj[i];\n        f(x, i);\n      }\n    };\n\n    typeof window !== 'undefined' ? window : Function('return this;')();\n\n    const COMMENT = 8;\n    const DOCUMENT = 9;\n    const DOCUMENT_FRAGMENT = 11;\n    const ELEMENT = 1;\n    const TEXT = 3;\n\n    const name = element => {\n      const r = element.dom.nodeName;\n      return r.toLowerCase();\n    };\n    const type = element => element.dom.nodeType;\n    const isType = t => element => type(element) === t;\n    const isComment = element => type(element) === COMMENT || name(element) === '#comment';\n    const isElement = isType(ELEMENT);\n    const isText = isType(TEXT);\n    const isDocument = isType(DOCUMENT);\n    const isDocumentFragment = isType(DOCUMENT_FRAGMENT);\n\n    const rawSet = (dom, key, value) => {\n      if (isString(value) || isBoolean(value) || isNumber(value)) {\n        dom.setAttribute(key, value + '');\n      } else {\n        console.error('Invalid call to Attribute.set. Key ', key, ':: Value ', value, ':: Element ', dom);\n        throw new Error('Attribute value was not simple');\n      }\n    };\n    const set$2 = (element, key, value) => {\n      rawSet(element.dom, key, value);\n    };\n    const setAll = (element, attrs) => {\n      const dom = element.dom;\n      each(attrs, (v, k) => {\n        rawSet(dom, k, v);\n      });\n    };\n    const get$2 = (element, key) => {\n      const v = element.dom.getAttribute(key);\n      return v === null ? undefined : v;\n    };\n    const getOpt = (element, key) => Optional.from(get$2(element, key));\n    const remove$2 = (element, key) => {\n      element.dom.removeAttribute(key);\n    };\n    const clone = element => foldl(element.dom.attributes, (acc, attr) => {\n      acc[attr.name] = attr.value;\n      return acc;\n    }, {});\n\n    const fromHtml = (html, scope) => {\n      const doc = scope || document;\n      const div = doc.createElement('div');\n      div.innerHTML = html;\n      if (!div.hasChildNodes() || div.childNodes.length > 1) {\n        const message = 'HTML does not have a single root node';\n        console.error(message, html);\n        throw new Error(message);\n      }\n      return fromDom(div.childNodes[0]);\n    };\n    const fromTag = (tag, scope) => {\n      const doc = scope || document;\n      const node = doc.createElement(tag);\n      return fromDom(node);\n    };\n    const fromText = (text, scope) => {\n      const doc = scope || document;\n      const node = doc.createTextNode(text);\n      return fromDom(node);\n    };\n    const fromDom = node => {\n      if (node === null || node === undefined) {\n        throw new Error('Node cannot be null or undefined');\n      }\n      return { dom: node };\n    };\n    const fromPoint = (docElm, x, y) => Optional.from(docElm.dom.elementFromPoint(x, y)).map(fromDom);\n    const SugarElement = {\n      fromHtml,\n      fromTag,\n      fromText,\n      fromDom,\n      fromPoint\n    };\n\n    const is$2 = (element, selector) => {\n      const dom = element.dom;\n      if (dom.nodeType !== ELEMENT) {\n        return false;\n      } else {\n        const elem = dom;\n        if (elem.matches !== undefined) {\n          return elem.matches(selector);\n        } else if (elem.msMatchesSelector !== undefined) {\n          return elem.msMatchesSelector(selector);\n        } else if (elem.webkitMatchesSelector !== undefined) {\n          return elem.webkitMatchesSelector(selector);\n        } else if (elem.mozMatchesSelector !== undefined) {\n          return elem.mozMatchesSelector(selector);\n        } else {\n          throw new Error('Browser lacks native selectors');\n        }\n      }\n    };\n    const bypassSelector = dom => dom.nodeType !== ELEMENT && dom.nodeType !== DOCUMENT && dom.nodeType !== DOCUMENT_FRAGMENT || dom.childElementCount === 0;\n    const all = (selector, scope) => {\n      const base = scope === undefined ? document : scope.dom;\n      return bypassSelector(base) ? [] : map(base.querySelectorAll(selector), SugarElement.fromDom);\n    };\n    const one = (selector, scope) => {\n      const base = scope === undefined ? document : scope.dom;\n      return bypassSelector(base) ? Optional.none() : Optional.from(base.querySelector(selector)).map(SugarElement.fromDom);\n    };\n\n    const eq = (e1, e2) => e1.dom === e2.dom;\n    const is$1 = is$2;\n\n    const is = (lhs, rhs, comparator = tripleEquals) => lhs.exists(left => comparator(left, rhs));\n\n    const blank = r => s => s.replace(r, '');\n    const trim = blank(/^\\s+|\\s+$/g);\n\n    const isSupported = dom => dom.style !== undefined && isFunction(dom.style.getPropertyValue);\n\n    const owner = element => SugarElement.fromDom(element.dom.ownerDocument);\n    const documentOrOwner = dos => isDocument(dos) ? dos : owner(dos);\n    const parent = element => Optional.from(element.dom.parentNode).map(SugarElement.fromDom);\n    const parents = (element, isRoot) => {\n      const stop = isFunction(isRoot) ? isRoot : never;\n      let dom = element.dom;\n      const ret = [];\n      while (dom.parentNode !== null && dom.parentNode !== undefined) {\n        const rawParent = dom.parentNode;\n        const p = SugarElement.fromDom(rawParent);\n        ret.push(p);\n        if (stop(p) === true) {\n          break;\n        } else {\n          dom = rawParent;\n        }\n      }\n      return ret;\n    };\n    const prevSibling = element => Optional.from(element.dom.previousSibling).map(SugarElement.fromDom);\n    const nextSibling = element => Optional.from(element.dom.nextSibling).map(SugarElement.fromDom);\n    const children = element => map(element.dom.childNodes, SugarElement.fromDom);\n    const child = (element, index) => {\n      const cs = element.dom.childNodes;\n      return Optional.from(cs[index]).map(SugarElement.fromDom);\n    };\n    const firstChild = element => child(element, 0);\n\n    const isShadowRoot = dos => isDocumentFragment(dos) && isNonNullable(dos.dom.host);\n    const getRootNode = e => SugarElement.fromDom(e.dom.getRootNode());\n    const getShadowRoot = e => {\n      const r = getRootNode(e);\n      return isShadowRoot(r) ? Optional.some(r) : Optional.none();\n    };\n    const getShadowHost = e => SugarElement.fromDom(e.dom.host);\n\n    const inBody = element => {\n      const dom = isText(element) ? element.dom.parentNode : element.dom;\n      if (dom === undefined || dom === null || dom.ownerDocument === null) {\n        return false;\n      }\n      const doc = dom.ownerDocument;\n      return getShadowRoot(SugarElement.fromDom(dom)).fold(() => doc.body.contains(dom), compose1(inBody, getShadowHost));\n    };\n\n    const internalSet = (dom, property, value) => {\n      if (!isString(value)) {\n        console.error('Invalid call to CSS.set. Property ', property, ':: Value ', value, ':: Element ', dom);\n        throw new Error('CSS value must be a string: ' + value);\n      }\n      if (isSupported(dom)) {\n        dom.style.setProperty(property, value);\n      }\n    };\n    const internalRemove = (dom, property) => {\n      if (isSupported(dom)) {\n        dom.style.removeProperty(property);\n      }\n    };\n    const set$1 = (element, property, value) => {\n      const dom = element.dom;\n      internalSet(dom, property, value);\n    };\n    const get$1 = (element, property) => {\n      const dom = element.dom;\n      const styles = window.getComputedStyle(dom);\n      const r = styles.getPropertyValue(property);\n      return r === '' && !inBody(element) ? getUnsafeProperty(dom, property) : r;\n    };\n    const getUnsafeProperty = (dom, property) => isSupported(dom) ? dom.style.getPropertyValue(property) : '';\n    const getRaw = (element, property) => {\n      const dom = element.dom;\n      const raw = getUnsafeProperty(dom, property);\n      return Optional.from(raw).filter(r => r.length > 0);\n    };\n    const remove$1 = (element, property) => {\n      const dom = element.dom;\n      internalRemove(dom, property);\n      if (is(getOpt(element, 'style').map(trim), '')) {\n        remove$2(element, 'style');\n      }\n    };\n\n    const before = (marker, element) => {\n      const parent$1 = parent(marker);\n      parent$1.each(v => {\n        v.dom.insertBefore(element.dom, marker.dom);\n      });\n    };\n    const after$1 = (marker, element) => {\n      const sibling = nextSibling(marker);\n      sibling.fold(() => {\n        const parent$1 = parent(marker);\n        parent$1.each(v => {\n          append$1(v, element);\n        });\n      }, v => {\n        before(v, element);\n      });\n    };\n    const prepend = (parent, element) => {\n      const firstChild$1 = firstChild(parent);\n      firstChild$1.fold(() => {\n        append$1(parent, element);\n      }, v => {\n        parent.dom.insertBefore(element.dom, v.dom);\n      });\n    };\n    const append$1 = (parent, element) => {\n      parent.dom.appendChild(element.dom);\n    };\n    const wrap = (element, wrapper) => {\n      before(element, wrapper);\n      append$1(wrapper, element);\n    };\n\n    const after = (marker, elements) => {\n      each$1(elements, (x, i) => {\n        const e = i === 0 ? marker : elements[i - 1];\n        after$1(e, x);\n      });\n    };\n    const append = (parent, elements) => {\n      each$1(elements, x => {\n        append$1(parent, x);\n      });\n    };\n\n    const descendants$1 = (scope, predicate) => {\n      let result = [];\n      each$1(children(scope), x => {\n        if (predicate(x)) {\n          result = result.concat([x]);\n        }\n        result = result.concat(descendants$1(x, predicate));\n      });\n      return result;\n    };\n\n    var ClosestOrAncestor = (is, ancestor, scope, a, isRoot) => {\n      if (is(scope, a)) {\n        return Optional.some(scope);\n      } else if (isFunction(isRoot) && isRoot(scope)) {\n        return Optional.none();\n      } else {\n        return ancestor(scope, a, isRoot);\n      }\n    };\n\n    const ancestor$1 = (scope, predicate, isRoot) => {\n      let element = scope.dom;\n      const stop = isFunction(isRoot) ? isRoot : never;\n      while (element.parentNode) {\n        element = element.parentNode;\n        const el = SugarElement.fromDom(element);\n        if (predicate(el)) {\n          return Optional.some(el);\n        } else if (stop(el)) {\n          break;\n        }\n      }\n      return Optional.none();\n    };\n\n    const remove = element => {\n      const dom = element.dom;\n      if (dom.parentNode !== null) {\n        dom.parentNode.removeChild(dom);\n      }\n    };\n    const unwrap = wrapper => {\n      const children$1 = children(wrapper);\n      if (children$1.length > 0) {\n        after(wrapper, children$1);\n      }\n      remove(wrapper);\n    };\n\n    const descendants = (scope, selector) => all(selector, scope);\n\n    const ancestor = (scope, selector, isRoot) => ancestor$1(scope, e => is$2(e, selector), isRoot);\n    const descendant = (scope, selector) => one(selector, scope);\n    const closest = (scope, selector, isRoot) => {\n      const is = (element, selector) => is$2(element, selector);\n      return ClosestOrAncestor(is, ancestor, scope, selector, isRoot);\n    };\n\n    const NodeValue = (is, name) => {\n      const get = element => {\n        if (!is(element)) {\n          throw new Error('Can only get ' + name + ' value of a ' + name + ' node');\n        }\n        return getOption(element).getOr('');\n      };\n      const getOption = element => is(element) ? Optional.from(element.dom.nodeValue) : Optional.none();\n      const set = (element, value) => {\n        if (!is(element)) {\n          throw new Error('Can only set raw ' + name + ' value of a ' + name + ' node');\n        }\n        element.dom.nodeValue = value;\n      };\n      return {\n        get,\n        getOption,\n        set\n      };\n    };\n\n    const api = NodeValue(isText, 'text');\n    const get = element => api.get(element);\n    const set = (element, value) => api.set(element, value);\n\n    var TagBoundaries = [\n      'body',\n      'p',\n      'div',\n      'article',\n      'aside',\n      'figcaption',\n      'figure',\n      'footer',\n      'header',\n      'nav',\n      'section',\n      'ol',\n      'ul',\n      'li',\n      'table',\n      'thead',\n      'tbody',\n      'tfoot',\n      'caption',\n      'tr',\n      'td',\n      'th',\n      'h1',\n      'h2',\n      'h3',\n      'h4',\n      'h5',\n      'h6',\n      'blockquote',\n      'pre',\n      'address'\n    ];\n\n    var DomUniverse = () => {\n      const clone$1 = element => {\n        return SugarElement.fromDom(element.dom.cloneNode(false));\n      };\n      const document = element => documentOrOwner(element).dom;\n      const isBoundary = element => {\n        if (!isElement(element)) {\n          return false;\n        }\n        if (name(element) === 'body') {\n          return true;\n        }\n        return contains(TagBoundaries, name(element));\n      };\n      const isEmptyTag = element => {\n        if (!isElement(element)) {\n          return false;\n        }\n        return contains([\n          'br',\n          'img',\n          'hr',\n          'input'\n        ], name(element));\n      };\n      const isNonEditable = element => isElement(element) && get$2(element, 'contenteditable') === 'false';\n      const comparePosition = (element, other) => {\n        return element.dom.compareDocumentPosition(other.dom);\n      };\n      const copyAttributesTo = (source, destination) => {\n        const as = clone(source);\n        setAll(destination, as);\n      };\n      const isSpecial = element => {\n        const tag = name(element);\n        return contains([\n          'script',\n          'noscript',\n          'iframe',\n          'noframes',\n          'noembed',\n          'title',\n          'style',\n          'textarea',\n          'xmp'\n        ], tag);\n      };\n      const getLanguage = element => isElement(element) ? getOpt(element, 'lang') : Optional.none();\n      return {\n        up: constant({\n          selector: ancestor,\n          closest: closest,\n          predicate: ancestor$1,\n          all: parents\n        }),\n        down: constant({\n          selector: descendants,\n          predicate: descendants$1\n        }),\n        styles: constant({\n          get: get$1,\n          getRaw: getRaw,\n          set: set$1,\n          remove: remove$1\n        }),\n        attrs: constant({\n          get: get$2,\n          set: set$2,\n          remove: remove$2,\n          copyTo: copyAttributesTo\n        }),\n        insert: constant({\n          before: before,\n          after: after$1,\n          afterAll: after,\n          append: append$1,\n          appendAll: append,\n          prepend: prepend,\n          wrap: wrap\n        }),\n        remove: constant({\n          unwrap: unwrap,\n          remove: remove\n        }),\n        create: constant({\n          nu: SugarElement.fromTag,\n          clone: clone$1,\n          text: SugarElement.fromText\n        }),\n        query: constant({\n          comparePosition,\n          prevSibling: prevSibling,\n          nextSibling: nextSibling\n        }),\n        property: constant({\n          children: children,\n          name: name,\n          parent: parent,\n          document,\n          isText: isText,\n          isComment: isComment,\n          isElement: isElement,\n          isSpecial,\n          getLanguage,\n          getText: get,\n          setText: set,\n          isBoundary,\n          isEmptyTag,\n          isNonEditable\n        }),\n        eq: eq,\n        is: is$1\n      };\n    };\n\n    const point = (element, offset) => ({\n      element,\n      offset\n    });\n\n    const scan = (universe, element, direction) => {\n      if (universe.property().isText(element) && universe.property().getText(element).trim().length === 0 || universe.property().isComment(element)) {\n        return direction(element).bind(elem => {\n          return scan(universe, elem, direction).orThunk(() => {\n            return Optional.some(elem);\n          });\n        });\n      } else {\n        return Optional.none();\n      }\n    };\n    const toEnd = (universe, element) => {\n      if (universe.property().isText(element)) {\n        return universe.property().getText(element).length;\n      }\n      const children = universe.property().children(element);\n      return children.length;\n    };\n    const freefallRtl$2 = (universe, element) => {\n      const candidate = scan(universe, element, universe.query().prevSibling).getOr(element);\n      if (universe.property().isText(candidate)) {\n        return point(candidate, toEnd(universe, candidate));\n      }\n      const children = universe.property().children(candidate);\n      return children.length > 0 ? freefallRtl$2(universe, children[children.length - 1]) : point(candidate, toEnd(universe, candidate));\n    };\n\n    const freefallRtl$1 = freefallRtl$2;\n\n    const universe = DomUniverse();\n    const freefallRtl = element => {\n      return freefallRtl$1(universe, element);\n    };\n\n    const fireToggleAccordionEvent = (editor, element, state) => editor.dispatch('ToggledAccordion', {\n      element,\n      state\n    });\n    const fireToggleAllAccordionsEvent = (editor, elements, state) => editor.dispatch('ToggledAllAccordions', {\n      elements,\n      state\n    });\n\n    const accordionTag = 'details';\n    const accordionDetailsClass = 'mce-accordion';\n    const accordionSummaryClass = 'mce-accordion-summary';\n    const accordionBodyWrapperClass = 'mce-accordion-body';\n    const accordionBodyWrapperTag = 'div';\n\n    var global$3 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    const isSummary = node => (node === null || node === void 0 ? void 0 : node.nodeName) === 'SUMMARY';\n    const isDetails = node => (node === null || node === void 0 ? void 0 : node.nodeName) === 'DETAILS';\n    const isOpen = details => details.hasAttribute('open');\n    const isInSummary = editor => {\n      const node = editor.selection.getNode();\n      return isSummary(node) || Boolean(editor.dom.getParent(node, isSummary));\n    };\n    const isAtDetailsStart = editor => {\n      const rng = editor.selection.getRng();\n      return isDetails(rng.startContainer) && rng.collapsed && rng.startOffset === 0;\n    };\n    const isInsertAllowed = editor => !isInSummary(editor) && editor.dom.isEditable(editor.selection.getNode()) && !editor.mode.isReadOnly();\n    const getSelectedDetails = editor => Optional.from(editor.dom.getParent(editor.selection.getNode(), isDetails));\n    const isDetailsSelected = editor => getSelectedDetails(editor).isSome();\n    const insertBogus = element => {\n      element.innerHTML = '<br data-mce-bogus=\"1\" />';\n      return element;\n    };\n    const createParagraph = editor => insertBogus(editor.dom.create('p'));\n    const createSummary = editor => insertBogus(editor.dom.create('summary'));\n    const insertAndSelectParagraphAfter = (editor, target) => {\n      const paragraph = createParagraph(editor);\n      target.insertAdjacentElement('afterend', paragraph);\n      editor.selection.setCursorLocation(paragraph, 0);\n    };\n    const normalizeContent = (editor, accordion) => {\n      if (isSummary(accordion === null || accordion === void 0 ? void 0 : accordion.lastChild)) {\n        const paragraph = createParagraph(editor);\n        accordion.appendChild(paragraph);\n        editor.selection.setCursorLocation(paragraph, 0);\n      }\n    };\n    const normalizeSummary = (editor, accordion) => {\n      if (!isSummary(accordion === null || accordion === void 0 ? void 0 : accordion.firstChild)) {\n        const summary = createSummary(editor);\n        accordion.prepend(summary);\n        editor.selection.setCursorLocation(summary, 0);\n      }\n    };\n    const normalizeAccordion = editor => accordion => {\n      normalizeContent(editor, accordion);\n      normalizeSummary(editor, accordion);\n    };\n    const normalizeDetails = editor => {\n      global$3.each(global$3.grep(editor.dom.select('details', editor.getBody())), normalizeAccordion(editor));\n    };\n\n    const insertAccordion = editor => {\n      if (!isInsertAllowed(editor)) {\n        return;\n      }\n      const editorBody = SugarElement.fromDom(editor.getBody());\n      const uid = generate('acc');\n      const summaryText = editor.dom.encode(editor.selection.getRng().toString() || editor.translate('Accordion summary...'));\n      const bodyText = editor.dom.encode(editor.translate('Accordion body...'));\n      const accordionSummaryHtml = `<summary class=\"${ accordionSummaryClass }\">${ summaryText }</summary>`;\n      const accordionBodyHtml = `<${ accordionBodyWrapperTag } class=\"${ accordionBodyWrapperClass }\"><p>${ bodyText }</p></${ accordionBodyWrapperTag }>`;\n      editor.undoManager.transact(() => {\n        editor.insertContent([\n          `<details data-mce-id=\"${ uid }\" class=\"${ accordionDetailsClass }\" open=\"open\">`,\n          accordionSummaryHtml,\n          accordionBodyHtml,\n          `</details>`\n        ].join(''));\n        descendant(editorBody, `[data-mce-id=\"${ uid }\"]`).each(detailsElm => {\n          remove$2(detailsElm, 'data-mce-id');\n          descendant(detailsElm, `summary`).each(summaryElm => {\n            const rng = editor.dom.createRng();\n            const des = freefallRtl(summaryElm);\n            rng.setStart(des.element.dom, des.offset);\n            rng.setEnd(des.element.dom, des.offset);\n            editor.selection.setRng(rng);\n          });\n        });\n      });\n    };\n    const toggleDetailsElement = (details, state) => {\n      const shouldOpen = state !== null && state !== void 0 ? state : !isOpen(details);\n      if (shouldOpen) {\n        details.setAttribute('open', 'open');\n      } else {\n        details.removeAttribute('open');\n      }\n      return shouldOpen;\n    };\n    const toggleAccordion = (editor, state) => {\n      getSelectedDetails(editor).each(details => {\n        fireToggleAccordionEvent(editor, details, toggleDetailsElement(details, state));\n      });\n    };\n    const removeAccordion = editor => {\n      if (!editor.mode.isReadOnly()) {\n        getSelectedDetails(editor).each(details => {\n          const {nextSibling} = details;\n          if (nextSibling) {\n            editor.selection.select(nextSibling, true);\n            editor.selection.collapse(true);\n          } else {\n            insertAndSelectParagraphAfter(editor, details);\n          }\n          details.remove();\n        });\n      }\n    };\n    const toggleAllAccordions = (editor, state) => {\n      const accordions = Array.from(editor.getBody().querySelectorAll('details'));\n      if (accordions.length === 0) {\n        return;\n      }\n      each$1(accordions, accordion => toggleDetailsElement(accordion, state !== null && state !== void 0 ? state : !isOpen(accordion)));\n      fireToggleAllAccordionsEvent(editor, accordions, state);\n    };\n\n    const register$1 = editor => {\n      editor.addCommand('InsertAccordion', () => insertAccordion(editor));\n      editor.addCommand('ToggleAccordion', (_ui, value) => toggleAccordion(editor, value));\n      editor.addCommand('ToggleAllAccordions', (_ui, value) => toggleAllAccordions(editor, value));\n      editor.addCommand('RemoveAccordion', () => removeAccordion(editor));\n    };\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.html.Node');\n\n    const getClassList = node => {\n      var _a, _b;\n      return (_b = (_a = node.attr('class')) === null || _a === void 0 ? void 0 : _a.split(' ')) !== null && _b !== void 0 ? _b : [];\n    };\n    const addClasses = (node, classes) => {\n      const classListSet = new Set([\n        ...getClassList(node),\n        ...classes\n      ]);\n      const newClassList = Array.from(classListSet);\n      if (newClassList.length > 0) {\n        node.attr('class', newClassList.join(' '));\n      }\n    };\n    const removeClasses = (node, classes) => {\n      const newClassList = filter(getClassList(node), clazz => !classes.has(clazz));\n      node.attr('class', newClassList.length > 0 ? newClassList.join(' ') : null);\n    };\n    const isAccordionDetailsNode = node => node.name === accordionTag && contains(getClassList(node), accordionDetailsClass);\n    const isAccordionBodyWrapperNode = node => node.name === accordionBodyWrapperTag && contains(getClassList(node), accordionBodyWrapperClass);\n    const getAccordionChildren = accordionNode => {\n      const children = accordionNode.children();\n      let summaryNode;\n      let wrapperNode;\n      const otherNodes = [];\n      for (let i = 0; i < children.length; i++) {\n        const child = children[i];\n        if (child.name === 'summary' && isNullable(summaryNode)) {\n          summaryNode = child;\n        } else if (isAccordionBodyWrapperNode(child) && isNullable(wrapperNode)) {\n          wrapperNode = child;\n        } else {\n          otherNodes.push(child);\n        }\n      }\n      return {\n        summaryNode,\n        wrapperNode,\n        otherNodes\n      };\n    };\n    const padInputNode = node => {\n      const br = new global$2('br', 1);\n      br.attr('data-mce-bogus', '1');\n      node.empty();\n      node.append(br);\n    };\n    const setup$2 = editor => {\n      editor.on('PreInit', () => {\n        const {serializer, parser} = editor;\n        parser.addNodeFilter(accordionTag, nodes => {\n          for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (isAccordionDetailsNode(node)) {\n              const accordionNode = node;\n              const {summaryNode, wrapperNode, otherNodes} = getAccordionChildren(accordionNode);\n              const hasSummaryNode = isNonNullable(summaryNode);\n              const newSummaryNode = hasSummaryNode ? summaryNode : new global$2('summary', 1);\n              if (isNullable(newSummaryNode.firstChild)) {\n                padInputNode(newSummaryNode);\n              }\n              addClasses(newSummaryNode, [accordionSummaryClass]);\n              if (!hasSummaryNode) {\n                if (isNonNullable(accordionNode.firstChild)) {\n                  accordionNode.insert(newSummaryNode, accordionNode.firstChild, true);\n                } else {\n                  accordionNode.append(newSummaryNode);\n                }\n              }\n              const hasWrapperNode = isNonNullable(wrapperNode);\n              const newWrapperNode = hasWrapperNode ? wrapperNode : new global$2(accordionBodyWrapperTag, 1);\n              newWrapperNode.attr('data-mce-bogus', '1');\n              addClasses(newWrapperNode, [accordionBodyWrapperClass]);\n              if (otherNodes.length > 0) {\n                for (let j = 0; j < otherNodes.length; j++) {\n                  const otherNode = otherNodes[j];\n                  newWrapperNode.append(otherNode);\n                }\n              }\n              if (isNullable(newWrapperNode.firstChild)) {\n                const pNode = new global$2('p', 1);\n                padInputNode(pNode);\n                newWrapperNode.append(pNode);\n              }\n              if (!hasWrapperNode) {\n                accordionNode.append(newWrapperNode);\n              }\n            }\n          }\n        });\n        serializer.addNodeFilter(accordionTag, nodes => {\n          const summaryClassRemoveSet = new Set([accordionSummaryClass]);\n          for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (isAccordionDetailsNode(node)) {\n              const accordionNode = node;\n              const {summaryNode, wrapperNode} = getAccordionChildren(accordionNode);\n              if (isNonNullable(summaryNode)) {\n                removeClasses(summaryNode, summaryClassRemoveSet);\n              }\n              if (isNonNullable(wrapperNode)) {\n                wrapperNode.unwrap();\n              }\n            }\n          }\n        });\n      });\n    };\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.VK');\n\n    const setupEnterKeyInSummary = editor => {\n      editor.on('keydown', event => {\n        if (!event.shiftKey && event.keyCode === global$1.ENTER && isInSummary(editor) || isAtDetailsStart(editor)) {\n          event.preventDefault();\n          editor.execCommand('ToggleAccordion');\n        }\n      });\n    };\n    const setup$1 = editor => {\n      setupEnterKeyInSummary(editor);\n      editor.on('ExecCommand', e => {\n        const cmd = e.command.toLowerCase();\n        if ((cmd === 'delete' || cmd === 'forwarddelete') && isDetailsSelected(editor)) {\n          normalizeDetails(editor);\n        }\n      });\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.Env');\n\n    const setup = editor => {\n      if (global.browser.isSafari()) {\n        editor.on('click', e => {\n          if (isSummary(e.target)) {\n            const summary = e.target;\n            const rng = editor.selection.getRng();\n            if (rng.collapsed && rng.startContainer === summary.parentNode && rng.startOffset === 0) {\n              editor.selection.setCursorLocation(summary, 0);\n            }\n          }\n        });\n      }\n    };\n\n    const onSetup = editor => buttonApi => {\n      const onNodeChange = () => buttonApi.setEnabled(isInsertAllowed(editor));\n      editor.on('NodeChange', onNodeChange);\n      return () => editor.off('NodeChange', onNodeChange);\n    };\n    const register = editor => {\n      const onAction = () => editor.execCommand('InsertAccordion');\n      editor.ui.registry.addButton('accordion', {\n        icon: 'accordion',\n        tooltip: 'Insert accordion',\n        onSetup: onSetup(editor),\n        onAction\n      });\n      editor.ui.registry.addMenuItem('accordion', {\n        icon: 'accordion',\n        text: 'Accordion',\n        onSetup: onSetup(editor),\n        onAction\n      });\n      editor.ui.registry.addToggleButton('accordiontoggle', {\n        icon: 'accordion-toggle',\n        tooltip: 'Toggle accordion',\n        onAction: () => editor.execCommand('ToggleAccordion')\n      });\n      editor.ui.registry.addToggleButton('accordionremove', {\n        icon: 'remove',\n        tooltip: 'Delete accordion',\n        onAction: () => editor.execCommand('RemoveAccordion')\n      });\n      editor.ui.registry.addContextToolbar('accordion', {\n        predicate: accordion => editor.dom.is(accordion, 'details') && editor.getBody().contains(accordion) && editor.dom.isEditable(accordion.parentNode),\n        items: 'accordiontoggle accordionremove',\n        scope: 'node',\n        position: 'node'\n      });\n    };\n\n    var Plugin = () => {\n      global$4.add('accordion', editor => {\n        register(editor);\n        register$1(editor);\n        setup$1(editor);\n        setup$2(editor);\n        setup(editor);\n      });\n    };\n\n    Plugin();\n\n})();\n"],"names":["global$4","tinymce","util","Tools","resolve","unique","generate","prefix","time","Date","getTime","random$1","Math","floor","window","crypto","getRandomValues","Uint32Array","String","isSimpleType","type","value","isString","x","t","Array","isArray","o","v","proto","constructor","prototype","isPrototypeOf","_a","name","typeOf","isType$1","isBoolean","isNullable","a","isNonNullable","isFunction","isNumber","constant","tripleEquals","b","never","Optional","tag","this","some","none","singletonNone","fold","onNone","onSome","isSome","isNone","map","mapper","bind","binder","exists","predicate","forall","filter","getOr","replacement","or","getOrThunk","thunk","orThunk","getOrDie","message","Error","from","getOrNull","getOrUndefined","each","worker","toArray","toString","nativeIndexOf","indexOf","contains","xs","rawIndexOf","ts","call","f","len","length","r","i","each$1","keys","Object","Function","element","dom","nodeName","toLowerCase","nodeType","isType","isComment","isElement","isText","isDocument","isDocumentFragment","rawSet","key","console","error","setAttribute","set$2","setAll","attrs","obj","props","k","get$2","getAttribute","undefined","getOpt","remove$2","removeAttribute","clone","foldl","attributes","acc","attr","fromDom","node","SugarElement","fromHtml","html","scope","div","document","createElement","innerHTML","hasChildNodes","childNodes","fromTag","fromText","text","createTextNode","fromPoint","docElm","y","elementFromPoint","is$2","selector","elem","matches","msMatchesSelector","webkitMatchesSelector","mozMatchesSelector","bypassSelector","childElementCount","eq","e1","e2","is$1","trim","s","replace","isSupported","style","getPropertyValue","documentOrOwner","dos","ownerDocument","parent","parentNode","parents","isRoot","stop","ret","rawParent","p","push","prevSibling","previousSibling","nextSibling","children","firstChild","index","cs","child","getShadowRoot","e","getRootNode","host","getShadowHost","inBody","doc","body","fbc","fab","set$1","property","setProperty","internalSet","get$1","getComputedStyle","getUnsafeProperty","getRaw","raw","remove$1","removeProperty","internalRemove","lhs","rhs","comparator","left","is","before","marker","insertBefore","after$1","append$1","prepend","appendChild","wrap","wrapper","after","elements","append","descendants$1","result","concat","ancestor$1","el","remove","removeChild","unwrap","children$1","descendants","base","querySelectorAll","all","ancestor","descendant","querySelector","one","closest","ClosestOrAncestor","api","getOption","nodeValue","get","set","NodeValue","TagBoundaries","point","offset","scan","universe","direction","getText","toEnd","freefallRtl$2","candidate","query","freefallRtl$1","up","down","styles","copyTo","source","destination","as","insert","afterAll","appendAll","create","nu","cloneNode","comparePosition","other","compareDocumentPosition","isSpecial","getLanguage","setText","isBoundary","isEmptyTag","isNonEditable","accordionTag","accordionDetailsClass","accordionSummaryClass","accordionBodyWrapperClass","accordionBodyWrapperTag","global$3","isSummary","isDetails","isOpen","details","hasAttribute","isInSummary","editor","selection","getNode","Boolean","getParent","isInsertAllowed","isEditable","mode","isReadOnly","getSelectedDetails","insertBogus","createParagraph","normalizeSummary","accordion","summary","createSummary","setCursorLocation","normalizeAccordion","lastChild","paragraph","normalizeContent","insertAccordion","editorBody","getBody","uid","summaryText","encode","getRng","translate","bodyText","accordionSummaryHtml","accordionBodyHtml","undoManager","transact","insertContent","join","detailsElm","summaryElm","rng","createRng","des","setStart","setEnd","setRng","toggleDetailsElement","state","shouldOpen","removeAccordion","select","collapse","target","insertAdjacentElement","insertAndSelectParagraphAfter","register$1","addCommand","_ui","dispatch","fireToggleAccordionEvent","toggleAccordion","accordions","fireToggleAllAccordionsEvent","toggleAllAccordions","global$2","getClassList","_b","split","addClasses","classes","classListSet","Set","newClassList","removeClasses","pred","clazz","has","isAccordionDetailsNode","getAccordionChildren","accordionNode","summaryNode","wrapperNode","otherNodes","padInputNode","br","empty","global$1","setupEnterKeyInSummary","on","event","shiftKey","keyCode","ENTER","startContainer","collapsed","startOffset","isAtDetailsStart","preventDefault","execCommand","setup$1","cmd","command","isDetailsSelected","grep","normalizeDetails","global","onSetup","buttonApi","onNodeChange","setEnabled","off","add","onAction","ui","registry","addButton","icon","tooltip","addMenuItem","addToggleButton","addContextToolbar","items","position","register","serializer","parser","addNodeFilter","nodes","hasSummaryNode","newSummaryNode","hasWrapperNode","newWrapperNode","j","otherNode","pNode","summaryClassRemoveSet","setup$2","browser","isSafari","setup"],"sourceRoot":""}