{"version":3,"file":"chunks/668.d0c6b144fe6555e400f7.min.js","mappings":"iGAIA,WACI,aAEA,IAAIA,EAAWC,QAAQC,KAAKC,MAAMC,QAAQ,yBAG1C,MACMC,GADgBC,EACU,WADAC,UAAiBA,IAAUD,GAAtC,IAACA,EAGlBE,EAAWP,QAAQC,KAAKC,MAAMC,QAAQ,wBAEtCK,EAASR,QAAQC,KAAKC,MAAMC,QAAQ,sBAExC,MAAMM,EAAUC,GAAUC,GAAWA,EAAOC,QAAQC,IAAIH,GAclDI,EAAkBL,EAAO,wBACzBM,EAAoBN,EAAO,uBAC3BO,EAAsBP,EAAO,yBAE7BQ,EAAsB,CAACN,EAAQO,KACjCP,EAAOQ,oBAAoBC,KAAK,CAC5BC,KAAMH,EACNb,KAAM,WA8CRiB,EAAcX,IAChBA,EAAOY,WAAW,UAAW,KA5CpB,CAACZ,IACV,MAAMa,EAAUjB,EAASkB,IAAIC,UAAUf,EAAOgB,GAAI,QAClD,GAAIb,EAAgBH,KAAYA,EAAOiB,UACnC,OAEJjB,EAAOkB,OAEP,MAAMC,EAAiBf,EAAkBJ,GACzC,GAAIP,EAAW0B,GAGX,OAFAA,EAAeC,KAAKpB,EAAQA,QAC5BA,EAAOqB,cAGPR,GACAb,EAAOsB,UAAS,GAGXT,EAAQU,WAAYV,EAAQU,aACC,mBAAnBV,EAAQW,OACfX,EAAQW,SAGRlB,EAAoBN,EAAQ,wCAGpCA,EAAOqB,eAGPf,EAAoBN,EAAQ,kCAiB5BkB,CAAKlB,KAETA,EAAOY,WAAW,YAAa,KAhBpB,CAACZ,IACZ,MAAMyB,EAAI5B,EAAO6B,KAAK1B,EAAO2B,cAEvBC,EAAmBvB,EAAoBL,GACzCP,EAAWmC,GACXA,EAAiBR,KAAKpB,EAAQA,GAIlCA,EAAO6B,aAAaJ,IAQhBK,CAAO9B,MAIT+B,EAAe/B,GAAYgC,IAC7B,MAAMC,EAAU,KACZD,EAAIE,YAAY/B,EAAgBH,IAAWA,EAAOiB,YAItD,OAFAgB,IACAjC,EAAOmC,GAAG,mBAAoBF,GACvB,IAAMjC,EAAOoC,IAAI,mBAAoBH,IAsB5C7C,EAASiD,IAAI,OAASrC,IAvGP,CAACA,IAChB,MAAMsC,EAAiBtC,EAAOC,QAAQsC,SACtCD,EAAe,uBAAwB,CACnCE,UAAW,UACXC,SAAS,IAEbH,EAAe,sBAAuB,CAClCE,UAAW,aAEfF,EAAe,wBAAyB,CACpCE,UAAW,cA8FXE,CAAW1C,GArBF,CAACA,IACdA,EAAO2C,GAAGC,SAASC,UAAU,OAAQ,CACjCC,KAAM,OACNC,QAAS,OACTC,SAAS,EACTC,SAAU,IAAMjD,EAAOkD,YAAY,WACnCC,QAASpB,EAAY/B,GACrBoD,SAAU,WAEdpD,EAAO2C,GAAGC,SAASC,UAAU,SAAU,CACnCC,KAAM,SACNC,QAAS,SACTC,SAAS,EACTC,SAAU,IAAMjD,EAAOkD,YAAY,aACnCC,QAASpB,EAAY/B,KAEzBA,EAAOqD,YAAY,SAAU,GAAI,YAM7Bd,CAASvC,GACTW,EAAWX,IAWtB,CAnID,E","sources":["webpack://@plone/mockup/./node_modules/tinymce/plugins/save/plugin.js"],"sourcesContent":["/**\n * TinyMCE version 7.9.1 (2025-05-29)\n */\n\n(function () {\n    'use strict';\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    /* eslint-disable @typescript-eslint/no-wrapper-object-types */\n    const isSimpleType = (type) => (value) => typeof value === type;\n    const isFunction = isSimpleType('function');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n\n    var global = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    const option = (name) => (editor) => editor.options.get(name);\n    const register$2 = (editor) => {\n        const registerOption = editor.options.register;\n        registerOption('save_enablewhendirty', {\n            processor: 'boolean',\n            default: true\n        });\n        registerOption('save_onsavecallback', {\n            processor: 'function'\n        });\n        registerOption('save_oncancelcallback', {\n            processor: 'function'\n        });\n    };\n    const enableWhenDirty = option('save_enablewhendirty');\n    const getOnSaveCallback = option('save_onsavecallback');\n    const getOnCancelCallback = option('save_oncancelcallback');\n\n    const displayErrorMessage = (editor, message) => {\n        editor.notificationManager.open({\n            text: message,\n            type: 'error'\n        });\n    };\n    const save = (editor) => {\n        const formObj = global$1.DOM.getParent(editor.id, 'form');\n        if (enableWhenDirty(editor) && !editor.isDirty()) {\n            return;\n        }\n        editor.save();\n        // Use callback instead\n        const onSaveCallback = getOnSaveCallback(editor);\n        if (isFunction(onSaveCallback)) {\n            onSaveCallback.call(editor, editor);\n            editor.nodeChanged();\n            return;\n        }\n        if (formObj) {\n            editor.setDirty(false);\n            // TODO: TINY-6105 this is probably broken, as an event should be passed to `onsubmit`\n            // so we need to investigate this at some point\n            if (!formObj.onsubmit || formObj.onsubmit()) {\n                if (typeof formObj.submit === 'function') {\n                    formObj.submit();\n                }\n                else {\n                    displayErrorMessage(editor, 'Error: Form submit field collision.');\n                }\n            }\n            editor.nodeChanged();\n        }\n        else {\n            displayErrorMessage(editor, 'Error: No form element found.');\n        }\n    };\n    const cancel = (editor) => {\n        const h = global.trim(editor.startContent);\n        // Use callback instead\n        const onCancelCallback = getOnCancelCallback(editor);\n        if (isFunction(onCancelCallback)) {\n            onCancelCallback.call(editor, editor);\n            return;\n        }\n        // Reset the editor content back to the initial state\n        editor.resetContent(h);\n    };\n\n    const register$1 = (editor) => {\n        editor.addCommand('mceSave', () => {\n            save(editor);\n        });\n        editor.addCommand('mceCancel', () => {\n            cancel(editor);\n        });\n    };\n\n    const stateToggle = (editor) => (api) => {\n        const handler = () => {\n            api.setEnabled(!enableWhenDirty(editor) || editor.isDirty());\n        };\n        handler();\n        editor.on('NodeChange dirty', handler);\n        return () => editor.off('NodeChange dirty', handler);\n    };\n    const register = (editor) => {\n        editor.ui.registry.addButton('save', {\n            icon: 'save',\n            tooltip: 'Save',\n            enabled: false,\n            onAction: () => editor.execCommand('mceSave'),\n            onSetup: stateToggle(editor),\n            shortcut: 'Meta+S'\n        });\n        editor.ui.registry.addButton('cancel', {\n            icon: 'cancel',\n            tooltip: 'Cancel',\n            enabled: false,\n            onAction: () => editor.execCommand('mceCancel'),\n            onSetup: stateToggle(editor)\n        });\n        editor.addShortcut('Meta+S', '', 'mceSave');\n    };\n\n    var Plugin = () => {\n        global$2.add('save', (editor) => {\n            register$2(editor);\n            register(editor);\n            register$1(editor);\n        });\n    };\n\n    Plugin();\n    /** *****\n     * DO NOT EXPORT ANYTHING\n     *\n     * IF YOU DO ROLLUP WILL LEAVE A GLOBAL ON THE PAGE\n     *******/\n\n})();\n"],"names":["global$2","tinymce","util","Tools","resolve","isFunction","type","value","global$1","global","option","name","editor","options","get","enableWhenDirty","getOnSaveCallback","getOnCancelCallback","displayErrorMessage","message","notificationManager","open","text","register$1","addCommand","formObj","DOM","getParent","id","isDirty","save","onSaveCallback","call","nodeChanged","setDirty","onsubmit","submit","h","trim","startContent","onCancelCallback","resetContent","cancel","stateToggle","api","handler","setEnabled","on","off","add","registerOption","register","processor","default","register$2","ui","registry","addButton","icon","tooltip","enabled","onAction","execCommand","onSetup","shortcut","addShortcut"],"sourceRoot":""}