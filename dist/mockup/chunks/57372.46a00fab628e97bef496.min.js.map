{"version":3,"file":"chunks/57372.46a00fab628e97bef496.min.js","mappings":"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","sources":["webpack://@plone/mockup/./node_modules/tinymce/plugins/autosave/index.js","webpack://@plone/mockup/./node_modules/tinymce/plugins/autosave/plugin.js"],"sourcesContent":["// Exports the \"autosave\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/autosave')\n//   ES2015:\n//     import 'tinymce/plugins/autosave'\nrequire('./plugin.js');","/**\n * TinyMCE version 7.2.1 (2024-07-03)\n */\n\n(function () {\n    'use strict';\n\n    var global$4 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    const hasProto = (v, constructor, predicate) => {\n      var _a;\n      if (predicate(v, constructor.prototype)) {\n        return true;\n      } else {\n        return ((_a = v.constructor) === null || _a === void 0 ? void 0 : _a.name) === constructor.name;\n      }\n    };\n    const typeOf = x => {\n      const t = typeof x;\n      if (x === null) {\n        return 'null';\n      } else if (t === 'object' && Array.isArray(x)) {\n        return 'array';\n      } else if (t === 'object' && hasProto(x, String, (o, proto) => proto.isPrototypeOf(o))) {\n        return 'string';\n      } else {\n        return t;\n      }\n    };\n    const isType = type => value => typeOf(value) === type;\n    const eq = t => a => t === a;\n    const isString = isType('string');\n    const isUndefined = eq(undefined);\n\n    var global$3 = tinymce.util.Tools.resolve('tinymce.util.Delay');\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.util.LocalStorage');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    const fireRestoreDraft = editor => editor.dispatch('RestoreDraft');\n    const fireStoreDraft = editor => editor.dispatch('StoreDraft');\n    const fireRemoveDraft = editor => editor.dispatch('RemoveDraft');\n\n    const parse = timeString => {\n      const multiples = {\n        s: 1000,\n        m: 60000\n      };\n      const parsedTime = /^(\\d+)([ms]?)$/.exec(timeString);\n      return (parsedTime && parsedTime[2] ? multiples[parsedTime[2]] : 1) * parseInt(timeString, 10);\n    };\n\n    const option = name => editor => editor.options.get(name);\n    const register$1 = editor => {\n      const registerOption = editor.options.register;\n      const timeProcessor = value => {\n        const valid = isString(value);\n        if (valid) {\n          return {\n            value: parse(value),\n            valid\n          };\n        } else {\n          return {\n            valid: false,\n            message: 'Must be a string.'\n          };\n        }\n      };\n      registerOption('autosave_ask_before_unload', {\n        processor: 'boolean',\n        default: true\n      });\n      registerOption('autosave_prefix', {\n        processor: 'string',\n        default: 'tinymce-autosave-{path}{query}{hash}-{id}-'\n      });\n      registerOption('autosave_restore_when_empty', {\n        processor: 'boolean',\n        default: false\n      });\n      registerOption('autosave_interval', {\n        processor: timeProcessor,\n        default: '30s'\n      });\n      registerOption('autosave_retention', {\n        processor: timeProcessor,\n        default: '20m'\n      });\n    };\n    const shouldAskBeforeUnload = option('autosave_ask_before_unload');\n    const shouldRestoreWhenEmpty = option('autosave_restore_when_empty');\n    const getAutoSaveInterval = option('autosave_interval');\n    const getAutoSaveRetention = option('autosave_retention');\n    const getAutoSavePrefix = editor => {\n      const location = document.location;\n      return editor.options.get('autosave_prefix').replace(/{path}/g, location.pathname).replace(/{query}/g, location.search).replace(/{hash}/g, location.hash).replace(/{id}/g, editor.id);\n    };\n\n    const isEmpty = (editor, html) => {\n      if (isUndefined(html)) {\n        return editor.dom.isEmpty(editor.getBody());\n      } else {\n        const trimmedHtml = global$1.trim(html);\n        if (trimmedHtml === '') {\n          return true;\n        } else {\n          const fragment = new DOMParser().parseFromString(trimmedHtml, 'text/html');\n          return editor.dom.isEmpty(fragment);\n        }\n      }\n    };\n    const hasDraft = editor => {\n      var _a;\n      const time = parseInt((_a = global$2.getItem(getAutoSavePrefix(editor) + 'time')) !== null && _a !== void 0 ? _a : '0', 10) || 0;\n      if (new Date().getTime() - time > getAutoSaveRetention(editor)) {\n        removeDraft(editor, false);\n        return false;\n      }\n      return true;\n    };\n    const removeDraft = (editor, fire) => {\n      const prefix = getAutoSavePrefix(editor);\n      global$2.removeItem(prefix + 'draft');\n      global$2.removeItem(prefix + 'time');\n      if (fire !== false) {\n        fireRemoveDraft(editor);\n      }\n    };\n    const storeDraft = editor => {\n      const prefix = getAutoSavePrefix(editor);\n      if (!isEmpty(editor) && editor.isDirty()) {\n        global$2.setItem(prefix + 'draft', editor.getContent({\n          format: 'raw',\n          no_events: true\n        }));\n        global$2.setItem(prefix + 'time', new Date().getTime().toString());\n        fireStoreDraft(editor);\n      }\n    };\n    const restoreDraft = editor => {\n      var _a;\n      const prefix = getAutoSavePrefix(editor);\n      if (hasDraft(editor)) {\n        editor.setContent((_a = global$2.getItem(prefix + 'draft')) !== null && _a !== void 0 ? _a : '', { format: 'raw' });\n        fireRestoreDraft(editor);\n      }\n    };\n    const startStoreDraft = editor => {\n      const interval = getAutoSaveInterval(editor);\n      global$3.setEditorInterval(editor, () => {\n        storeDraft(editor);\n      }, interval);\n    };\n    const restoreLastDraft = editor => {\n      editor.undoManager.transact(() => {\n        restoreDraft(editor);\n        removeDraft(editor);\n      });\n      editor.focus();\n    };\n\n    const get = editor => ({\n      hasDraft: () => hasDraft(editor),\n      storeDraft: () => storeDraft(editor),\n      restoreDraft: () => restoreDraft(editor),\n      removeDraft: fire => removeDraft(editor, fire),\n      isEmpty: html => isEmpty(editor, html)\n    });\n\n    var global = tinymce.util.Tools.resolve('tinymce.EditorManager');\n\n    const setup = editor => {\n      editor.editorManager.on('BeforeUnload', e => {\n        let msg;\n        global$1.each(global.get(), editor => {\n          if (editor.plugins.autosave) {\n            editor.plugins.autosave.storeDraft();\n          }\n          if (!msg && editor.isDirty() && shouldAskBeforeUnload(editor)) {\n            msg = editor.translate('You have unsaved changes are you sure you want to navigate away?');\n          }\n        });\n        if (msg) {\n          e.preventDefault();\n          e.returnValue = msg;\n        }\n      });\n    };\n\n    const makeSetupHandler = editor => api => {\n      api.setEnabled(hasDraft(editor));\n      const editorEventCallback = () => api.setEnabled(hasDraft(editor));\n      editor.on('StoreDraft RestoreDraft RemoveDraft', editorEventCallback);\n      return () => editor.off('StoreDraft RestoreDraft RemoveDraft', editorEventCallback);\n    };\n    const register = editor => {\n      startStoreDraft(editor);\n      const onAction = () => {\n        restoreLastDraft(editor);\n      };\n      editor.ui.registry.addButton('restoredraft', {\n        tooltip: 'Restore last draft',\n        icon: 'restore-draft',\n        onAction,\n        onSetup: makeSetupHandler(editor)\n      });\n      editor.ui.registry.addMenuItem('restoredraft', {\n        text: 'Restore last draft',\n        icon: 'restore-draft',\n        onAction,\n        onSetup: makeSetupHandler(editor)\n      });\n    };\n\n    var Plugin = () => {\n      global$4.add('autosave', editor => {\n        register$1(editor);\n        setup(editor);\n        register(editor);\n        editor.on('init', () => {\n          if (shouldRestoreWhenEmpty(editor) && editor.dom.isEmpty(editor.getBody())) {\n            restoreDraft(editor);\n          }\n        });\n        return get(editor);\n      });\n    };\n\n    Plugin();\n\n})();\n"],"names":["global$4","tinymce","util","Tools","resolve","isString","type","value","x","t","Array","isArray","o","v","constructor","String","prototype","isPrototypeOf","_a","name","typeOf","isUndefined","undefined","a","global$3","global$2","global$1","parse","timeString","parsedTime","exec","s","m","parseInt","option","editor","options","get","shouldAskBeforeUnload","shouldRestoreWhenEmpty","getAutoSaveInterval","getAutoSaveRetention","getAutoSavePrefix","location","document","replace","pathname","search","hash","id","isEmpty","html","dom","getBody","trimmedHtml","trim","fragment","DOMParser","parseFromString","hasDraft","time","getItem","Date","getTime","removeDraft","fire","prefix","removeItem","dispatch","fireRemoveDraft","storeDraft","isDirty","setItem","getContent","format","no_events","toString","fireStoreDraft","restoreDraft","setContent","fireRestoreDraft","global","makeSetupHandler","api","setEnabled","editorEventCallback","on","off","register","interval","setEditorInterval","startStoreDraft","onAction","undoManager","transact","focus","restoreLastDraft","ui","registry","addButton","tooltip","icon","onSetup","addMenuItem","text","add","registerOption","timeProcessor","valid","message","processor","default","register$1","editorManager","e","msg","each","plugins","autosave","translate","preventDefault","returnValue","setup"],"sourceRoot":""}