{"version":3,"file":"chunks/57372.493b8e54eb22e7745592.min.js","mappings":"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","sources":["webpack://@plone/mockup/./node_modules/tinymce/plugins/autosave/plugin.js","webpack://@plone/mockup/./node_modules/tinymce/plugins/autosave/index.js"],"sourcesContent":["/**\n * TinyMCE version 7.9.1 (2025-05-29)\n */\n\n(function () {\n    'use strict';\n\n    var global$4 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    /* eslint-disable @typescript-eslint/no-wrapper-object-types */\n    const hasProto = (v, constructor, predicate) => {\n        var _a;\n        if (predicate(v, constructor.prototype)) {\n            return true;\n        }\n        else {\n            // String-based fallback time\n            return ((_a = v.constructor) === null || _a === void 0 ? void 0 : _a.name) === constructor.name;\n        }\n    };\n    const typeOf = (x) => {\n        const t = typeof x;\n        if (x === null) {\n            return 'null';\n        }\n        else if (t === 'object' && Array.isArray(x)) {\n            return 'array';\n        }\n        else if (t === 'object' && hasProto(x, String, (o, proto) => proto.isPrototypeOf(o))) {\n            return 'string';\n        }\n        else {\n            return t;\n        }\n    };\n    const isType = (type) => (value) => typeOf(value) === type;\n    const eq = (t) => (a) => t === a;\n    const isString = isType('string');\n    const isUndefined = eq(undefined);\n\n    var global$3 = tinymce.util.Tools.resolve('tinymce.util.Delay');\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.util.LocalStorage');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    const fireRestoreDraft = (editor) => editor.dispatch('RestoreDraft');\n    const fireStoreDraft = (editor) => editor.dispatch('StoreDraft');\n    const fireRemoveDraft = (editor) => editor.dispatch('RemoveDraft');\n\n    const parse = (timeString) => {\n        const multiples = {\n            s: 1000,\n            m: 60000\n        };\n        const parsedTime = /^(\\d+)([ms]?)$/.exec(timeString);\n        return (parsedTime && parsedTime[2] ? multiples[parsedTime[2]] : 1) * parseInt(timeString, 10);\n    };\n\n    const option = (name) => (editor) => editor.options.get(name);\n    const register$1 = (editor) => {\n        const registerOption = editor.options.register;\n        const timeProcessor = (value) => {\n            const valid = isString(value);\n            if (valid) {\n                return { value: parse(value), valid };\n            }\n            else {\n                return { valid: false, message: 'Must be a string.' };\n            }\n        };\n        registerOption('autosave_ask_before_unload', {\n            processor: 'boolean',\n            default: true\n        });\n        registerOption('autosave_prefix', {\n            processor: 'string',\n            default: 'tinymce-autosave-{path}{query}{hash}-{id}-'\n        });\n        registerOption('autosave_restore_when_empty', {\n            processor: 'boolean',\n            default: false\n        });\n        registerOption('autosave_interval', {\n            processor: timeProcessor,\n            default: '30s'\n        });\n        registerOption('autosave_retention', {\n            processor: timeProcessor,\n            default: '20m'\n        });\n    };\n    const shouldAskBeforeUnload = option('autosave_ask_before_unload');\n    const shouldRestoreWhenEmpty = option('autosave_restore_when_empty');\n    const getAutoSaveInterval = option('autosave_interval');\n    const getAutoSaveRetention = option('autosave_retention');\n    const getAutoSavePrefix = (editor) => {\n        const location = document.location;\n        return editor.options.get('autosave_prefix').replace(/{path}/g, location.pathname)\n            .replace(/{query}/g, location.search)\n            .replace(/{hash}/g, location.hash)\n            .replace(/{id}/g, editor.id);\n    };\n\n    const isEmpty = (editor, html) => {\n        if (isUndefined(html)) {\n            return editor.dom.isEmpty(editor.getBody());\n        }\n        else {\n            const trimmedHtml = global$1.trim(html);\n            if (trimmedHtml === '') {\n                return true;\n            }\n            else {\n                const fragment = new DOMParser().parseFromString(trimmedHtml, 'text/html');\n                return editor.dom.isEmpty(fragment);\n            }\n        }\n    };\n    const hasDraft = (editor) => {\n        var _a;\n        const time = parseInt((_a = global$2.getItem(getAutoSavePrefix(editor) + 'time')) !== null && _a !== void 0 ? _a : '0', 10) || 0;\n        if (new Date().getTime() - time > getAutoSaveRetention(editor)) {\n            removeDraft(editor, false);\n            return false;\n        }\n        return true;\n    };\n    const removeDraft = (editor, fire) => {\n        const prefix = getAutoSavePrefix(editor);\n        global$2.removeItem(prefix + 'draft');\n        global$2.removeItem(prefix + 'time');\n        if (fire !== false) {\n            fireRemoveDraft(editor);\n        }\n    };\n    const storeDraft = (editor) => {\n        const prefix = getAutoSavePrefix(editor);\n        if (!isEmpty(editor) && editor.isDirty()) {\n            global$2.setItem(prefix + 'draft', editor.getContent({ format: 'raw', no_events: true }));\n            global$2.setItem(prefix + 'time', new Date().getTime().toString());\n            fireStoreDraft(editor);\n        }\n    };\n    const restoreDraft = (editor) => {\n        var _a;\n        const prefix = getAutoSavePrefix(editor);\n        if (hasDraft(editor)) {\n            editor.setContent((_a = global$2.getItem(prefix + 'draft')) !== null && _a !== void 0 ? _a : '', { format: 'raw' });\n            fireRestoreDraft(editor);\n        }\n    };\n    const startStoreDraft = (editor) => {\n        const interval = getAutoSaveInterval(editor);\n        global$3.setEditorInterval(editor, () => {\n            storeDraft(editor);\n        }, interval);\n    };\n    const restoreLastDraft = (editor) => {\n        editor.undoManager.transact(() => {\n            restoreDraft(editor);\n            removeDraft(editor);\n        });\n        editor.focus();\n    };\n\n    const get = (editor) => ({\n        hasDraft: () => hasDraft(editor),\n        storeDraft: () => storeDraft(editor),\n        restoreDraft: () => restoreDraft(editor),\n        removeDraft: (fire) => removeDraft(editor, fire),\n        isEmpty: (html) => isEmpty(editor, html)\n    });\n\n    var global = tinymce.util.Tools.resolve('tinymce.EditorManager');\n\n    const setup = (editor) => {\n        editor.editorManager.on('BeforeUnload', (e) => {\n            let msg;\n            global$1.each(global.get(), (editor) => {\n                // Store a draft for each editor instance\n                if (editor.plugins.autosave) {\n                    editor.plugins.autosave.storeDraft();\n                }\n                // Setup a return message if the editor is dirty\n                if (!msg && editor.isDirty() && shouldAskBeforeUnload(editor)) {\n                    msg = editor.translate('You have unsaved changes are you sure you want to navigate away?');\n                }\n            });\n            if (msg) {\n                e.preventDefault();\n                e.returnValue = msg;\n            }\n        });\n    };\n\n    const makeSetupHandler = (editor) => (api) => {\n        const shouldEnable = () => hasDraft(editor) && !editor.mode.isReadOnly();\n        api.setEnabled(shouldEnable());\n        const editorEventCallback = () => api.setEnabled(shouldEnable());\n        editor.on('StoreDraft RestoreDraft RemoveDraft', editorEventCallback);\n        return () => editor.off('StoreDraft RestoreDraft RemoveDraft', editorEventCallback);\n    };\n    const register = (editor) => {\n        // TODO: This was moved from makeSetupHandler as it would only be called when the menu item was rendered?\n        //       Is it safe to start this process when the plugin is registered?\n        startStoreDraft(editor);\n        const onAction = () => {\n            restoreLastDraft(editor);\n        };\n        editor.ui.registry.addButton('restoredraft', {\n            tooltip: 'Restore last draft',\n            icon: 'restore-draft',\n            onAction,\n            onSetup: makeSetupHandler(editor)\n        });\n        editor.ui.registry.addMenuItem('restoredraft', {\n            text: 'Restore last draft',\n            icon: 'restore-draft',\n            onAction,\n            onSetup: makeSetupHandler(editor)\n        });\n    };\n\n    /**\n     * This class contains all core logic for the autosave plugin.\n     *\n     * @class tinymce.autosave.Plugin\n     * @private\n     */\n    var Plugin = () => {\n        global$4.add('autosave', (editor) => {\n            register$1(editor);\n            setup(editor);\n            register(editor);\n            editor.on('init', () => {\n                if (shouldRestoreWhenEmpty(editor) && editor.dom.isEmpty(editor.getBody())) {\n                    restoreDraft(editor);\n                }\n            });\n            return get(editor);\n        });\n    };\n\n    Plugin();\n    /** *****\n     * DO NOT EXPORT ANYTHING\n     *\n     * IF YOU DO ROLLUP WILL LEAVE A GLOBAL ON THE PAGE\n     *******/\n\n})();\n","// Exports the \"autosave\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/autosave')\n//   ES2015:\n//     import 'tinymce/plugins/autosave'\nrequire('./plugin.js');"],"names":["global$4","tinymce","util","Tools","resolve","isString","type","value","x","t","Array","isArray","o","v","constructor","String","prototype","isPrototypeOf","_a","name","typeOf","isUndefined","undefined","a","global$3","global$2","global$1","parse","timeString","parsedTime","exec","s","m","parseInt","option","editor","options","get","shouldAskBeforeUnload","shouldRestoreWhenEmpty","getAutoSaveInterval","getAutoSaveRetention","getAutoSavePrefix","location","document","replace","pathname","search","hash","id","isEmpty","html","dom","getBody","trimmedHtml","trim","fragment","DOMParser","parseFromString","hasDraft","time","getItem","Date","getTime","removeDraft","fire","prefix","removeItem","dispatch","fireRemoveDraft","storeDraft","isDirty","setItem","getContent","format","no_events","toString","fireStoreDraft","restoreDraft","setContent","fireRestoreDraft","global","makeSetupHandler","api","shouldEnable","mode","isReadOnly","setEnabled","editorEventCallback","on","off","register","interval","setEditorInterval","startStoreDraft","onAction","undoManager","transact","focus","restoreLastDraft","ui","registry","addButton","tooltip","icon","onSetup","addMenuItem","text","add","registerOption","timeProcessor","valid","message","processor","default","register$1","editorManager","e","msg","each","plugins","autosave","translate","preventDefault","returnValue","setup"],"sourceRoot":""}