{"version":3,"file":"chunks/18085.74c04e2aa7dd941fe3c0.min.js","mappings":"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","sources":["webpack://@plone/mockup/./src/pat/contentbrowser/src/ContentBrowser.svelte","webpack://@plone/mockup/./src/pat/contentbrowser/src/SelectedItems.svelte","webpack://@plone/mockup/./src/pat/contentbrowser/src/utils.js","webpack://@plone/mockup/./src/pat/contentbrowser/src/ContentStore.js","webpack://@plone/mockup/Favorites.svelte","webpack://@plone/mockup/RecentlyUsed.svelte","webpack://@plone/mockup/./src/pat/contentbrowser/src/ContentBrowser.svelte?b874","webpack://@plone/mockup/ContentBrowser.svelte","webpack://@plone/mockup/./src/pat/contentbrowser/src/SelectedItems.svelte?e8bf","webpack://@plone/mockup/SelectedItems.svelte","webpack://@plone/mockup/./src/pat/contentbrowser/src/stores.js","webpack://@plone/mockup/App.svelte"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".content-browser-position-wrapper.svelte-1lcbp2k.svelte-1lcbp2k.svelte-1lcbp2k{position:fixed;top:0;right:0;display:flex;justify-content:end;z-index:1500;width:100%;height:100vh;background-color:rgba(0,0,0,.25)}.btn-xs.svelte-1lcbp2k.svelte-1lcbp2k.svelte-1lcbp2k{--bs-btn-padding-y:0.15rem;--bs-btn-padding-x:0.5rem;--bs-btn-font-size:0.75rem}.content-browser.svelte-1lcbp2k.svelte-1lcbp2k.svelte-1lcbp2k{height:100vh;min-width:550px;background-color:var(--bs-light-bg-subtle);border-left:var(--bs-border-style) var(--bs-border-width) #fff;z-index:1500;display:flex;flex-direction:column}.toolBar.svelte-1lcbp2k.svelte-1lcbp2k.svelte-1lcbp2k{background-color:var(--bs-primary);padding:.325rem .75rem;color:var(--bs-light);width:100%;display:flex;justify-content:start}.toolBar.svelte-1lcbp2k svg{vertical-align:-0.125em}.levelColumns.svelte-1lcbp2k.svelte-1lcbp2k.svelte-1lcbp2k{display:flex;flex-wrap:nowrap;width:100%;overflow:hidden;flex-grow:3;border-left:var(--bs-border-style) var(--bs-border-color) var(--bs-border-width);user-select:none}.levelColumn.svelte-1lcbp2k.svelte-1lcbp2k.svelte-1lcbp2k{width:320px;border-right:var(--bs-border-style) var(--bs-border-width) var(--bs-border-color);display:flex;flex-direction:column}.levelToolbar.svelte-1lcbp2k.svelte-1lcbp2k.svelte-1lcbp2k{width:100%;height:2.5rem;display:flex;justify-content:space-between;padding:.375rem;border-bottom:var(--bs-border-style) var(--bs-border-width) var(--bs-border-color)}.levelToolbar.svelte-1lcbp2k>.levelActions.svelte-1lcbp2k.svelte-1lcbp2k{margin-left:auto}.levelItems.svelte-1lcbp2k.svelte-1lcbp2k.svelte-1lcbp2k{overflow-x:auto}.contentItem.svelte-1lcbp2k.svelte-1lcbp2k.svelte-1lcbp2k{display:flex;align-items:center;justify-content:space-between;font-size:90%;min-height:2rem}.contentItem.svelte-1lcbp2k.svelte-1lcbp2k.svelte-1lcbp2k:focus-visible{outline:none}.contentItem.even.svelte-1lcbp2k.svelte-1lcbp2k.svelte-1lcbp2k{background-color:rgba(var(--bs-secondary-bg-rgb), 0.4)}.contentItem.inPath.svelte-1lcbp2k.svelte-1lcbp2k.svelte-1lcbp2k,.contentItem.svelte-1lcbp2k.svelte-1lcbp2k.svelte-1lcbp2k:focus{background-color:rgba(var(--bs-primary-rgb), 0.15)}.contentItem.selectedItem.svelte-1lcbp2k.svelte-1lcbp2k.svelte-1lcbp2k{background-color:var(--bs-primary);color:var(--bs-body-bg)}.contentItem.svelte-1lcbp2k>.svelte-1lcbp2k.svelte-1lcbp2k{padding:.5rem;white-space:nowrap;max-width:450px;text-overflow:ellipsis;overflow:hidden}.contentItem.svelte-1lcbp2k>.browseSub.svelte-1lcbp2k.svelte-1lcbp2k{flex-shrink:0}.contentItem.svelte-1lcbp2k .grid-preview.svelte-1lcbp2k>img.svelte-1lcbp2k{width:95px;height:95px;object-fit:cover;float:left;margin-right:1rem}.preview.svelte-1lcbp2k.svelte-1lcbp2k.svelte-1lcbp2k{width:320px;min-height:300px;display:flex;flex-direction:column;align-items:center}.preview.svelte-1lcbp2k .info.svelte-1lcbp2k.svelte-1lcbp2k{padding:.5rem;width:100%;word-wrap:anywhere}.preview.svelte-1lcbp2k .info .previewIcon.svelte-1lcbp2k.svelte-1lcbp2k{margin:0 auto 1rem auto}.preview.svelte-1lcbp2k .info .previewIcon svg.svelte-1lcbp2k.svelte-1lcbp2k{width:50px !important;height:50px !important}.preview.svelte-1lcbp2k h4.svelte-1lcbp2k.svelte-1lcbp2k{font-size:1.2 rem}.preview.svelte-1lcbp2k img.svelte-1lcbp2k.svelte-1lcbp2k{max-width:100%;max-width:100%;margin-bottom:.5rem}.upload-wrapper.svelte-1lcbp2k.svelte-1lcbp2k.svelte-1lcbp2k{padding:1rem;width:590px;overflow-x:auto}.loadmore.svelte-1lcbp2k.svelte-1lcbp2k.svelte-1lcbp2k{text-align:center;padding:.25rem 0}\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/pat/contentbrowser/src/ContentBrowser.svelte\"],\"names\":[],\"mappings\":\"AAAA,+EAAA,cAAA,CAAA,KAAA,CAAA,OAAA,CAAA,YAAA,CAAA,mBAAA,CAAA,YAAA,CAAA,UAAA,CAAA,YAAA,CAAA,gCAAA,CAAA,qDAAA,0BAAA,CAAA,yBAAA,CAAA,0BAAA,CAAA,8DAAA,YAAA,CAAA,eAAA,CAAA,0CAAA,CAAA,8DAAA,CAAA,YAAA,CAAA,YAAA,CAAA,qBAAA,CAAA,sDAAA,kCAAA,CAAA,sBAAA,CAAA,qBAAA,CAAA,UAAA,CAAA,YAAA,CAAA,qBAAA,CAAA,4BAAA,uBAAA,CAAA,2DAAA,YAAA,CAAA,gBAAA,CAAA,UAAA,CAAA,eAAA,CAAA,WAAA,CAAA,gFAAA,CAAA,gBAAA,CAAA,0DAAA,WAAA,CAAA,iFAAA,CACmC,YAAA,CAAA,qBAAA,CAAA,2DAAA,UAAA,CAAA,aAAA,CAAA,YAAA,CAAA,6BAAA,CAAA,eAAA,CAAA,kFAAA,CACA,yEAAA,gBAAA,CAAA,yDAAA,eAAA,CAAA,0DAAA,YAAA,CAAA,kBAAA,CAAA,6BAAA,CAAA,aAAA,CAAA,eAAA,CAAA,wEAAA,YAAA,CAAA,+DAAA,sDAAA,CAAA,iIAAA,kDAAA,CAAA,uEAAA,kCAAA,CAAA,uBAAA,CAAA,2DAAA,aAAA,CAAA,kBAAA,CAAA,eAAA,CAAA,sBAAA,CAAA,eAAA,CAAA,qEAAA,aAAA,CAAA,4EAAA,UAAA,CAAA,WAAA,CAAA,gBAAA,CAAA,UAAA,CAAA,iBAAA,CAAA,sDAAA,WAAA,CAAA,gBAAA,CAAA,YAAA,CAAA,qBAAA,CAAA,kBAAA,CAAA,4DAAA,aAAA,CAAA,UAAA,CAAA,kBAAA,CAAA,yEAAA,uBAAA,CAAA,6EAAA,qBAAA,CAAA,sBAAA,CAAA,yDAAA,iBAAA,CAAA,0DAAA,cAAA,CAAA,cAAA,CAAA,mBAAA,CAAA,6DAAA,YAAA,CAAA,WAAA,CAAA,eAAA,CAAA,uDAAA,iBAAA,CAAA,gBAAA\",\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".content-browser-selected-items-wrapper.svelte-bljrxf.svelte-bljrxf.svelte-bljrxf{display:flex;align-items:start}.content-browser-selected-items.svelte-bljrxf.svelte-bljrxf.svelte-bljrxf{list-style:none;background-color:var(--bs-body-bg);border-radius:var(--bs-border-radius) 0 0 var(--bs-border-radius);border:var(--bs-border-style) var(--bs-border-color) var(--bs-border-width);min-height:2.4rem;padding:.5rem .5rem 0 .5rem;flex:1 1 auto}.content-browser-selected-items.svelte-bljrxf .selected-item.svelte-bljrxf.svelte-bljrxf{border-radius:var(--bs-border-radius);background-color:var(--bs-tertiary-bg);border:var(--bs-border-style) var(--bs-border-color) var(--bs-border-width);padding:.5rem;margin-bottom:.5rem;display:flex;flex-wrap:nowrap;align-items:start;justify-content:space-between;cursor:move}.content-browser-selected-items.svelte-bljrxf .selected-item.svelte-bljrxf>.svelte-bljrxf{margin-right:.5rem;display:block}.content-browser-selected-items.svelte-bljrxf .selected-item button.svelte-bljrxf.svelte-bljrxf{cursor:pointer;padding:0 .375rem .374rem 0}.content-browser-selected-items.svelte-bljrxf .selected-item .item-info.svelte-bljrxf.svelte-bljrxf{display:flex;align-items:start}.content-browser-selected-items.svelte-bljrxf .selected-item.svelte-bljrxf>img.svelte-bljrxf{object-fit:cover;width:95px;height:95px}\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/pat/contentbrowser/src/SelectedItems.svelte\"],\"names\":[],\"mappings\":\"AAAA,kFAAA,YAAA,CAAA,iBAAA,CAAA,0EAAA,eAAA,CAAA,kCAAA,CAAA,iEAAA,CAAA,2EAAA,CAAA,iBAAA,CAAA,2BAAA,CAAA,aAAA,CAAA,yFAAA,qCAAA,CAAA,sCAAA,CAAA,2EAAA,CAAA,aAAA,CAAA,mBAAA,CAAA,YAAA,CAAA,gBAAA,CAAA,iBAAA,CAAA,6BAAA,CAAA,WAAA,CAAA,0FAAA,kBAAA,CAAA,aAAA,CAAA,gGAAA,cAAA,CAAA,2BAAA,CAAA,oGAAA,YAAA,CAAA,iBAAA,CAAA,6FAAA,gBAAA,CAAA,UAAA,CAAA,WAAA\",\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import utils from \"../../../core/utils.js\";\n\nexport async function request({\n    method = \"GET\",\n    vocabularyUrl = null,\n    attributes = [],\n    path = null,\n    uids = null,\n    searchTerm = null,\n    searchPath = null,\n    levelInfoPath = null,\n    selectableTypes = [],\n    pageSize = 100,\n    page = 1,\n}) {\n    let vocabQuery = {\n        criteria: [],\n    };\n    if (path) {\n        // query sublevel of path\n        vocabQuery = {\n            criteria: [\n                {\n                    i: \"path\",\n                    o: \"plone.app.querystring.operation.string.path\",\n                    v: `${path}::1`,\n                },\n            ],\n            sort_on: \"getObjPositionInParent\",\n            sort_order: \"ascending\",\n        };\n    }\n    if (levelInfoPath) {\n        // query exact path\n        vocabQuery = {\n            criteria: [\n                {\n                    i: \"path\",\n                    o: \"plone.app.querystring.operation.string.path\",\n                    v: `${levelInfoPath}::0`,\n                },\n            ],\n        };\n    }\n    if (searchPath) {\n        // search from searchPath down\n        vocabQuery = {\n            criteria: [\n                {\n                    i: \"path\",\n                    o: \"plone.app.querystring.operation.string.path\",\n                    v: searchPath,\n                },\n            ],\n        };\n        if (selectableTypes.length) {\n            vocabQuery.criteria.push({\n                i: \"portal_type\",\n                o: \"plone.app.querystring.operation.list.contains\",\n                v: selectableTypes,\n            })\n        }\n    }\n    if (uids) {\n        vocabQuery = {\n            criteria: [\n                {\n                    i: \"UID\",\n                    o: \"plone.app.querystring.operation.list.contains\",\n                    v: uids,\n                },\n            ],\n        };\n    }\n    if (searchTerm) {\n        vocabQuery.criteria.push({\n            i: \"SearchableText\",\n            o: \"plone.app.querystring.operation.string.contains\",\n            v: `${searchTerm}`,\n\n        })\n    }\n\n    if (!vocabQuery.criteria.length) {\n        return {\n            results: [],\n            total: 0,\n        }\n    };\n\n    let url = `${vocabularyUrl}&query=${JSON.stringify(\n        vocabQuery\n    )}&attributes=${JSON.stringify(attributes)}&batch=${JSON.stringify({\n        page: page,\n        size: pageSize,\n    })}`;\n\n    let headers = new Headers();\n    headers.set(\"Accept\", \"application/json\");\n\n    const response = await fetch(url, {\n        method: method,\n        headers: headers,\n    });\n\n    if (!response.ok) {\n        return {\n            results: [],\n            total: 0,\n            errors: json.errors,\n        };\n    }\n\n    const json = await response.json();\n\n    if (!searchPath && !levelInfoPath && selectableTypes.length) {\n        // we iter through response and filter out non-selectable\n        // types but keep folderish types to maintain browsing\n        // the content structure.\n        const filtered_response = {\n            results: [],\n            total: json.total,\n        }\n        for (const it of json.results) {\n            if (selectableTypes.indexOf(it.portal_type) != -1 || it.is_folderish) {\n                filtered_response.results.push(it);\n            }\n        }\n        return filtered_response;\n    }\n    return json;\n}\n\nexport async function get_items_from_uids(uids, config) {\n    if (!uids) {\n        return [];\n    }\n    const selectedItemsFromUids = await request({\n        vocabularyUrl: config.vocabularyUrl,\n        attributes: config.attributes,\n        uids: uids,\n    });\n    let results = (await selectedItemsFromUids?.results) || [];\n    // resort the results based on the order of uids\n    results.sort((a, b) => {\n        return uids.indexOf(a.UID) - uids.indexOf(b.UID);\n    })\n    return results;\n}\n\n\n/** use Plone resolveIcon to load a SVG icon and replace node with icon code */\nexport async function resolveIcon(node, { iconName }) {\n    async function getIcon(iconName) {\n        const icon = await utils.resolveIcon(iconName)\n        return icon;\n    }\n    const iconCode = await getIcon(iconName);\n    node.outerHTML = iconCode;\n    return {\n        destroy() { },\n    };\n}\n\n/** Dispatch event on click outside of node */\nexport function clickOutside(node) {\n    const handleClick = (event) => {\n        if (node && !node.contains(event.target)) {\n            node.dispatchEvent(new CustomEvent(\"click_outside\", node));\n        }\n    };\n\n    document.addEventListener(\"click\", handleClick, true);\n\n    return {\n        destroy() {\n            document.removeEventListener(\"click\", handleClick, true);\n        },\n    };\n}\n\nexport function recentlyUsedItems(filterItems, config) {\n    let ret = utils.storage.get(config.recentlyUsedKey) || [];\n    // hard-limit to 1000 entries\n    ret = ret.slice(ret.length - 1000, ret.length);\n    if (filterItems && config?.selectableTypes.length) {\n        ret = ret.filter((it) => {\n            return config.selectableTypes.indexOf(it.portal_type) != -1;\n        });\n    }\n    // max is applied AFTER filtering selectable items.\n    const max = parseInt(config.recentlyUsedMaxItems, 20);\n    if (max) {\n        // return the slice from the end, as we want to display newest items first.\n        ret = ret.slice(ret.length - max, ret.length);\n    }\n    return ret;\n}\n\nexport function updateRecentlyUsed(item, config) {\n    if (!config.recentlyUsed) {\n        return;\n    }\n    // add to recently added items\n    const recentlyUsed = recentlyUsedItems(false, config); // do not filter for selectable but get all. append to that list the new item.\n    const alreadyPresent = recentlyUsed.filter((it) => {\n        return it.UID === item.UID;\n    });\n    if (alreadyPresent.length > 0) {\n        recentlyUsed.splice(recentlyUsed.indexOf(alreadyPresent[0]), 1);\n    }\n    recentlyUsed.push(item);\n    utils.storage.set(config.recentlyUsedKey, recentlyUsed);\n}\n","import { writable, get } from \"svelte/store\";\nimport { request } from \"./utils.js\";\n\nexport default function (config, pathCache) {\n    const store = writable([]);\n\n    const load = async (query) => {\n        let defaults = {\n            vocabularyUrl: config.vocabularyUrl,\n            attributes: config.attributes,\n            pageSize: config.pageSize,\n        };\n        query = {\n            ...defaults,\n            ...query,\n        }\n        if (config.selectableTypes.length) {\n            query[\"selectableTypes\"] = config.selectableTypes;\n        }\n        return await request(query);\n    }\n\n    const browse = async (path, searchTerm, updateCache) => {\n\n        let rootPath = config.rootPath;\n        let rootPathParts = rootPath.replace(/^\\/+/, '').split(\"/\");\n        let physicalPath = path;\n        let hideRootPath = rootPath;\n\n        if (!physicalPath.startsWith(rootPath)) {\n            // The path from the returned items from \"vocabularyUrl\" are starting\n            // relative from the Plone Site. So we need to generate the phyiscalPath here.\n            if (rootPathParts.length === 1) {\n                physicalPath = rootPath + physicalPath;\n            } else {\n                // We also have to merge the rootPath and the clicked path correctly for example:\n                // rootPath: /Plone/media, clicked path: /media/subfolder\n                // has to become:\n                // /Plone/media/subfolder\n                let pathParts = physicalPath.replace(/^\\/+/, '').split(\"/\");\n                let overlapIdx = rootPathParts.length;\n                for (let idx = 0; idx < rootPathParts.length; idx++) {\n                    if (rootPathParts[idx] === pathParts[0]) {\n                        overlapIdx = idx;\n                        break;\n                    }\n                }\n                hideRootPath = \"/\" + (rootPathParts.filter(it => pathParts.includes(it))).join(\"/\");\n                physicalPath = \"/\" + (rootPathParts.slice(1, overlapIdx).concat(pathParts)).join(\"/\");\n            }\n        }\n\n        let paths = [];\n        let parts = physicalPath.split(\"/\") || [];\n        const maxDepth = Math.min(parts.length, config.maxDepth || 999);\n\n        let partsToShow = parts.slice(parts.length - maxDepth, parts.length);\n        let partsToHide = parts.slice(0, parts.length - maxDepth);\n        const pathPrefix = partsToHide.join(\"/\");\n\n        while (partsToShow.length > 0) {\n            let sub_path = partsToShow.join(\"/\").replace(/^\\//, \"\");\n            const poped = partsToShow.pop();\n            sub_path = pathPrefix + ((poped != \"\") ? `/${sub_path}` : \"\");\n            if (sub_path && paths.indexOf(sub_path) === -1) paths.push(sub_path);\n            if (sub_path == rootPath) {\n                // respect rootPath\n                break;\n            }\n        }\n\n        const pC = get(pathCache);\n        let levels = [];\n        let pathCounter = 0;\n\n        for (var p of paths) {\n            pathCounter++;\n            const isFirstPath = pathCounter == 1;\n            let level = {};\n            if (\n                !(p in pC) ||  // new path not found in cache\n                (isFirstPath && searchTerm) ||  // filtering the level\n                updateCache  // manual cache update request\n            ) {\n                let query = {\n                    path: p,\n                };\n\n                if (isFirstPath && searchTerm) {\n                    query[\"searchTerm\"] = \"*\" + searchTerm + \"*\";\n                }\n\n                level = await load(query);\n\n                // check if there is more than the current batch\n                level.more = config.pageSize < level.total;\n                // save possible search filter for later batch loading\n                level.searchTerm = searchTerm;\n                level.page = 1;\n                level.path = p;\n                level.displayPath = p.replace(new RegExp(`^(${hideRootPath}|${rootPath})`), \"\") || \"/\"\n\n                // do not update cache when searching\n                if (!searchTerm) {\n                    const levelInfo = await load({\n                        levelInfoPath: p,\n                    });\n                    if (levelInfo.total) {\n                        level.UID = levelInfo.results[0].UID;\n                        level.Title = levelInfo.results[0].Title;\n                        level.portal_type = levelInfo.results[0].portal_type;\n                        level.getIcon = levelInfo.results[0].getIcon;\n                        // check if level is selectable (config.selectableTypes)\n                        level.selectable = (!config.selectableTypes.length || config.selectableTypes.indexOf(levelInfo.results[0].portal_type) != -1);\n                    }\n                    level.gridView = false;\n                    pathCache.update((n) => {\n                        n[p] = level;\n                        return n;\n                    });\n                }\n            } else {\n                level = pC[p];\n            }\n            levels = [level, ...levels];\n        }\n        store.set(levels);\n    }\n\n    const search = async (searchTerm, page) => {\n        let query = {\n            searchPath: config.rootPath,\n            page: page,\n        };\n        if (searchTerm) {\n            if (searchTerm.length < 2) {\n                // minimum length of search term\n                return;\n            }\n            query[\"searchTerm\"] = \"*\" + searchTerm + \"*\";\n        }\n        let level = await load(query);\n        level.page = page;\n        level.searchTerm = searchTerm;\n\n        store.update((levels) => {\n            const has_more = (page * config.pageSize) < level.total;\n\n            // first time or new search\n            if (levels.length == 0 || levels[0].searchTerm != searchTerm) {\n                level.more = has_more;\n                level.selectable = false;\n                level.gridView = false;\n                return [level,];\n            }\n\n            // has more ?\n            levels[0].more = has_more;\n            levels[0].page = level.page;\n\n            // append new batch\n            levels[0].results = [\n                ...levels[0].results,\n                ...level.results,\n            ];\n            return levels;\n        });\n    }\n\n    const nextBatch = async (p, page, searchTerm) => {\n        let query = {\n            path: p,\n            page: page,\n        };\n\n        if (searchTerm) {\n            query[\"searchTerm\"] = \"*\" + searchTerm + \"*\";\n        }\n\n        let level = await load(query);\n        level.more = (page * config.pageSize) < level.total;\n        level.page = page;\n\n        store.update((levels) => {\n            levels.forEach((l) => {\n                if (l.path != p) {\n                    return l;\n                }\n                l.page = level.page;\n                l.more = level.more;\n                l.results = [\n                    ...l.results,\n                    ...level.results,\n                ]\n            });\n            return levels;\n        });\n    }\n\n    store.get = async ({\n        path = \"\",\n        searchTerm = \"\",\n        updateCache = false,\n        loadMorePath = \"\",\n        page = 1,\n    }) => {\n        if (config.mode === \"search\") {\n            await search(searchTerm, page);\n        } else if (loadMorePath) {\n            const pC = get(pathCache);\n            if (!(loadMorePath in pC)) {\n                return;\n            }\n            let level = pC[loadMorePath];\n            if (page > level.page) {\n                await nextBatch(loadMorePath, page, level.searchTerm);\n            }\n        } else if (path) {\n            await browse(path, searchTerm, updateCache);\n        }\n\n    };\n\n    return store;\n}\n","<script>\n    import { resolveIcon } from \"./utils\";\n    import _t from \"../../../core/i18n-wrapper\";\n    import { createEventDispatcher, getContext } from \"svelte\";\n\n    const config = getContext(\"config\");\n    const dispatch = createEventDispatcher();\n\n    function select(item) {\n        dispatch(\"selectItem\", {\n            item: item,\n        });\n    }\n</script>\n\n{#if $config?.favorites}\n<div class=\"favorites dropdown dropdown-menu-end ms-2\">\n    <button\n        type=\"button\"\n        class=\"favorites dropdown-toggle btn btn-outline-light btn-sm\"\n        data-bs-toggle=\"dropdown\"\n        aria-haspopup=\"true\"\n        aria-expanded=\"false\"\n    >\n        <svg use:resolveIcon={{ iconName: \"star-fill\" }} />\n        {_t(\"Favorites\")}\n    </button>\n    <ul class=\"dropdown-menu\">\n        {#each $config.favorites as favorite}\n        <li>\n            <a class=\"dropdown-item\" href=\"{favorite.path}\" on:click|preventDefault={() => select(favorite)}>{favorite.title}</a>\n        </li>\n        {/each}\n    </ul>\n</div>\n{/if}\n","<script>\n    import { resolveIcon, recentlyUsedItems } from \"./utils\";\n    import _t from \"../../../core/i18n-wrapper\";\n    import { createEventDispatcher, getContext } from \"svelte\";\n\n    const config = getContext(\"config\");\n    const items = recentlyUsedItems(true, $config);\n    const dispatch = createEventDispatcher();\n\n    function select(item) {\n        dispatch(\"selectItem\", {\n            item: item,\n        });\n    }\n</script>\n\n{#if $config.recentlyUsed && items.length}\n    <div class=\"recentlyUsed dropdown ms-2\">\n        <button\n            type=\"button\"\n            class=\"recentlyUsed dropdown-toggle btn btn-outline-light btn-sm\"\n            data-bs-toggle=\"dropdown\"\n            aria-haspopup=\"true\"\n            aria-expanded=\"false\"\n        >\n            <svg use:resolveIcon={{ iconName: \"grid-fill\" }} />\n            {_t(\"Recently Used\")}\n        </button>\n        <ul class=\"dropdown-menu\">\n            {#each items.reverse() as recentlyUsed}\n                <li>\n                    <a\n                        href={recentlyUsed.getURL}\n                        on:click|preventDefault={() => select(recentlyUsed)}\n                        class=\"dropdown-item\"\n                    >\n                        <svg\n                            use:resolveIcon={{\n                                iconName: `contenttype/${recentlyUsed?.portal_type.toLowerCase().replace(/\\.| /g, \"-\")}`,\n                            }}\n                        />\n                        {recentlyUsed.Title}\n                    </a>\n                </li>\n            {/each}\n        </ul>\n    </div>\n{/if}\n","\n      import API from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"../../../../node_modules/@patternslib/dev/webpack/style-inserter.js\";\n      import setAttributes from \"!../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/dist/cjs.js!../../../../node_modules/svelte-loader/index.js?cssPath=/home/runner/work/mockup/mockup/src/pat/contentbrowser/src/ContentBrowser.svelte.0.css!./ContentBrowser.svelte\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\noptions.insert = insertFn;\noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/dist/cjs.js!../../../../node_modules/svelte-loader/index.js?cssPath=/home/runner/work/mockup/mockup/src/pat/contentbrowser/src/ContentBrowser.svelte.0.css!./ContentBrowser.svelte\";\n       export default content && content.locals ? content.locals : undefined;\n","<script>\n    import utils from \"@patternslib/patternslib/src/core/utils\";\n    import { getContext } from \"svelte\";\n    import * as animateScroll from \"svelte-scrollto\";\n    import { fly } from \"svelte/transition\";\n    import _t from \"../../../core/i18n-wrapper\";\n    import Upload from \"../../upload/upload\";\n    import contentStore from \"./ContentStore\";\n    import {\n        clickOutside,\n        get_items_from_uids,\n        request,\n        resolveIcon,\n        updateRecentlyUsed,\n    } from \"./utils\";\n    import Favorites from \"./Favorites.svelte\";\n    import RecentlyUsed from \"./RecentlyUsed.svelte\";\n\n    animateScroll.setGlobalOptions({\n        scrollX: true,\n        container: \".levelColumns\",\n        duration: 500,\n    });\n\n    // get context stores\n    const currentPath = getContext(\"currentPath\");\n    const config = getContext(\"config\");\n    const pathCache = getContext(\"pathCache\");\n    const showContentBrowser = getContext(\"showContentBrowser\");\n    const selectedItems = getContext(\"selectedItems\");\n    const selectedUids = getContext(\"selectedUids\");\n    const previewUids = getContext(\"previewUids\");\n\n    // initialize content browser store\n    const contentItems = contentStore($config, pathCache);\n\n    let showUpload = false;\n    let previewItem = {};\n    let keyboardNavInitialized = false;\n    let shiftKey = false;\n\n    let vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0);\n\n    function updatePreview({ data = null, uuid = null, action = \"show\" }) {\n        if (data && action == \"show\") {\n            previewItem = data;\n            $previewUids = [data.UID];\n        } else if (uuid && action == \"add\" && $previewUids.indexOf(uuid) === -1) {\n            if (\n                $config.maximumSelectionSize > 0 &&\n                $previewUids.length >= $config.maximumSelectionSize\n            ) {\n                // respect maximumSelectionSize\n                return;\n            }\n            $previewUids = [...$previewUids, uuid]; // NOTE: $previewUids.push() is not a reactive change\n        } else if (uuid && action == \"remove\" && $previewUids.indexOf(uuid) !== -1) {\n            previewUids.update((n) => {\n                n.splice(n.indexOf(uuid), 1);\n                return n;\n            });\n        } else if (action == \"clear\") {\n            previewItem = {};\n            $previewUids = [];\n        }\n    }\n\n    async function upload() {\n        updatePreview({ action: \"clear\" });\n        showUpload = true;\n        await utils.timeout(1);\n        const uploadEl = document.querySelector(\".upload-wrapper\");\n        uploadEl.classList.add(\"pat-upload\");\n        const patUpload = new Upload(uploadEl, {\n            baseUrl: $config.rootUrl,\n            currentPath: $currentPath,\n            relativePath: \"@@fileUpload\",\n            allowPathSelection: false,\n            hiddenInputContainer: \".upload-wrapper\",\n            success: (fileUpload, obj) => {\n                contentItems.get({ path: $currentPath, updateCache: true });\n            },\n        });\n    }\n\n    function showPreview(item) {\n        if ($config.mode == \"search\") {\n            // one level search mode\n            updatePreview({ data: item });\n        } else if (item.is_folderish) {\n            $previewUids = [item.UID];\n            currentPath.set(item.path);\n        } else {\n            const pathParts = item.path.split(\"/\");\n            const folderPath = pathParts.slice(0, pathParts.length - 1).join(\"/\");\n            currentPath.set(folderPath || $config.rootPath);\n            updatePreview({ data: item });\n        }\n        scrollToRight();\n    }\n\n    function changePath(item, e) {\n        // always hide upload when changing path\n        showUpload = false;\n\n        // clear previous selection\n        updatePreview({ action: \"clear\" });\n\n        if (item === \"/\" || item === $config.rootPath) {\n            // clicked \"home\" button\n            currentPath.set($config.rootPath);\n            return;\n        }\n\n        // show clicked item\n        showPreview(item);\n    }\n\n    function clickItem(item, e) {\n        if (!keyboardNavInitialized) {\n            // if we've already clicked an element with the mouse\n            // do not start over keyboardnav\n            keyboardNavInitialized = true;\n        }\n\n        // check for multiselection\n        const levelWrapper = e.currentTarget.closest(\".levelItems\");\n        const prevSelection = levelWrapper.querySelectorAll(\".selectedItem\");\n\n        if (prevSelection.length && $config.maximumSelectionSize != 1) {\n            // check for pressed shift or ctrl/meta key for multiselection\n\n            if (shiftKey || e?.shiftKey) {\n                // iter through the wrapper children and select all\n                // inbetween current selection and last preview\n                let select = false;\n                for (const el of levelWrapper.children) {\n                    if ([item.UID, previewItem.UID].indexOf(el.dataset.uuid) !== -1) {\n                        if (select) {\n                            // stop selecting but make sure the last item is selected too\n                            updatePreview({\n                                uuid: el.dataset.uuid,\n                                action: \"add\",\n                            });\n                            select = false;\n                            continue;\n                        }\n                        // start selecting\n                        select = true;\n                    }\n                    updatePreview({\n                        uuid: el.dataset.uuid,\n                        action: select ? \"add\" : \"remove\",\n                    });\n                }\n            } else if (e?.metaKey || e?.ctrlKey) {\n                // de/select multiple single items\n                // NOTE: only for mouse click event\n                updatePreview({\n                    uuid: item.UID,\n                    action: $previewUids.indexOf(item.UID) == -1 ? \"add\" : \"remove\",\n                });\n            } else {\n                // unselect\n                [...prevSelection].map((el) => el.classList.remove(\"selectedItem\"));\n                changePath(item, e);\n            }\n        } else {\n            changePath(item, e);\n        }\n\n        e.currentTarget.focus(); // needed for keyboard navigation\n        e.currentTarget.classList.add(\"selectedItem\");\n    }\n\n    function initKeyboardNav() {\n        // focus first element when showing contentbrowser\n        if (keyboardNavInitialized) {\n            return;\n        }\n        const possibleFocusEls = [\n            ...document.querySelectorAll(\".levelColumn .inPath\"), // previously selected folder\n            ...document.querySelectorAll(\".levelColumn .selectedItem\"), // previously selected item\n        ];\n        if(!possibleFocusEls.length && document.querySelector(\".levelColumn .contentItem\")) {\n            possibleFocusEls.push(document.querySelector(\".levelColumn .contentItem\"));\n        }\n        if (possibleFocusEls.length) {\n            keyboardNavInitialized = true;\n            possibleFocusEls[0].focus();\n        }\n    }\n\n    function keyboardNavigation(item, e) {\n        const node = e.currentTarget;\n        shiftKey = e.shiftKey;\n        if (e.key == \"Escape\") {\n            cancelSelection();\n        }\n        if (\n            e.key == \"ArrowDown\" &&\n            node?.nextElementSibling?.classList.contains(\"contentItem\")\n        ) {\n            node.nextElementSibling.click();\n        }\n        if (\n            e.key == \"ArrowUp\" &&\n            node?.previousElementSibling?.classList.contains(\"contentItem\")\n        ) {\n            node.previousElementSibling.click();\n        }\n        if (e.key == \"ArrowRight\") {\n            const currCol = e.target.closest(\".levelColumn\");\n            const nxtCol = currCol?.nextElementSibling;\n            if (!nxtCol || !nxtCol.classList.contains(\"levelColumn\")) {\n                return;\n            }\n            nxtCol.querySelector(\".contentItem\")?.click();\n        }\n        if (e.key == \"ArrowLeft\") {\n            const currCol = e.target.closest(\".levelColumn\");\n            const prevCol = currCol?.previousElementSibling;\n            if (!prevCol || !prevCol.classList.contains(\"levelColumn\")) {\n                return;\n            }\n            prevCol.querySelector(\".inPath\").click();\n        }\n        if (e.key == \"Space\") {\n            // add item to selection (like metaKey + click)\n            clickItem(item, e, true);\n        }\n        if (e.key == \"Enter\") {\n            if (isSelectable(item)) {\n                if ($config.maximumSelectionSize == 1) {\n                    addItem(item);\n                } else {\n                    addSelectedItems();\n                }\n            }\n        }\n    }\n\n    async function addItem(item) {\n        if ($config.maximumSelectionSize == 1) {\n            selectedItems.set([item]);\n            selectedUids.set([item.UID]);\n        } else {\n            selectedItems.update((n) => [...n, item]);\n            selectedUids.update(() => $selectedItems.map((x) => x.UID));\n        }\n        updateRecentlyUsed(item, $config);\n        updatePreview({ action: \"clear\" });\n        $showContentBrowser = false;\n        keyboardNavInitialized = false;\n    }\n\n    async function addSelectedItems() {\n        const previewItems = await get_items_from_uids($previewUids, $config);\n        selectedItems.update((n) => {\n            for (const it of previewItems) {\n                if ($selectedUids.indexOf(it.UID) != -1) continue;\n                n.push(it);\n            }\n            return n;\n        });\n        selectedUids.update(() => $selectedItems.map((x) => x.UID));\n        updatePreview({ action: \"clear\" });\n        $showContentBrowser = false;\n        keyboardNavInitialized = false;\n    }\n\n    function selectRecentlyUsed(event) {\n        addItem(event.detail.item);\n    }\n\n    async function selectFavorite(event) {\n        const path = event.detail.item.path;\n        const response = await request({\n            vocabularyUrl: $config.vocabularyUrl,\n            attributes: $config.attributes,\n            levelInfoPath: path,\n        });\n        if (!response.total) {\n            alert(`${path} not found!`);\n            return;\n        }\n        const item = response.results[0];\n        if (!item.path) {\n            // fix for root\n            item.path = $config.rootPath;\n        }\n        changePath(item);\n    }\n\n    function cancelSelection() {\n        $showContentBrowser = false;\n        keyboardNavInitialized = false;\n        updatePreview({ action: \"clear\" });\n    }\n\n    function isSelectable(item) {\n        return $selectedUids.indexOf(item.UID) === -1;\n    }\n\n    function scrollToRight() {\n        const scrollContainer = document.querySelector(\".levelColumns\");\n        if (scrollContainer) {\n            animateScroll.scrollTo({\n                // element: \".levelColumn:last-child\",\n                x: scrollContainer.scrollWidth + 100,\n            });\n        }\n    }\n\n    function itemInPath(item) {\n        return $config.mode == \"browse\" && $currentPath.indexOf(item.path) != -1;\n    }\n\n    const filterItems = utils.debounce((e) => {\n        contentItems.get({ path: $currentPath, searchTerm: e.target.value });\n    }, 300);\n\n    function loadMore(node) {\n        const observer = new IntersectionObserver(\n            (entries) => {\n                for (const entry of entries) {\n                    if (entry.isIntersecting) {\n                        const path = node.dataset.levelPath;\n                        const page = parseInt(node.dataset.levelNextPage);\n                        contentItems.get({\n                            loadMorePath: path,\n                            page: page,\n                        });\n                    }\n                }\n            },\n            { threshold: 0, root: null, margin: \"0px\" },\n        );\n        // defer observing\n        window.setTimeout(() => {\n            observer.observe(node);\n        }, 500);\n    }\n\n    $: {\n        if ($showContentBrowser) {\n            contentItems.get({ path: $currentPath });\n        }\n    }\n\n    $: {\n        $contentItems;\n        scrollToRight();\n    }\n\n    $: {\n        $previewUids;\n    }\n</script>\n\n{#if $showContentBrowser}\n    <div class=\"content-browser-position-wrapper\">\n        <nav\n            class=\"content-browser\"\n            transition:fly={{ x: (vw / 100) * 94, opacity: 1 }}\n            on:introend={() => {\n                scrollToRight();\n                initKeyboardNav();\n            }}\n            use:clickOutside\n            on:click_outside={cancelSelection}\n        >\n            <div class=\"toolBar navbar\">\n                <div class=\"filter me-3\">\n                    <input type=\"text\" name=\"filter\" on:input={filterItems} />\n                    <label for=\"filter\"\n                        ><svg use:resolveIcon={{ iconName: \"search\" }} /></label\n                    >\n                </div>\n                <RecentlyUsed on:selectItem={selectRecentlyUsed} />\n                <Favorites on:selectItem={selectFavorite} />\n                {#if $config.uploadEnabled}\n                    <div class=\"ms-2\">\n                        <button\n                            type=\"button\"\n                            class=\"upload btn btn-outline-light btn-sm\"\n                            tabindex=\"0\"\n                            on:keydown={upload}\n                            on:click={upload}\n                            ><svg use:resolveIcon={{ iconName: \"upload\" }} />\n                            {_t(\"upload to ${current_path}\", {\n                                current_path: $currentPath,\n                            })}</button\n                        >\n                    </div>\n                {/if}\n                <button\n                    class=\"btn btn-link text-white ms-auto\"\n                    tabindex=\"0\"\n                    on:click|preventDefault={() => cancelSelection()}\n                    ><svg use:resolveIcon={{ iconName: \"x-circle\" }} /></button\n                >\n            </div>\n            {#await $contentItems}\n                <p>{_t(\"loading content items\")}</p>\n            {:then levels}\n                <div class=\"levelColumns\">\n                    {#each levels as level, i (level.path)}\n                        <div\n                            class=\"levelColumn{i % 2 == 0 ? ' odd' : ' even'}\"\n                            in:fly|local={{ duration: 300 }}\n                        >\n                            <div class=\"levelToolbar\">\n                                {#if i == 0 && $config.mode == \"browse\"}\n                                    <button\n                                        type=\"button\"\n                                        class=\"btn btn-link btn-xs ps-0\"\n                                        tabindex=\"0\"\n                                        on:keydown={() => changePath($config.rootPath)}\n                                        on:click={() => changePath($config.rootPath)}\n                                        ><svg\n                                            use:resolveIcon={{ iconName: \"house\" }}\n                                        /></button\n                                    >\n                                {/if}\n                                {#if level.selectable}\n                                    <button\n                                        class=\"btn btn-primary btn-xs\"\n                                        disabled={!isSelectable(level)}\n                                        on:click|preventDefault={() => addItem(level)}\n                                    >\n                                        {_t(\"select ${level_path}\", {\n                                            level_path: level.displayPath,\n                                        })}\n                                    </button>\n                                {/if}\n                                <div class=\"levelActions\">\n                                    {#if !level.gridView}\n                                        <button\n                                            class=\"btn btn-link btn-xs grid-view\"\n                                            on:click={() => (level.gridView = true)}\n                                        >\n                                            <svg\n                                                use:resolveIcon={{ iconName: \"grid\" }}\n                                            />\n                                        </button>\n                                    {:else}\n                                        <button\n                                            class=\"btn btn-link btn-xs grid-view\"\n                                            on:click={() => (level.gridView = false)}\n                                        >\n                                            <svg\n                                                use:resolveIcon={{ iconName: \"list\" }}\n                                            />\n                                        </button>\n                                    {/if}\n                                </div>\n                            </div>\n                            <div class=\"levelItems\">\n                                {#each level.results || [] as item, n}\n                                    <!-- svelte-ignore missing-declaration -->\n                                    <div\n                                        class=\"contentItem{n % 2 == 0\n                                            ? ' odd'\n                                            : ' even'}{itemInPath(item)\n                                            ? ' inPath'\n                                            : ''}{$previewUids.indexOf(item.UID) != -1\n                                            ? ' selectedItem'\n                                            : ''}{!isSelectable(item)\n                                            ? ' text-muted'\n                                            : ''}\"\n                                        role=\"button\"\n                                        tabindex={n}\n                                        data-uuid={item.UID}\n                                        on:keydown|preventDefault={(e) =>\n                                            keyboardNavigation(item, e)}\n                                        on:click={(e) => clickItem(item, e)}\n                                    >\n                                        {#if level.gridView}\n                                            <div class=\"grid-preview\">\n                                                {#if item.getIcon}\n                                                    <img\n                                                        src={`${item.getURL}/@@images/image/thumb`}\n                                                        alt={item.Title}\n                                                    />\n                                                {:else}\n                                                    <svg\n                                                        use:resolveIcon={{\n                                                            iconName: `contenttype/${item.portal_type.toLowerCase().replace(/\\.| /g, \"-\")}`,\n                                                        }}\n                                                    />\n                                                {/if}\n                                                {item.Title}\n                                            </div>\n                                        {:else}\n                                            <div\n                                                class=\"item-title\"\n                                                title=\"{item.portal_type}: {item.Title}\"\n                                            >\n                                                <svg\n                                                    use:resolveIcon={{\n                                                        iconName: `contenttype/${item.portal_type.toLowerCase().replace(/\\.| /g, \"-\")}`,\n                                                    }}\n                                                />\n                                                {item.Title}\n                                                {#if $config.mode == \"search\"}\n                                                <br><span class=\"small\">{item.path}</span>\n                                                {/if}\n                                            </div>\n                                        {/if}\n                                        {#if item.is_folderish && $config.mode == \"browse\"}\n                                            <div class=\"browseSub\">\n                                                <svg\n                                                    use:resolveIcon={{\n                                                        iconName: \"arrow-right-circle\",\n                                                    }}\n                                                />\n                                            </div>\n                                        {/if}\n                                    </div>\n                                {/each}\n                                {#if level.more}\n                                    <div\n                                        class=\"loadmore\"\n                                        data-level-path={level.path}\n                                        data-level-next-page={parseInt(level.page) + 1}\n                                        use:loadMore\n                                    >\n                                        <div class=\"spinner-border\" role=\"status\"></div>\n                                    </div>\n                                {/if}\n                                {#if level.total == 0}\n                                    <div class=\"contentItem\">\n                                        <p>{_t(\"no results found\")}</p>\n                                    </div>\n                                {/if}\n                            </div>\n                        </div>\n                    {/each}\n                    {#if previewItem?.UID && $previewUids.length == 1}\n                        <div class=\"preview\">\n                            <div class=\"levelToolbar\">\n                                <button\n                                    class=\"btn btn-primary btn-xs\"\n                                    disabled={!isSelectable(previewItem)}\n                                    on:click|preventDefault={() => addItem(previewItem)}\n                                    >{_t(\"select ${preview_path}\", {\n                                        preview_path: previewItem.path.split(\"/\").pop(),\n                                    })}</button\n                                >\n                            </div>\n                            <div class=\"info\">\n                                {#if previewItem.getIcon}\n                                    <div class=\"previewImage\">\n                                        <img\n                                            src=\"{previewItem.getURL}/@@images/image/preview\"\n                                            alt={previewItem.Title}\n                                        />\n                                    </div>\n                                {:else}\n                                    <div class=\"previewIcon\">\n                                        <svg\n                                            use:resolveIcon={{\n                                                iconName: `contenttype/${previewItem.portal_type.toLowerCase().replace(/\\.| /g, \"-\")}`,\n                                            }}\n                                        />\n                                    </div>\n                                {/if}\n                                <h4>{previewItem.Title}</h4>\n                                <p>{previewItem.Description}</p>\n                            </div>\n                        </div>\n                    {/if}\n                    {#if $previewUids.length > 1}\n                        <div class=\"preview\">\n                            <div class=\"levelToolbar\">\n                                <button\n                                    class=\"btn btn-primary btn-xs\"\n                                    on:click|preventDefault={addSelectedItems}\n                                    >{_t(\"add selected items\")}</button\n                                >\n                            </div>\n                            <div class=\"info\">\n                                <svg\n                                    use:resolveIcon={{\n                                        iconName: \"files\",\n                                    }}\n                                />\n                            </div>\n                        </div>\n                    {/if}\n                    {#if showUpload}\n                        <div class=\"upload-wrapper\"></div>\n                    {/if}\n                </div>\n            {:catch error}\n                <p style=\"color: red\">{error.message}</p>\n            {/await}\n        </nav>\n    </div>\n{/if}\n\n<style>\n    .content-browser-position-wrapper {\n        position: fixed;\n        top: 0;\n        right: 0;\n        display: flex;\n        justify-content: end;\n        z-index: 1500;\n        width: 100%;\n        height: 100vh;\n        background-color: rgba(0, 0, 0, 0.25);\n    }\n    .btn-xs {\n        --bs-btn-padding-y: 0.15rem;\n        --bs-btn-padding-x: 0.5rem;\n        --bs-btn-font-size: 0.75rem;\n    }\n    .content-browser {\n        height: 100vh;\n        min-width: 550px;\n        background-color: var(--bs-light-bg-subtle);\n        border-left: var(--bs-border-style) var(--bs-border-width) #fff;\n        z-index: 1500;\n        display: flex;\n        flex-direction: column;\n    }\n    .toolBar {\n        background-color: var(--bs-primary);\n        padding: 0.325rem 0.75rem;\n        color: var(--bs-light);\n        width: 100%;\n        display: flex;\n        justify-content: start;\n    }\n    .toolBar :global(svg) {\n        vertical-align: -0.125em;\n    }\n    .levelColumns {\n        display: flex;\n        flex-wrap: nowrap;\n        width: 100%;\n        overflow: hidden;\n        flex-grow: 3;\n        border-left: var(--bs-border-style) var(--bs-border-color) var(--bs-border-width);\n        user-select: none;\n    }\n\n    .levelColumn {\n        width: 320px;\n        border-right: var(--bs-border-style) var(--bs-border-width)\n            var(--bs-border-color);\n        display: flex;\n        flex-direction: column;\n    }\n\n    .levelToolbar {\n        width: 100%;\n        height: 2.5rem;\n        display: flex;\n        justify-content: space-between;\n        padding: 0.375rem;\n        border-bottom: var(--bs-border-style) var(--bs-border-width)\n            var(--bs-border-color);\n    }\n    .levelToolbar > .levelActions {\n        margin-left: auto;\n    }\n\n    .levelItems {\n        overflow-x: auto;\n    }\n    .contentItem {\n        /* padding: 1rem 1rem; */\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        font-size: 90%;\n        min-height: 2rem;\n    }\n    .contentItem:focus-visible {\n        outline: none;\n    }\n    .contentItem.even {\n        background-color: rgba(var(--bs-secondary-bg-rgb), .4);\n    }\n    .contentItem.inPath,\n    .contentItem:focus {\n        background-color: rgba(var(--bs-primary-rgb), 0.15);\n    }\n    .contentItem.selectedItem {\n        background-color: var(--bs-primary);\n        color: var(--bs-body-bg);\n    }\n    .contentItem > * {\n        padding: 0.5rem;\n        white-space: nowrap;\n        max-width: 450px;\n        text-overflow: ellipsis;\n        overflow: hidden;\n    }\n    .contentItem > .browseSub {\n        flex-shrink: 0;\n    }\n\n    .contentItem .grid-preview > img {\n        width: 95px;\n        height: 95px;\n        object-fit: cover;\n        float: left;\n        margin-right: 1rem;\n    }\n    .preview {\n        width: 320px;\n        min-height: 300px;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n    }\n    .preview .info {\n        padding: 0.5rem;\n        width: 100%;\n        word-wrap: anywhere;\n    }\n    .preview .info .previewIcon {\n        margin: 0 auto 1rem auto;\n    }\n    .preview .info .previewIcon svg {\n        width: 50px !important;\n        height: 50px !important;\n    }\n    .preview h4 {\n        font-size: 1.2 rem;\n    }\n    .preview img {\n        max-width: 100%;\n        max-width: 100%;\n        margin-bottom: 0.5rem;\n    }\n\n    .upload-wrapper {\n        padding: 1rem;\n        width: 590px;\n        overflow-x: auto;\n    }\n    .loadmore {\n        text-align: center;\n        padding: 0.25rem 0;\n    }\n</style>\n","\n      import API from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"../../../../node_modules/@patternslib/dev/webpack/style-inserter.js\";\n      import setAttributes from \"!../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/dist/cjs.js!../../../../node_modules/svelte-loader/index.js?cssPath=/home/runner/work/mockup/mockup/src/pat/contentbrowser/src/SelectedItems.svelte.1.css!./SelectedItems.svelte\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\noptions.insert = insertFn;\noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/dist/cjs.js!../../../../node_modules/svelte-loader/index.js?cssPath=/home/runner/work/mockup/mockup/src/pat/contentbrowser/src/SelectedItems.svelte.1.css!./SelectedItems.svelte\";\n       export default content && content.locals ? content.locals : undefined;\n","<script>\n    import { getContext, onMount } from \"svelte\";\n    import { flip } from \"svelte/animate\";\n    import { get_items_from_uids, resolveIcon } from \"./utils.js\";\n    import Sortable from \"sortablejs\";\n    import _t from \"../../../core/i18n-wrapper\";\n    import events from \"@patternslib/patternslib/src/core/events\";\n\n    let ref;\n    let initializing = true;\n\n    // get reactive context config\n    const config = getContext(\"config\");\n    const fieldId = $config.fieldId;\n    const selectedItemsNode = document.getElementById(fieldId);\n\n    // get reactive context store\n    const selectedItems = getContext(\"selectedItems\");\n    const selectedUids = getContext(\"selectedUids\");\n\n    // showContentBrowser reactive state\n    const showContentBrowser = getContext(\"showContentBrowser\");\n\n    onMount(async () => {\n        await initializeSelectedItemsStore();\n        initializeSorting();\n        initializing = false;\n    });\n\n    function unselectItem(i) {\n        selectedItems.update((n) => {\n            n.splice(i, 1);\n            return n;\n        });\n        selectedUids.update(() => $selectedItems.map((x) => x.UID));\n    }\n\n    async function initializeSelectedItemsStore() {\n        const initialValue = $config.selection.length\n            ? $config.selection\n            : selectedItemsNode?.value\n              ? selectedItemsNode.value.split($config.separator)\n              : [];\n\n        if (!initialValue.length) {\n            return;\n        }\n\n        $selectedItems = await get_items_from_uids(initialValue, $config);\n        selectedUids.update(() => $selectedItems.map((x) => x.UID));\n    }\n\n    function initializeSorting() {\n        if ($config.maximumSelectionSize !== 1 && $selectedItems.length > 1) {\n            Sortable.create(\n                selectedItemsNode.previousSibling.querySelector(\n                    \".content-browser-selected-items\",\n                ),\n                {\n                    draggable: \".selected-item\",\n                    animation: 200,\n                    onUpdate: (e) => {\n                        let sortedUuids = [];\n                        for (const el of e.target.children) {\n                            sortedUuids.push(el.dataset[\"uuid\"]);\n                        }\n                        setNodeValue(sortedUuids);\n                    },\n                },\n            );\n        }\n    }\n\n    function selectedUidsFromSelectedItems() {\n        let items = [];\n        $selectedItems.forEach((item) => {\n            items.push(item.UID);\n        });\n        return items;\n    }\n\n    function setNodeValue(selectedUids) {\n        const node_val = selectedUids.join($config.separator);\n        selectedItemsNode.value = node_val;\n        selectedItemsNode.dispatchEvent(events.change_event());\n    }\n\n    $: {\n        $selectedItems;\n        if ($selectedItems.length || !initializing) {\n            setNodeValue(selectedUidsFromSelectedItems());\n            initializeSorting();\n        }\n    }\n</script>\n\n<div\n    class=\"content-browser-selected-items-wrapper\"\n    style=\"width: {$config.width || 'auto'}\"\n    bind:this={ref}\n>\n    <!-- svelte-ignore a11y-click-events-have-key-events -->\n    <!-- svelte-ignore a11y-no-static-element-interactions -->\n    <div class=\"content-browser-selected-items\"\n         on:click={() => $showContentBrowser = $selectedItems.length ? false : true }>\n        {#if $selectedItems}\n            {#each $selectedItems as selItem, i (selItem.UID)}\n                <div\n                    class=\"selected-item\"\n                    animate:flip={{ duration: 500 }}\n                    data-uuid={selItem.UID}\n                >\n                    <div class=\"item-info\">\n                        <button\n                            class=\"btn btn-link btn-sm link-secondary\"\n                            on:click|stopPropagation={() => unselectItem(i)}\n                            ><svg use:resolveIcon={{ iconName: \"x-circle\" }} /></button\n                        >\n                        <div>\n                            <span class=\"item-title\">{selItem.Title}</span><br />\n                            <span class=\"small\">{selItem.path}</span>\n                        </div>\n                    </div>\n                    {#if selItem.getURL && (selItem.getIcon || selItem.portal_type === \"Image\")}<img\n                            src=\"{selItem.getURL}/@@images/image/mini\"\n                            alt={selItem.Title}\n                        />{/if}\n                </div>\n            {/each}\n        {/if}\n        {#if !$selectedItems}\n            <p>{_t(\"loading selected items\")}</p>\n        {/if}\n    </div>\n    <!-- svelte-ignore a11y-invalid-attribute -->\n    <a\n        class=\"btn btn-primary\" href=\"#\"\n        style=\"border-radius:0 var(--bs-border-radius) var(--bs-border-radius) 0\"\n        on:click|preventDefault={() => ($showContentBrowser = true)}\n        >{_t(\"Select\")}</a\n    >\n</div>\n\n<style>\n    .content-browser-selected-items-wrapper {\n        display: flex;\n        align-items: start;\n    }\n    .content-browser-selected-items {\n        list-style: none;\n        background-color: var(--bs-body-bg);\n        border-radius: var(--bs-border-radius) 0 0 var(--bs-border-radius);\n        border: var(--bs-border-style) var(--bs-border-color) var(--bs-border-width);\n        min-height: 2.4rem;\n        padding: 0.5rem 0.5rem 0 0.5rem;\n        flex: 1 1 auto;\n    }\n    .content-browser-selected-items .selected-item {\n        border-radius: var(--bs-border-radius);\n        background-color: var(--bs-tertiary-bg);\n        border: var(--bs-border-style) var(--bs-border-color) var(--bs-border-width);\n        padding: 0.5rem;\n        margin-bottom: 0.5rem;\n        display: flex;\n        flex-wrap: nowrap;\n        align-items: start;\n        justify-content: space-between;\n        cursor: move;\n    }\n    .content-browser-selected-items .selected-item > * {\n        margin-right: 0.5rem;\n        display: block;\n    }\n    .content-browser-selected-items .selected-item button {\n        cursor: pointer;\n        padding: 0 0.375rem 0.374rem 0;\n    }\n    .content-browser-selected-items .selected-item .item-info {\n        display: flex;\n        align-items: start;\n    }\n    .content-browser-selected-items .selected-item > img {\n        object-fit: cover;\n        width: 95px;\n        height: 95px;\n    }\n</style>\n","import { setContext } from 'svelte';\nimport { writable } from 'svelte/store';\n\nexport const gridView = writable(false);\n\nexport function setCurrentPath() {\n    let currentPath = writable('');\n    setContext('currentPath', currentPath);\n}\n\nexport function setPathCache() {\n    let pathCache = writable({});\n    setContext('pathCache', pathCache);\n}\n\n// reactive context stores\nexport function setSelectedItems() {\n    let selItems = writable([]);\n    setContext('selectedItems', selItems);\n}\n\nexport function setConfig() {\n    let config = writable({});\n    setContext('config', config);\n}\n\nexport function setShowContentBrowser() {\n    let showContentBrowser = writable(false);\n    setContext('showContentBrowser', showContentBrowser);\n}\n\nexport function setSelectedUids() {\n    let selUids = writable([]);\n    setContext(\"selectedUids\", selUids);\n}\n\nexport function setPreviewUids() {\n    let prevUids = writable([]);\n    setContext(\"previewUids\", prevUids);\n}\n","<script>\n    import logger from \"@patternslib/patternslib/src/core/logging\";\n    import { getContext } from \"svelte\";\n    import ContentBrowser from \"./ContentBrowser.svelte\";\n    import SelectedItems from \"./SelectedItems.svelte\";\n    import {\n        setConfig,\n        setCurrentPath,\n        setPathCache,\n        setSelectedItems,\n        setSelectedUids,\n        setPreviewUids,\n        setShowContentBrowser,\n    } from \"./stores\";\n\n    export let maxDepth;\n    export let width;\n    export let attributes;\n    export let contextPath;\n    export let vocabularyUrl;\n    export let mode = \"browse\";\n    export let rootPath = \"\";\n    export let rootUrl = \"\";\n    export let basePath = \"\";\n    export let selectableTypes = [];\n    export let maximumSelectionSize = -1;\n    export let separator;\n    export let selection = [];\n    export let query = {};\n    export let fieldId;\n    export let upload;\n    export let favorites;\n    export let recentlyUsed;\n    export let recentlyUsedKey;\n    export let recentlyUsedMaxItems;\n    export let bSize = 20;\n\n    const log = logger.getLogger(\"pat-contentbrowser\");\n\n    // initialize context stores\n    setCurrentPath();\n    setConfig();\n    setPathCache();\n    setSelectedItems();\n    setShowContentBrowser();\n    setSelectedUids();\n    setPreviewUids();\n\n    // initially set current path\n    const currentPath = getContext(\"currentPath\");\n\n    if (!$currentPath) {\n        // if root path is not above base path we start at rootPath\n        $currentPath = basePath.indexOf(rootPath) != 0 ? rootPath : basePath;\n    }\n\n    let config = getContext(\"config\");\n    $config = {\n        mode: mode,\n        attributes: attributes,\n        contextPath: contextPath,\n        vocabularyUrl: vocabularyUrl,\n        width: width,\n        maxDepth: maxDepth,\n        rootPath: rootPath,\n        rootUrl: rootUrl,\n        basePath: basePath,\n        selectableTypes: selectableTypes,\n        maximumSelectionSize: maximumSelectionSize,\n        separator: separator,\n        selection: selection,\n        query: query,\n        fieldId: fieldId,\n        uploadEnabled: upload,\n        favorites: favorites,\n        recentlyUsed: recentlyUsed,\n        recentlyUsedKey: recentlyUsedKey,\n        recentlyUsedMaxItems: recentlyUsedMaxItems,\n        pageSize: bSize,\n    };\n\n    log.debug(`Initialized App<${fieldId}> with config ${JSON.stringify($config)}`);\n</script>\n\n<ContentBrowser />\n<SelectedItems />\n"],"names":["___CSS_LOADER_EXPORT___","push","module","id","async","request","_ref","method","vocabularyUrl","attributes","path","uids","searchTerm","searchPath","levelInfoPath","selectableTypes","pageSize","page","vocabQuery","criteria","i","o","v","sort_on","sort_order","length","results","total","url","JSON","stringify","size","headers","Headers","set","response","fetch","ok","errors","json","filtered_response","it","indexOf","portal_type","is_folderish","get_items_from_uids","config","selectedItemsFromUids","sort","a","b","UID","resolveIcon","node","_ref2","iconName","iconCode","utils","getIcon","outerHTML","destroy","clickOutside","handleClick","event","contains","target","dispatchEvent","CustomEvent","document","addEventListener","removeEventListener","recentlyUsedItems","filterItems","ret","storage","get","recentlyUsedKey","slice","filter","max","parseInt","recentlyUsedMaxItems","pathCache","store","writable","load","query","updateCache","loadMorePath","mode","rootPath","level","update","levels","has_more","more","selectable","gridView","search","pC","p","forEach","l","nextBatch","rootPathParts","replace","split","physicalPath","hideRootPath","startsWith","pathParts","overlapIdx","idx","includes","join","concat","paths","parts","maxDepth","Math","min","partsToShow","pathPrefix","sub_path","pop","pathCounter","isFirstPath","displayPath","RegExp","levelInfo","Title","n","browse","favorites","title","dispatch","select","item","favorite","reverse","getURL","toLowerCase","recentlyUsed","items","$config","options","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","locals","uploadEnabled","x","opacity","current_path","message","level_path","duration","preview_path","Description","scrollX","container","currentPath","showContentBrowser","selectedItems","selectedUids","previewUids","contentItems","showUpload","previewItem","keyboardNavInitialized","shiftKey","vw","documentElement","clientWidth","window","innerWidth","updatePreview","data","uuid","action","$previewUids","maximumSelectionSize","splice","changePath","e","folderPath","scrollToRight","showPreview","clickItem","levelWrapper","currentTarget","closest","prevSelection","querySelectorAll","el","children","dataset","metaKey","ctrlKey","map","classList","remove","focus","add","initKeyboardNav","possibleFocusEls","querySelector","keyboardNavigation","key","cancelSelection","nextElementSibling","click","previousElementSibling","currCol","nxtCol","prevCol","isSelectable","addItem","addSelectedItems","$selectedItems","alreadyPresent","updateRecentlyUsed","$showContentBrowser","previewItems","$selectedUids","scrollContainer","scrollWidth","debounce","$currentPath","value","timeout","uploadEl","baseUrl","rootUrl","relativePath","allowPathSelection","hiddenInputContainer","success","fileUpload","obj","detail","alert","observer","IntersectionObserver","entries","entry","isIntersecting","levelPath","levelNextPage","threshold","root","margin","setTimeout","observe","width","ref","initializing","fieldId","selectedItemsNode","getElementById","unselectItem","initializeSorting","previousSibling","draggable","animation","onUpdate","sortedUuids","setNodeValue","node_val","separator","events","change_event","initialValue","selection","initializeSelectedItemsStore","selectedUidsFromSelectedItems","contextPath","basePath","upload","bSize","log","getLogger","setContext","setCurrentPath","setConfig","setPathCache","selItems","setSelectedItems","setShowContentBrowser","selUids","setSelectedUids","prevUids","setPreviewUids","debug"],"sourceRoot":""}