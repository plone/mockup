{"version":3,"file":"chunks/7847.b5b327c5ea59e72798f0.min.js","mappings":"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","sources":["webpack://@plone/mockup/./node_modules/tinymce/plugins/importcss/plugin.js"],"sourcesContent":["/**\n * TinyMCE version 7.2.1 (2024-07-03)\n */\n\n(function () {\n    'use strict';\n\n    var global$4 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    const hasProto = (v, constructor, predicate) => {\n      var _a;\n      if (predicate(v, constructor.prototype)) {\n        return true;\n      } else {\n        return ((_a = v.constructor) === null || _a === void 0 ? void 0 : _a.name) === constructor.name;\n      }\n    };\n    const typeOf = x => {\n      const t = typeof x;\n      if (x === null) {\n        return 'null';\n      } else if (t === 'object' && Array.isArray(x)) {\n        return 'array';\n      } else if (t === 'object' && hasProto(x, String, (o, proto) => proto.isPrototypeOf(o))) {\n        return 'string';\n      } else {\n        return t;\n      }\n    };\n    const isType = type => value => typeOf(value) === type;\n    const isSimpleType = type => value => typeof value === type;\n    const isString = isType('string');\n    const isObject = isType('object');\n    const isArray = isType('array');\n    const isFunction = isSimpleType('function');\n\n    var global$3 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.EditorManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.Env');\n\n    var global = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    const option = name => editor => editor.options.get(name);\n    const register = editor => {\n      const registerOption = editor.options.register;\n      const filterProcessor = value => isString(value) || isFunction(value) || isObject(value);\n      registerOption('importcss_merge_classes', {\n        processor: 'boolean',\n        default: true\n      });\n      registerOption('importcss_exclusive', {\n        processor: 'boolean',\n        default: true\n      });\n      registerOption('importcss_selector_converter', { processor: 'function' });\n      registerOption('importcss_selector_filter', { processor: filterProcessor });\n      registerOption('importcss_file_filter', { processor: filterProcessor });\n      registerOption('importcss_groups', { processor: 'object[]' });\n      registerOption('importcss_append', {\n        processor: 'boolean',\n        default: false\n      });\n    };\n    const shouldMergeClasses = option('importcss_merge_classes');\n    const shouldImportExclusive = option('importcss_exclusive');\n    const getSelectorConverter = option('importcss_selector_converter');\n    const getSelectorFilter = option('importcss_selector_filter');\n    const getCssGroups = option('importcss_groups');\n    const shouldAppend = option('importcss_append');\n    const getFileFilter = option('importcss_file_filter');\n    const getSkin = option('skin');\n    const getSkinUrl = option('skin_url');\n\n    const nativePush = Array.prototype.push;\n    const map = (xs, f) => {\n      const len = xs.length;\n      const r = new Array(len);\n      for (let i = 0; i < len; i++) {\n        const x = xs[i];\n        r[i] = f(x, i);\n      }\n      return r;\n    };\n    const flatten = xs => {\n      const r = [];\n      for (let i = 0, len = xs.length; i < len; ++i) {\n        if (!isArray(xs[i])) {\n          throw new Error('Arr.flatten item ' + i + ' was not an array, input: ' + xs);\n        }\n        nativePush.apply(r, xs[i]);\n      }\n      return r;\n    };\n    const bind = (xs, f) => flatten(map(xs, f));\n\n    const generate = () => {\n      const ungroupedOrder = [];\n      const groupOrder = [];\n      const groups = {};\n      const addItemToGroup = (groupTitle, itemInfo) => {\n        if (groups[groupTitle]) {\n          groups[groupTitle].push(itemInfo);\n        } else {\n          groupOrder.push(groupTitle);\n          groups[groupTitle] = [itemInfo];\n        }\n      };\n      const addItem = itemInfo => {\n        ungroupedOrder.push(itemInfo);\n      };\n      const toFormats = () => {\n        const groupItems = bind(groupOrder, g => {\n          const items = groups[g];\n          return items.length === 0 ? [] : [{\n              title: g,\n              items\n            }];\n        });\n        return groupItems.concat(ungroupedOrder);\n      };\n      return {\n        addItemToGroup,\n        addItem,\n        toFormats\n      };\n    };\n\n    const internalEditorStyle = /^\\.(?:ephox|tiny-pageembed|mce)(?:[.-]+\\w+)+$/;\n    const removeCacheSuffix = url => {\n      const cacheSuffix = global$1.cacheSuffix;\n      if (isString(url)) {\n        url = url.replace('?' + cacheSuffix, '').replace('&' + cacheSuffix, '');\n      }\n      return url;\n    };\n    const isSkinContentCss = (editor, href) => {\n      const skin = getSkin(editor);\n      if (skin) {\n        const skinUrlBase = getSkinUrl(editor);\n        const skinUrl = skinUrlBase ? editor.documentBaseURI.toAbsolute(skinUrlBase) : global$2.baseURL + '/skins/ui/' + skin;\n        const contentSkinUrlPart = global$2.baseURL + '/skins/content/';\n        const suffix = editor.editorManager.suffix;\n        return href === skinUrl + '/content' + (editor.inline ? '.inline' : '') + `${ suffix }.css` || href.indexOf(contentSkinUrlPart) !== -1;\n      }\n      return false;\n    };\n    const compileFilter = filter => {\n      if (isString(filter)) {\n        return value => {\n          return value.indexOf(filter) !== -1;\n        };\n      } else if (filter instanceof RegExp) {\n        return value => {\n          return filter.test(value);\n        };\n      }\n      return filter;\n    };\n    const isCssImportRule = rule => rule.styleSheet;\n    const isCssPageRule = rule => rule.selectorText;\n    const getSelectors = (editor, doc, fileFilter) => {\n      const selectors = [];\n      const contentCSSUrls = {};\n      const append = (styleSheet, imported) => {\n        let href = styleSheet.href;\n        let rules;\n        href = removeCacheSuffix(href);\n        if (!href || fileFilter && !fileFilter(href, imported) || isSkinContentCss(editor, href)) {\n          return;\n        }\n        global.each(styleSheet.imports, styleSheet => {\n          append(styleSheet, true);\n        });\n        try {\n          rules = styleSheet.cssRules || styleSheet.rules;\n        } catch (e) {\n        }\n        global.each(rules, cssRule => {\n          if (isCssImportRule(cssRule) && cssRule.styleSheet) {\n            append(cssRule.styleSheet, true);\n          } else if (isCssPageRule(cssRule)) {\n            global.each(cssRule.selectorText.split(','), selector => {\n              selectors.push(global.trim(selector));\n            });\n          }\n        });\n      };\n      global.each(editor.contentCSS, url => {\n        contentCSSUrls[url] = true;\n      });\n      if (!fileFilter) {\n        fileFilter = (href, imported) => {\n          return imported || contentCSSUrls[href];\n        };\n      }\n      try {\n        global.each(doc.styleSheets, styleSheet => {\n          append(styleSheet);\n        });\n      } catch (e) {\n      }\n      return selectors;\n    };\n    const defaultConvertSelectorToFormat = (editor, selectorText) => {\n      let format = {};\n      const selector = /^(?:([a-z0-9\\-_]+))?(\\.[a-z0-9_\\-\\.]+)$/i.exec(selectorText);\n      if (!selector) {\n        return;\n      }\n      const elementName = selector[1];\n      const classes = selector[2].substr(1).split('.').join(' ');\n      const inlineSelectorElements = global.makeMap('a,img');\n      if (selector[1]) {\n        format = { title: selectorText };\n        if (editor.schema.getTextBlockElements()[elementName]) {\n          format.block = elementName;\n        } else if (editor.schema.getBlockElements()[elementName] || inlineSelectorElements[elementName.toLowerCase()]) {\n          format.selector = elementName;\n        } else {\n          format.inline = elementName;\n        }\n      } else if (selector[2]) {\n        format = {\n          inline: 'span',\n          title: selectorText.substr(1),\n          classes\n        };\n      }\n      if (shouldMergeClasses(editor)) {\n        format.classes = classes;\n      } else {\n        format.attributes = { class: classes };\n      }\n      return format;\n    };\n    const getGroupsBySelector = (groups, selector) => {\n      return global.grep(groups, group => {\n        return !group.filter || group.filter(selector);\n      });\n    };\n    const compileUserDefinedGroups = groups => {\n      return global.map(groups, group => {\n        return global.extend({}, group, {\n          original: group,\n          selectors: {},\n          filter: compileFilter(group.filter)\n        });\n      });\n    };\n    const isExclusiveMode = (editor, group) => {\n      return group === null || shouldImportExclusive(editor);\n    };\n    const isUniqueSelector = (editor, selector, group, globallyUniqueSelectors) => {\n      return !(isExclusiveMode(editor, group) ? selector in globallyUniqueSelectors : selector in group.selectors);\n    };\n    const markUniqueSelector = (editor, selector, group, globallyUniqueSelectors) => {\n      if (isExclusiveMode(editor, group)) {\n        globallyUniqueSelectors[selector] = true;\n      } else {\n        group.selectors[selector] = true;\n      }\n    };\n    const convertSelectorToFormat = (editor, plugin, selector, group) => {\n      let selectorConverter;\n      const converter = getSelectorConverter(editor);\n      if (group && group.selector_converter) {\n        selectorConverter = group.selector_converter;\n      } else if (converter) {\n        selectorConverter = converter;\n      } else {\n        selectorConverter = () => {\n          return defaultConvertSelectorToFormat(editor, selector);\n        };\n      }\n      return selectorConverter.call(plugin, selector, group);\n    };\n    const setup = editor => {\n      editor.on('init', () => {\n        const model = generate();\n        const globallyUniqueSelectors = {};\n        const selectorFilter = compileFilter(getSelectorFilter(editor));\n        const groups = compileUserDefinedGroups(getCssGroups(editor));\n        const processSelector = (selector, group) => {\n          if (isUniqueSelector(editor, selector, group, globallyUniqueSelectors)) {\n            markUniqueSelector(editor, selector, group, globallyUniqueSelectors);\n            const format = convertSelectorToFormat(editor, editor.plugins.importcss, selector, group);\n            if (format) {\n              const formatName = format.name || global$3.DOM.uniqueId();\n              editor.formatter.register(formatName, format);\n              return {\n                title: format.title,\n                format: formatName\n              };\n            }\n          }\n          return null;\n        };\n        global.each(getSelectors(editor, editor.getDoc(), compileFilter(getFileFilter(editor))), selector => {\n          if (!internalEditorStyle.test(selector)) {\n            if (!selectorFilter || selectorFilter(selector)) {\n              const selectorGroups = getGroupsBySelector(groups, selector);\n              if (selectorGroups.length > 0) {\n                global.each(selectorGroups, group => {\n                  const menuItem = processSelector(selector, group);\n                  if (menuItem) {\n                    model.addItemToGroup(group.title, menuItem);\n                  }\n                });\n              } else {\n                const menuItem = processSelector(selector, null);\n                if (menuItem) {\n                  model.addItem(menuItem);\n                }\n              }\n            }\n          }\n        });\n        const items = model.toFormats();\n        editor.dispatch('addStyleModifications', {\n          items,\n          replace: !shouldAppend(editor)\n        });\n      });\n    };\n\n    const get = editor => {\n      const convertSelectorToFormat = selectorText => {\n        return defaultConvertSelectorToFormat(editor, selectorText);\n      };\n      return { convertSelectorToFormat };\n    };\n\n    var Plugin = () => {\n      global$4.add('importcss', editor => {\n        register(editor);\n        setup(editor);\n        return get(editor);\n      });\n    };\n\n    Plugin();\n\n})();\n"],"names":["global$4","tinymce","util","Tools","resolve","isType","type","value","x","t","Array","isArray","o","v","proto","constructor","String","prototype","isPrototypeOf","_a","name","typeOf","isString","isObject","isFunction","global$3","global$2","global$1","global","option","editor","options","get","shouldMergeClasses","shouldImportExclusive","getSelectorConverter","getSelectorFilter","getCssGroups","shouldAppend","getFileFilter","getSkin","getSkinUrl","nativePush","push","bind","xs","f","r","i","len","length","Error","apply","flatten","map","internalEditorStyle","compileFilter","filter","indexOf","RegExp","test","getSelectors","doc","fileFilter","selectors","contentCSSUrls","append","styleSheet","imported","rules","href","url","cacheSuffix","replace","removeCacheSuffix","skin","skinUrlBase","skinUrl","documentBaseURI","toAbsolute","baseURL","contentSkinUrlPart","suffix","editorManager","inline","isSkinContentCss","each","imports","cssRules","e","cssRule","rule","selectorText","isCssPageRule","split","selector","trim","contentCSS","styleSheets","defaultConvertSelectorToFormat","format","exec","elementName","classes","substr","join","inlineSelectorElements","makeMap","title","schema","getTextBlockElements","block","getBlockElements","toLowerCase","attributes","class","isExclusiveMode","group","setup","on","model","ungroupedOrder","groupOrder","groups","addItemToGroup","groupTitle","itemInfo","addItem","toFormats","g","items","concat","generate","globallyUniqueSelectors","selectorFilter","extend","original","compileUserDefinedGroups","processSelector","isUniqueSelector","markUniqueSelector","plugin","selectorConverter","converter","selector_converter","call","convertSelectorToFormat","plugins","importcss","formatName","DOM","uniqueId","formatter","register","getDoc","selectorGroups","grep","getGroupsBySelector","menuItem","dispatch","add","registerOption","filterProcessor","processor","default"],"sourceRoot":""}